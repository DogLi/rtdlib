
use std::fmt::Debug;
use std::str::FromStr;

use crate::types::*;
use crate::tdkit;

/// Represents a remote file. 
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RemoteFile {
  #[doc(hidden)]
  #[serde(rename(serialize = "@type", deserialize = "@type"))]
  td_name: String, // remoteFile
  /// Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with "http://" or "https://", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and "#url#" as the conversion string. Clients should generate the file by downloading it to the specified location.
  id: Option<String>,
  /// True, if the file is currently being uploaded (or a remote copy is being generated by some other means).
  is_uploading_active: Option<bool>,
  /// True, if a remote copy is fully available.
  is_uploading_completed: Option<bool>,
  /// Size of the remote available part of the file; 0 if unknown.
  uploaded_size: Option<i32>,
  
}



impl Object for RemoteFile {}
impl RObject for RemoteFile {
  #[doc(hidden)] fn td_name(&self) -> &'static str { "remoteFile" }
  fn td_type(&self) -> RTDType { RTDType::RemoteFile }
  fn to_json(&self) -> String { rtd_to_json!()(self) }
}



impl RemoteFile {
  #[doc(hidden)] pub fn _new() -> Self {
    Self {
      td_name: "remoteFile".to_string(),
      id: None,
      is_uploading_active: None,
      is_uploading_completed: None,
      uploaded_size: None,
      
    }
  }
  
  pub fn id(&self) -> Option<String> { self.id.clone() }
  #[doc(hidden)] pub fn _set_id(&mut self, id: String) -> &mut Self { self.id = Some(id); self }
  
  pub fn is_uploading_active(&self) -> Option<bool> { self.is_uploading_active.clone() }
  #[doc(hidden)] pub fn _set_is_uploading_active(&mut self, is_uploading_active: bool) -> &mut Self { self.is_uploading_active = Some(is_uploading_active); self }
  
  pub fn is_uploading_completed(&self) -> Option<bool> { self.is_uploading_completed.clone() }
  #[doc(hidden)] pub fn _set_is_uploading_completed(&mut self, is_uploading_completed: bool) -> &mut Self { self.is_uploading_completed = Some(is_uploading_completed); self }
  
  pub fn uploaded_size(&self) -> Option<i32> { self.uploaded_size.clone() }
  #[doc(hidden)] pub fn _set_uploaded_size(&mut self, uploaded_size: i32) -> &mut Self { self.uploaded_size = Some(uploaded_size); self }
  
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}



