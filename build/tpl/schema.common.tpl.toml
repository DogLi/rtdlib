
[define]

uses = [
  "std::fmt::Debug",
  "std::str::FromStr",
  "crate::tdkit"
]

macros = [
"""
macro_rules! from_json {
  () => {
    |json| match serde_json::from_str(&tdkit::fill_json_struct(json)[..]) {
      Ok(t) => t,
      Err(e) => {
        eprintln!("{:?}", e);
        None
      }
    }
  };
}
""",
"""
macro_rules! rtd_of {
  ($rtd_type:ident) => {
    |text| match $rtd_type::from_str(&tdkit::uppercase_first_char(text)[..]) {
      Ok(t) => Some(t),
      Err(e) => {
        eprintln!("{:?}", e);
        None
      }
    }
  };
}
""",
"""
macro_rules! rtd_clone {
  () => {
    |obj| {
      let json = serde_json::to_string(obj).unwrap();
      serde_json::from_str(&json[..]).unwrap()
    }
  }
}
""",
"""
macro_rules! rtd_to_json {
  () => {
    |obj| tdkit::fill_json_struct(serde_json::to_string(obj).unwrap())
  }
}
""",
]


[rtd]

[rtd.RObject]
origin_name = "RObject"
clz_name = "RObject"
is_private = false
clz_is_trait = true
clz_description = """ All tdlib type abstract class defined the same behavior """
has_subclasses = true
sub_classes = [
  {% for item in common.clzs %}{ name = "{{item.name}}", is_trait = {{item.is_trait}} },
  {% endfor %}
]
fields = []
fields_size = 0
has_trait_field = false
set_trait_typetag = false
dna = "trait"


[[rtd.RObject.trait_fns]]
doc_hidden = true
name = "td_name"
ret = "&'static str"

[[rtd.RObject.trait_fns]]
doc_hidden = false
name = "td_type"
ret = "RTDType"
description = "convert TDLib type to rust enum RTDType"

[[rtd.RObject.trait_fns]]
doc_hidden = false
name = "to_json"
ret = "RTDType"
description = """
The string that implements the return of to_json should be called `tdkit::fill_json_struct` for optimization,
appending the `@struct` field, although usually struct will actively generate `@struct`, but not in `Object` and `Function`,
because the implementation of typetag cannot be automatically generated.
"""


[rtd.TlObject]
origin_name = "TlObject"
clz_name = "TlObject"
is_private = true
clz_is_trait = true
clz_description = """
This class is a base class for all TDLib TL-objects.
This parent class is not important and will not be implemented for every class.
"""
dna = "trait"


[rtd.RTDType]
clz_name = "RTDType"
is_private = false
clz_is_trait = false
clz_description = """ TDLib all class name mappers """
has_subclasses = false
sub_classes = []
fields = [
  {% for item in common.clzs %}{ doc_hidden = false, name = "{{ item.name }}" },
  {% endfor %}
]
fields_size = {{common.clzs | length}}
has_trait_field = false
set_trait_typetag = false
dna = "enum"
extra_fns = [
"""
impl RTDType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDType)(text.as_ref()) }
}
""",
]
