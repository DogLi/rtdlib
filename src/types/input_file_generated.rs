
use std::fmt::Debug;
use std::str::FromStr;

use crate::types::*;
use crate::tdkit;

/// A file generated by the client. 
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InputFileGenerated {
  #[doc(hidden)]
  #[serde(rename(serialize = "@type", deserialize = "@type"))]
  td_name: String, // inputFileGenerated
  /// Local path to a file from which the file is generated; may be empty if there is no such file.
  original_path: Option<String>,
  /// String specifying the conversion applied to the original file; should be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage.
  conversion: Option<String>,
  /// Expected size of the generated file; 0 if unknown.
  expected_size: Option<i32>,
  
}



impl Object for InputFileGenerated {}
impl RObject for InputFileGenerated {
  #[doc(hidden)] fn td_name(&self) -> &'static str { "inputFileGenerated" }
  fn td_type(&self) -> RTDType { RTDType::InputFileGenerated }
  fn to_json(&self) -> String { rtd_to_json!()(self) }
}


#[typetag::serde] impl InputFile for InputFileGenerated {}


impl InputFileGenerated {
  #[doc(hidden)] pub fn _new() -> Self {
    Self {
      td_name: "inputFileGenerated".to_string(),
      original_path: None,
      conversion: None,
      expected_size: None,
      
    }
  }
  
  pub fn original_path(&self) -> Option<String> { self.original_path.clone() }
  #[doc(hidden)] pub fn _set_original_path(&mut self, original_path: String) -> &mut Self { self.original_path = Some(original_path); self }
  
  pub fn conversion(&self) -> Option<String> { self.conversion.clone() }
  #[doc(hidden)] pub fn _set_conversion(&mut self, conversion: String) -> &mut Self { self.conversion = Some(conversion); self }
  
  pub fn expected_size(&self) -> Option<i32> { self.expected_size.clone() }
  #[doc(hidden)] pub fn _set_expected_size(&mut self, expected_size: i32) -> &mut Self { self.expected_size = Some(expected_size); self }
  
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}



