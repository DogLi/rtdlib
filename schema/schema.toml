
[define]

uses = [
  "std::fmt::Debug",
  "std::str::FromStr",
  "crate::tdkit"
]

macros = [
"""
macro_rules! from_json {
  () => {
    |json| match serde_json::from_str(&tdkit::fill_json_struct(json)[..]) {
      Ok(t) => t,
      Err(e) => {
        eprintln!("{:?}", e);
        None
      }
    }
  };
}
""",
"""
macro_rules! rtd_of {
  ($rtd_type:ident) => {
    |text| match $rtd_type::from_str(&tdkit::uppercase_first_char(text)[..]) {
      Ok(t) => Some(t),
      Err(e) => {
        eprintln!("{:?}", e);
        None
      }
    }
  };
}
""",
"""
macro_rules! rtd_clone {
  () => {
    |obj| {
      let json = serde_json::to_string(obj).unwrap();
      serde_json::from_str(&json[..]).unwrap()
    }
  }
}
""",
"""
macro_rules! rtd_to_json {
  () => {
    |obj| tdkit::fill_json_struct(serde_json::to_string(obj).unwrap())
  }
}
""",
]


[rtd]

[rtd.RObject]
origin_name = "RObject"
clz_name = "RObject"
is_private = false
clz_is_trait = true
clz_description = """ All tdlib type abstract class defined the same behavior """
has_subclasses = true
sub_classes = [
  { name = "Object", is_trait = true },
  { name = "Function", is_trait = true },
  { name = "AccountTtl", is_trait = false },
  { name = "Address", is_trait = false },
  { name = "Animation", is_trait = false },
  { name = "Animations", is_trait = false },
  { name = "Audio", is_trait = false },
  { name = "AuthenticationCodeInfo", is_trait = false },
  { name = "AuthenticationCodeType", is_trait = true },
  { name = "AuthenticationCodeTypeTelegramMessage", is_trait = false },
  { name = "AuthenticationCodeTypeSms", is_trait = false },
  { name = "AuthenticationCodeTypeCall", is_trait = false },
  { name = "AuthenticationCodeTypeFlashCall", is_trait = false },
  { name = "AuthorizationState", is_trait = true },
  { name = "AuthorizationStateWaitTdlibParameters", is_trait = false },
  { name = "AuthorizationStateWaitEncryptionKey", is_trait = false },
  { name = "AuthorizationStateWaitPhoneNumber", is_trait = false },
  { name = "AuthorizationStateWaitCode", is_trait = false },
  { name = "AuthorizationStateWaitPassword", is_trait = false },
  { name = "AuthorizationStateReady", is_trait = false },
  { name = "AuthorizationStateLoggingOut", is_trait = false },
  { name = "AuthorizationStateClosing", is_trait = false },
  { name = "AuthorizationStateClosed", is_trait = false },
  { name = "BasicGroup", is_trait = false },
  { name = "BasicGroupFullInfo", is_trait = false },
  { name = "BotCommand", is_trait = false },
  { name = "BotInfo", is_trait = false },
  { name = "Call", is_trait = false },
  { name = "CallConnection", is_trait = false },
  { name = "CallDiscardReason", is_trait = true },
  { name = "CallDiscardReasonEmpty", is_trait = false },
  { name = "CallDiscardReasonMissed", is_trait = false },
  { name = "CallDiscardReasonDeclined", is_trait = false },
  { name = "CallDiscardReasonDisconnected", is_trait = false },
  { name = "CallDiscardReasonHungUp", is_trait = false },
  { name = "CallId", is_trait = false },
  { name = "CallProtocol", is_trait = false },
  { name = "CallState", is_trait = true },
  { name = "CallStatePending", is_trait = false },
  { name = "CallStateExchangingKeys", is_trait = false },
  { name = "CallStateReady", is_trait = false },
  { name = "CallStateHangingUp", is_trait = false },
  { name = "CallStateDiscarded", is_trait = false },
  { name = "CallStateError", is_trait = false },
  { name = "CallbackQueryAnswer", is_trait = false },
  { name = "CallbackQueryPayload", is_trait = true },
  { name = "CallbackQueryPayloadData", is_trait = false },
  { name = "CallbackQueryPayloadGame", is_trait = false },
  { name = "Chat", is_trait = false },
  { name = "ChatAction", is_trait = true },
  { name = "ChatActionTyping", is_trait = false },
  { name = "ChatActionRecordingVideo", is_trait = false },
  { name = "ChatActionUploadingVideo", is_trait = false },
  { name = "ChatActionRecordingVoiceNote", is_trait = false },
  { name = "ChatActionUploadingVoiceNote", is_trait = false },
  { name = "ChatActionUploadingPhoto", is_trait = false },
  { name = "ChatActionUploadingDocument", is_trait = false },
  { name = "ChatActionChoosingLocation", is_trait = false },
  { name = "ChatActionChoosingContact", is_trait = false },
  { name = "ChatActionStartPlayingGame", is_trait = false },
  { name = "ChatActionRecordingVideoNote", is_trait = false },
  { name = "ChatActionUploadingVideoNote", is_trait = false },
  { name = "ChatActionCancel", is_trait = false },
  { name = "ChatEvent", is_trait = false },
  { name = "ChatEventAction", is_trait = true },
  { name = "ChatEventMessageEdited", is_trait = false },
  { name = "ChatEventMessageDeleted", is_trait = false },
  { name = "ChatEventMessagePinned", is_trait = false },
  { name = "ChatEventMessageUnpinned", is_trait = false },
  { name = "ChatEventMemberJoined", is_trait = false },
  { name = "ChatEventMemberLeft", is_trait = false },
  { name = "ChatEventMemberInvited", is_trait = false },
  { name = "ChatEventMemberPromoted", is_trait = false },
  { name = "ChatEventMemberRestricted", is_trait = false },
  { name = "ChatEventTitleChanged", is_trait = false },
  { name = "ChatEventDescriptionChanged", is_trait = false },
  { name = "ChatEventUsernameChanged", is_trait = false },
  { name = "ChatEventPhotoChanged", is_trait = false },
  { name = "ChatEventInvitesToggled", is_trait = false },
  { name = "ChatEventSignMessagesToggled", is_trait = false },
  { name = "ChatEventStickerSetChanged", is_trait = false },
  { name = "ChatEventIsAllHistoryAvailableToggled", is_trait = false },
  { name = "ChatEventLogFilters", is_trait = false },
  { name = "ChatEvents", is_trait = false },
  { name = "ChatInviteLink", is_trait = false },
  { name = "ChatInviteLinkInfo", is_trait = false },
  { name = "ChatMember", is_trait = false },
  { name = "ChatMemberStatus", is_trait = true },
  { name = "ChatMemberStatusCreator", is_trait = false },
  { name = "ChatMemberStatusAdministrator", is_trait = false },
  { name = "ChatMemberStatusMember", is_trait = false },
  { name = "ChatMemberStatusRestricted", is_trait = false },
  { name = "ChatMemberStatusLeft", is_trait = false },
  { name = "ChatMemberStatusBanned", is_trait = false },
  { name = "ChatMembers", is_trait = false },
  { name = "ChatMembersFilter", is_trait = true },
  { name = "ChatMembersFilterAdministrators", is_trait = false },
  { name = "ChatMembersFilterMembers", is_trait = false },
  { name = "ChatMembersFilterRestricted", is_trait = false },
  { name = "ChatMembersFilterBanned", is_trait = false },
  { name = "ChatMembersFilterBots", is_trait = false },
  { name = "ChatNotificationSettings", is_trait = false },
  { name = "ChatPhoto", is_trait = false },
  { name = "ChatReportReason", is_trait = true },
  { name = "ChatReportReasonSpam", is_trait = false },
  { name = "ChatReportReasonViolence", is_trait = false },
  { name = "ChatReportReasonPornography", is_trait = false },
  { name = "ChatReportReasonChildAbuse", is_trait = false },
  { name = "ChatReportReasonCopyright", is_trait = false },
  { name = "ChatReportReasonCustom", is_trait = false },
  { name = "ChatReportSpamState", is_trait = false },
  { name = "ChatType", is_trait = true },
  { name = "ChatTypePrivate", is_trait = false },
  { name = "ChatTypeBasicGroup", is_trait = false },
  { name = "ChatTypeSupergroup", is_trait = false },
  { name = "ChatTypeSecret", is_trait = false },
  { name = "Chats", is_trait = false },
  { name = "CheckChatUsernameResult", is_trait = true },
  { name = "CheckChatUsernameResultOk", is_trait = false },
  { name = "CheckChatUsernameResultUsernameInvalid", is_trait = false },
  { name = "CheckChatUsernameResultUsernameOccupied", is_trait = false },
  { name = "CheckChatUsernameResultPublicChatsTooMuch", is_trait = false },
  { name = "CheckChatUsernameResultPublicGroupsUnavailable", is_trait = false },
  { name = "ConnectedWebsite", is_trait = false },
  { name = "ConnectedWebsites", is_trait = false },
  { name = "ConnectionState", is_trait = true },
  { name = "ConnectionStateWaitingForNetwork", is_trait = false },
  { name = "ConnectionStateConnectingToProxy", is_trait = false },
  { name = "ConnectionStateConnecting", is_trait = false },
  { name = "ConnectionStateUpdating", is_trait = false },
  { name = "ConnectionStateReady", is_trait = false },
  { name = "Contact", is_trait = false },
  { name = "Count", is_trait = false },
  { name = "CustomRequestResult", is_trait = false },
  { name = "DatabaseStatistics", is_trait = false },
  { name = "Date", is_trait = false },
  { name = "DatedFile", is_trait = false },
  { name = "DeepLinkInfo", is_trait = false },
  { name = "DeviceToken", is_trait = true },
  { name = "DeviceTokenFirebaseCloudMessaging", is_trait = false },
  { name = "DeviceTokenApplePush", is_trait = false },
  { name = "DeviceTokenApplePushVoIP", is_trait = false },
  { name = "DeviceTokenWindowsPush", is_trait = false },
  { name = "DeviceTokenMicrosoftPush", is_trait = false },
  { name = "DeviceTokenMicrosoftPushVoIP", is_trait = false },
  { name = "DeviceTokenWebPush", is_trait = false },
  { name = "DeviceTokenSimplePush", is_trait = false },
  { name = "DeviceTokenUbuntuPush", is_trait = false },
  { name = "DeviceTokenBlackBerryPush", is_trait = false },
  { name = "DeviceTokenTizenPush", is_trait = false },
  { name = "Document", is_trait = false },
  { name = "DraftMessage", is_trait = false },
  { name = "EmailAddressAuthenticationCodeInfo", is_trait = false },
  { name = "EncryptedCredentials", is_trait = false },
  { name = "EncryptedPassportElement", is_trait = false },
  { name = "Error", is_trait = false },
  { name = "File", is_trait = false },
  { name = "FilePart", is_trait = false },
  { name = "FileType", is_trait = true },
  { name = "FileTypeNone", is_trait = false },
  { name = "FileTypeAnimation", is_trait = false },
  { name = "FileTypeAudio", is_trait = false },
  { name = "FileTypeDocument", is_trait = false },
  { name = "FileTypePhoto", is_trait = false },
  { name = "FileTypeProfilePhoto", is_trait = false },
  { name = "FileTypeSecret", is_trait = false },
  { name = "FileTypeSecretThumbnail", is_trait = false },
  { name = "FileTypeSecure", is_trait = false },
  { name = "FileTypeSticker", is_trait = false },
  { name = "FileTypeThumbnail", is_trait = false },
  { name = "FileTypeUnknown", is_trait = false },
  { name = "FileTypeVideo", is_trait = false },
  { name = "FileTypeVideoNote", is_trait = false },
  { name = "FileTypeVoiceNote", is_trait = false },
  { name = "FileTypeWallpaper", is_trait = false },
  { name = "FormattedText", is_trait = false },
  { name = "FoundMessages", is_trait = false },
  { name = "Game", is_trait = false },
  { name = "GameHighScore", is_trait = false },
  { name = "GameHighScores", is_trait = false },
  { name = "Hashtags", is_trait = false },
  { name = "HttpUrl", is_trait = false },
  { name = "IdentityDocument", is_trait = false },
  { name = "ImportedContacts", is_trait = false },
  { name = "InlineKeyboardButton", is_trait = false },
  { name = "InlineKeyboardButtonType", is_trait = true },
  { name = "InlineKeyboardButtonTypeUrl", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallback", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallbackGame", is_trait = false },
  { name = "InlineKeyboardButtonTypeSwitchInline", is_trait = false },
  { name = "InlineKeyboardButtonTypeBuy", is_trait = false },
  { name = "InlineQueryResult", is_trait = true },
  { name = "InlineQueryResultArticle", is_trait = false },
  { name = "InlineQueryResultContact", is_trait = false },
  { name = "InlineQueryResultLocation", is_trait = false },
  { name = "InlineQueryResultVenue", is_trait = false },
  { name = "InlineQueryResultGame", is_trait = false },
  { name = "InlineQueryResultAnimation", is_trait = false },
  { name = "InlineQueryResultAudio", is_trait = false },
  { name = "InlineQueryResultDocument", is_trait = false },
  { name = "InlineQueryResultPhoto", is_trait = false },
  { name = "InlineQueryResultSticker", is_trait = false },
  { name = "InlineQueryResultVideo", is_trait = false },
  { name = "InlineQueryResultVoiceNote", is_trait = false },
  { name = "InlineQueryResults", is_trait = false },
  { name = "InputCredentials", is_trait = true },
  { name = "InputCredentialsSaved", is_trait = false },
  { name = "InputCredentialsNew", is_trait = false },
  { name = "InputCredentialsAndroidPay", is_trait = false },
  { name = "InputCredentialsApplePay", is_trait = false },
  { name = "InputFile", is_trait = true },
  { name = "InputFileId", is_trait = false },
  { name = "InputFileRemote", is_trait = false },
  { name = "InputFileLocal", is_trait = false },
  { name = "InputFileGenerated", is_trait = false },
  { name = "InputIdentityDocument", is_trait = false },
  { name = "InputInlineQueryResult", is_trait = true },
  { name = "InputInlineQueryResultAnimatedGif", is_trait = false },
  { name = "InputInlineQueryResultAnimatedMpeg4", is_trait = false },
  { name = "InputInlineQueryResultArticle", is_trait = false },
  { name = "InputInlineQueryResultAudio", is_trait = false },
  { name = "InputInlineQueryResultContact", is_trait = false },
  { name = "InputInlineQueryResultDocument", is_trait = false },
  { name = "InputInlineQueryResultGame", is_trait = false },
  { name = "InputInlineQueryResultLocation", is_trait = false },
  { name = "InputInlineQueryResultPhoto", is_trait = false },
  { name = "InputInlineQueryResultSticker", is_trait = false },
  { name = "InputInlineQueryResultVenue", is_trait = false },
  { name = "InputInlineQueryResultVideo", is_trait = false },
  { name = "InputInlineQueryResultVoiceNote", is_trait = false },
  { name = "InputMessageContent", is_trait = true },
  { name = "InputMessageText", is_trait = false },
  { name = "InputMessageAnimation", is_trait = false },
  { name = "InputMessageAudio", is_trait = false },
  { name = "InputMessageDocument", is_trait = false },
  { name = "InputMessagePhoto", is_trait = false },
  { name = "InputMessageSticker", is_trait = false },
  { name = "InputMessageVideo", is_trait = false },
  { name = "InputMessageVideoNote", is_trait = false },
  { name = "InputMessageVoiceNote", is_trait = false },
  { name = "InputMessageLocation", is_trait = false },
  { name = "InputMessageVenue", is_trait = false },
  { name = "InputMessageContact", is_trait = false },
  { name = "InputMessageGame", is_trait = false },
  { name = "InputMessageInvoice", is_trait = false },
  { name = "InputMessagePoll", is_trait = false },
  { name = "InputMessageForwarded", is_trait = false },
  { name = "InputPassportElement", is_trait = true },
  { name = "InputPassportElementPersonalDetails", is_trait = false },
  { name = "InputPassportElementPassport", is_trait = false },
  { name = "InputPassportElementDriverLicense", is_trait = false },
  { name = "InputPassportElementIdentityCard", is_trait = false },
  { name = "InputPassportElementInternalPassport", is_trait = false },
  { name = "InputPassportElementAddress", is_trait = false },
  { name = "InputPassportElementUtilityBill", is_trait = false },
  { name = "InputPassportElementBankStatement", is_trait = false },
  { name = "InputPassportElementRentalAgreement", is_trait = false },
  { name = "InputPassportElementPassportRegistration", is_trait = false },
  { name = "InputPassportElementTemporaryRegistration", is_trait = false },
  { name = "InputPassportElementPhoneNumber", is_trait = false },
  { name = "InputPassportElementEmailAddress", is_trait = false },
  { name = "InputPassportElementError", is_trait = false },
  { name = "InputPassportElementErrorSource", is_trait = true },
  { name = "InputPassportElementErrorSourceUnspecified", is_trait = false },
  { name = "InputPassportElementErrorSourceDataField", is_trait = false },
  { name = "InputPassportElementErrorSourceFrontSide", is_trait = false },
  { name = "InputPassportElementErrorSourceReverseSide", is_trait = false },
  { name = "InputPassportElementErrorSourceSelfie", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "InputPassportElementErrorSourceFile", is_trait = false },
  { name = "InputPassportElementErrorSourceFiles", is_trait = false },
  { name = "InputPersonalDocument", is_trait = false },
  { name = "InputSticker", is_trait = false },
  { name = "InputThumbnail", is_trait = false },
  { name = "Invoice", is_trait = false },
  { name = "KeyboardButton", is_trait = false },
  { name = "KeyboardButtonType", is_trait = true },
  { name = "KeyboardButtonTypeText", is_trait = false },
  { name = "KeyboardButtonTypeRequestPhoneNumber", is_trait = false },
  { name = "KeyboardButtonTypeRequestLocation", is_trait = false },
  { name = "LabeledPricePart", is_trait = false },
  { name = "LanguagePackInfo", is_trait = false },
  { name = "LanguagePackString", is_trait = false },
  { name = "LanguagePackStringValue", is_trait = true },
  { name = "LanguagePackStringValueOrdinary", is_trait = false },
  { name = "LanguagePackStringValuePluralized", is_trait = false },
  { name = "LanguagePackStringValueDeleted", is_trait = false },
  { name = "LanguagePackStrings", is_trait = false },
  { name = "LinkState", is_trait = true },
  { name = "LinkStateNone", is_trait = false },
  { name = "LinkStateKnowsPhoneNumber", is_trait = false },
  { name = "LinkStateIsContact", is_trait = false },
  { name = "LocalFile", is_trait = false },
  { name = "LocalizationTargetInfo", is_trait = false },
  { name = "Location", is_trait = false },
  { name = "LogStream", is_trait = true },
  { name = "LogStreamDefault", is_trait = false },
  { name = "LogStreamFile", is_trait = false },
  { name = "LogStreamEmpty", is_trait = false },
  { name = "LogTags", is_trait = false },
  { name = "LogVerbosityLevel", is_trait = false },
  { name = "MaskPoint", is_trait = true },
  { name = "MaskPointForehead", is_trait = false },
  { name = "MaskPointEyes", is_trait = false },
  { name = "MaskPointMouth", is_trait = false },
  { name = "MaskPointChin", is_trait = false },
  { name = "MaskPosition", is_trait = false },
  { name = "Message", is_trait = false },
  { name = "MessageContent", is_trait = true },
  { name = "MessageText", is_trait = false },
  { name = "MessageAnimation", is_trait = false },
  { name = "MessageAudio", is_trait = false },
  { name = "MessageDocument", is_trait = false },
  { name = "MessagePhoto", is_trait = false },
  { name = "MessageExpiredPhoto", is_trait = false },
  { name = "MessageSticker", is_trait = false },
  { name = "MessageVideo", is_trait = false },
  { name = "MessageExpiredVideo", is_trait = false },
  { name = "MessageVideoNote", is_trait = false },
  { name = "MessageVoiceNote", is_trait = false },
  { name = "MessageLocation", is_trait = false },
  { name = "MessageVenue", is_trait = false },
  { name = "MessageContact", is_trait = false },
  { name = "MessageGame", is_trait = false },
  { name = "MessagePoll", is_trait = false },
  { name = "MessageInvoice", is_trait = false },
  { name = "MessageCall", is_trait = false },
  { name = "MessageBasicGroupChatCreate", is_trait = false },
  { name = "MessageSupergroupChatCreate", is_trait = false },
  { name = "MessageChatChangeTitle", is_trait = false },
  { name = "MessageChatChangePhoto", is_trait = false },
  { name = "MessageChatDeletePhoto", is_trait = false },
  { name = "MessageChatAddMembers", is_trait = false },
  { name = "MessageChatJoinByLink", is_trait = false },
  { name = "MessageChatDeleteMember", is_trait = false },
  { name = "MessageChatUpgradeTo", is_trait = false },
  { name = "MessageChatUpgradeFrom", is_trait = false },
  { name = "MessagePinMessage", is_trait = false },
  { name = "MessageScreenshotTaken", is_trait = false },
  { name = "MessageChatSetTtl", is_trait = false },
  { name = "MessageCustomServiceAction", is_trait = false },
  { name = "MessageGameScore", is_trait = false },
  { name = "MessagePaymentSuccessful", is_trait = false },
  { name = "MessagePaymentSuccessfulBot", is_trait = false },
  { name = "MessageContactRegistered", is_trait = false },
  { name = "MessageWebsiteConnected", is_trait = false },
  { name = "MessagePassportDataSent", is_trait = false },
  { name = "MessagePassportDataReceived", is_trait = false },
  { name = "MessageUnsupported", is_trait = false },
  { name = "MessageForwardInfo", is_trait = false },
  { name = "MessageForwardOrigin", is_trait = true },
  { name = "MessageForwardOriginUser", is_trait = false },
  { name = "MessageForwardOriginHiddenUser", is_trait = false },
  { name = "MessageForwardOriginChannel", is_trait = false },
  { name = "MessageSendingState", is_trait = true },
  { name = "MessageSendingStatePending", is_trait = false },
  { name = "MessageSendingStateFailed", is_trait = false },
  { name = "Messages", is_trait = false },
  { name = "NetworkStatistics", is_trait = false },
  { name = "NetworkStatisticsEntry", is_trait = true },
  { name = "NetworkStatisticsEntryFile", is_trait = false },
  { name = "NetworkStatisticsEntryCall", is_trait = false },
  { name = "NetworkType", is_trait = true },
  { name = "NetworkTypeNone", is_trait = false },
  { name = "NetworkTypeMobile", is_trait = false },
  { name = "NetworkTypeMobileRoaming", is_trait = false },
  { name = "NetworkTypeWiFi", is_trait = false },
  { name = "NetworkTypeOther", is_trait = false },
  { name = "Notification", is_trait = false },
  { name = "NotificationGroup", is_trait = false },
  { name = "NotificationGroupType", is_trait = true },
  { name = "NotificationGroupTypeMessages", is_trait = false },
  { name = "NotificationGroupTypeMentions", is_trait = false },
  { name = "NotificationGroupTypeSecretChat", is_trait = false },
  { name = "NotificationGroupTypeCalls", is_trait = false },
  { name = "NotificationSettingsScope", is_trait = true },
  { name = "NotificationSettingsScopePrivateChats", is_trait = false },
  { name = "NotificationSettingsScopeGroupChats", is_trait = false },
  { name = "NotificationSettingsScopeChannelChats", is_trait = false },
  { name = "NotificationType", is_trait = true },
  { name = "NotificationTypeNewMessage", is_trait = false },
  { name = "NotificationTypeNewSecretChat", is_trait = false },
  { name = "NotificationTypeNewCall", is_trait = false },
  { name = "NotificationTypeNewPushMessage", is_trait = false },
  { name = "Ok", is_trait = false },
  { name = "OptionValue", is_trait = true },
  { name = "OptionValueBoolean", is_trait = false },
  { name = "OptionValueEmpty", is_trait = false },
  { name = "OptionValueInteger", is_trait = false },
  { name = "OptionValueString", is_trait = false },
  { name = "OrderInfo", is_trait = false },
  { name = "PageBlock", is_trait = true },
  { name = "PageBlockTitle", is_trait = false },
  { name = "PageBlockSubtitle", is_trait = false },
  { name = "PageBlockAuthorDate", is_trait = false },
  { name = "PageBlockHeader", is_trait = false },
  { name = "PageBlockSubheader", is_trait = false },
  { name = "PageBlockKicker", is_trait = false },
  { name = "PageBlockParagraph", is_trait = false },
  { name = "PageBlockPreformatted", is_trait = false },
  { name = "PageBlockFooter", is_trait = false },
  { name = "PageBlockDivider", is_trait = false },
  { name = "PageBlockAnchor", is_trait = false },
  { name = "PageBlockList", is_trait = false },
  { name = "PageBlockBlockQuote", is_trait = false },
  { name = "PageBlockPullQuote", is_trait = false },
  { name = "PageBlockAnimation", is_trait = false },
  { name = "PageBlockAudio", is_trait = false },
  { name = "PageBlockPhoto", is_trait = false },
  { name = "PageBlockVideo", is_trait = false },
  { name = "PageBlockCover", is_trait = false },
  { name = "PageBlockEmbedded", is_trait = false },
  { name = "PageBlockEmbeddedPost", is_trait = false },
  { name = "PageBlockCollage", is_trait = false },
  { name = "PageBlockSlideshow", is_trait = false },
  { name = "PageBlockChatLink", is_trait = false },
  { name = "PageBlockTable", is_trait = false },
  { name = "PageBlockDetails", is_trait = false },
  { name = "PageBlockRelatedArticles", is_trait = false },
  { name = "PageBlockMap", is_trait = false },
  { name = "PageBlockCaption", is_trait = false },
  { name = "PageBlockHorizontalAlignment", is_trait = true },
  { name = "PageBlockHorizontalAlignmentLeft", is_trait = false },
  { name = "PageBlockHorizontalAlignmentCenter", is_trait = false },
  { name = "PageBlockHorizontalAlignmentRight", is_trait = false },
  { name = "PageBlockListItem", is_trait = false },
  { name = "PageBlockRelatedArticle", is_trait = false },
  { name = "PageBlockTableCell", is_trait = false },
  { name = "PageBlockVerticalAlignment", is_trait = true },
  { name = "PageBlockVerticalAlignmentTop", is_trait = false },
  { name = "PageBlockVerticalAlignmentMiddle", is_trait = false },
  { name = "PageBlockVerticalAlignmentBottom", is_trait = false },
  { name = "PassportAuthorizationForm", is_trait = false },
  { name = "PassportElement", is_trait = true },
  { name = "PassportElementPersonalDetails", is_trait = false },
  { name = "PassportElementPassport", is_trait = false },
  { name = "PassportElementDriverLicense", is_trait = false },
  { name = "PassportElementIdentityCard", is_trait = false },
  { name = "PassportElementInternalPassport", is_trait = false },
  { name = "PassportElementAddress", is_trait = false },
  { name = "PassportElementUtilityBill", is_trait = false },
  { name = "PassportElementBankStatement", is_trait = false },
  { name = "PassportElementRentalAgreement", is_trait = false },
  { name = "PassportElementPassportRegistration", is_trait = false },
  { name = "PassportElementTemporaryRegistration", is_trait = false },
  { name = "PassportElementPhoneNumber", is_trait = false },
  { name = "PassportElementEmailAddress", is_trait = false },
  { name = "PassportElementError", is_trait = false },
  { name = "PassportElementErrorSource", is_trait = true },
  { name = "PassportElementErrorSourceUnspecified", is_trait = false },
  { name = "PassportElementErrorSourceDataField", is_trait = false },
  { name = "PassportElementErrorSourceFrontSide", is_trait = false },
  { name = "PassportElementErrorSourceReverseSide", is_trait = false },
  { name = "PassportElementErrorSourceSelfie", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "PassportElementErrorSourceFile", is_trait = false },
  { name = "PassportElementErrorSourceFiles", is_trait = false },
  { name = "PassportElementType", is_trait = true },
  { name = "PassportElementTypePersonalDetails", is_trait = false },
  { name = "PassportElementTypePassport", is_trait = false },
  { name = "PassportElementTypeDriverLicense", is_trait = false },
  { name = "PassportElementTypeIdentityCard", is_trait = false },
  { name = "PassportElementTypeInternalPassport", is_trait = false },
  { name = "PassportElementTypeAddress", is_trait = false },
  { name = "PassportElementTypeUtilityBill", is_trait = false },
  { name = "PassportElementTypeBankStatement", is_trait = false },
  { name = "PassportElementTypeRentalAgreement", is_trait = false },
  { name = "PassportElementTypePassportRegistration", is_trait = false },
  { name = "PassportElementTypeTemporaryRegistration", is_trait = false },
  { name = "PassportElementTypePhoneNumber", is_trait = false },
  { name = "PassportElementTypeEmailAddress", is_trait = false },
  { name = "PassportElements", is_trait = false },
  { name = "PassportElementsWithErrors", is_trait = false },
  { name = "PassportRequiredElement", is_trait = false },
  { name = "PassportSuitableElement", is_trait = false },
  { name = "PasswordState", is_trait = false },
  { name = "PaymentForm", is_trait = false },
  { name = "PaymentReceipt", is_trait = false },
  { name = "PaymentResult", is_trait = false },
  { name = "PaymentsProviderStripe", is_trait = false },
  { name = "PersonalDetails", is_trait = false },
  { name = "PersonalDocument", is_trait = false },
  { name = "Photo", is_trait = false },
  { name = "PhotoSize", is_trait = false },
  { name = "Poll", is_trait = false },
  { name = "PollOption", is_trait = false },
  { name = "ProfilePhoto", is_trait = false },
  { name = "Proxies", is_trait = false },
  { name = "Proxy", is_trait = false },
  { name = "ProxyType", is_trait = true },
  { name = "ProxyTypeSocks5", is_trait = false },
  { name = "ProxyTypeHttp", is_trait = false },
  { name = "ProxyTypeMtproto", is_trait = false },
  { name = "PublicMessageLink", is_trait = false },
  { name = "PushMessageContent", is_trait = true },
  { name = "PushMessageContentHidden", is_trait = false },
  { name = "PushMessageContentAnimation", is_trait = false },
  { name = "PushMessageContentAudio", is_trait = false },
  { name = "PushMessageContentContact", is_trait = false },
  { name = "PushMessageContentContactRegistered", is_trait = false },
  { name = "PushMessageContentDocument", is_trait = false },
  { name = "PushMessageContentGame", is_trait = false },
  { name = "PushMessageContentGameScore", is_trait = false },
  { name = "PushMessageContentInvoice", is_trait = false },
  { name = "PushMessageContentLocation", is_trait = false },
  { name = "PushMessageContentPhoto", is_trait = false },
  { name = "PushMessageContentPoll", is_trait = false },
  { name = "PushMessageContentScreenshotTaken", is_trait = false },
  { name = "PushMessageContentSticker", is_trait = false },
  { name = "PushMessageContentText", is_trait = false },
  { name = "PushMessageContentVideo", is_trait = false },
  { name = "PushMessageContentVideoNote", is_trait = false },
  { name = "PushMessageContentVoiceNote", is_trait = false },
  { name = "PushMessageContentBasicGroupChatCreate", is_trait = false },
  { name = "PushMessageContentChatAddMembers", is_trait = false },
  { name = "PushMessageContentChatChangePhoto", is_trait = false },
  { name = "PushMessageContentChatChangeTitle", is_trait = false },
  { name = "PushMessageContentChatDeleteMember", is_trait = false },
  { name = "PushMessageContentChatJoinByLink", is_trait = false },
  { name = "PushMessageContentMessageForwards", is_trait = false },
  { name = "PushMessageContentMediaAlbum", is_trait = false },
  { name = "PushReceiverId", is_trait = false },
  { name = "RecoveryEmailAddress", is_trait = false },
  { name = "RemoteFile", is_trait = false },
  { name = "ReplyMarkup", is_trait = true },
  { name = "ReplyMarkupRemoveKeyboard", is_trait = false },
  { name = "ReplyMarkupForceReply", is_trait = false },
  { name = "ReplyMarkupShowKeyboard", is_trait = false },
  { name = "ReplyMarkupInlineKeyboard", is_trait = false },
  { name = "RichText", is_trait = true },
  { name = "RichTextPlain", is_trait = false },
  { name = "RichTextBold", is_trait = false },
  { name = "RichTextItalic", is_trait = false },
  { name = "RichTextUnderline", is_trait = false },
  { name = "RichTextStrikethrough", is_trait = false },
  { name = "RichTextFixed", is_trait = false },
  { name = "RichTextUrl", is_trait = false },
  { name = "RichTextEmailAddress", is_trait = false },
  { name = "RichTextSubscript", is_trait = false },
  { name = "RichTextSuperscript", is_trait = false },
  { name = "RichTextMarked", is_trait = false },
  { name = "RichTextPhoneNumber", is_trait = false },
  { name = "RichTextIcon", is_trait = false },
  { name = "RichTextAnchor", is_trait = false },
  { name = "RichTexts", is_trait = false },
  { name = "SavedCredentials", is_trait = false },
  { name = "ScopeNotificationSettings", is_trait = false },
  { name = "SearchMessagesFilter", is_trait = true },
  { name = "SearchMessagesFilterEmpty", is_trait = false },
  { name = "SearchMessagesFilterAnimation", is_trait = false },
  { name = "SearchMessagesFilterAudio", is_trait = false },
  { name = "SearchMessagesFilterDocument", is_trait = false },
  { name = "SearchMessagesFilterPhoto", is_trait = false },
  { name = "SearchMessagesFilterVideo", is_trait = false },
  { name = "SearchMessagesFilterVoiceNote", is_trait = false },
  { name = "SearchMessagesFilterPhotoAndVideo", is_trait = false },
  { name = "SearchMessagesFilterUrl", is_trait = false },
  { name = "SearchMessagesFilterChatPhoto", is_trait = false },
  { name = "SearchMessagesFilterCall", is_trait = false },
  { name = "SearchMessagesFilterMissedCall", is_trait = false },
  { name = "SearchMessagesFilterVideoNote", is_trait = false },
  { name = "SearchMessagesFilterVoiceAndVideoNote", is_trait = false },
  { name = "SearchMessagesFilterMention", is_trait = false },
  { name = "SearchMessagesFilterUnreadMention", is_trait = false },
  { name = "Seconds", is_trait = false },
  { name = "SecretChat", is_trait = false },
  { name = "SecretChatState", is_trait = true },
  { name = "SecretChatStatePending", is_trait = false },
  { name = "SecretChatStateReady", is_trait = false },
  { name = "SecretChatStateClosed", is_trait = false },
  { name = "Session", is_trait = false },
  { name = "Sessions", is_trait = false },
  { name = "ShippingOption", is_trait = false },
  { name = "Sticker", is_trait = false },
  { name = "StickerEmojis", is_trait = false },
  { name = "StickerSet", is_trait = false },
  { name = "StickerSetInfo", is_trait = false },
  { name = "StickerSets", is_trait = false },
  { name = "Stickers", is_trait = false },
  { name = "StorageStatistics", is_trait = false },
  { name = "StorageStatisticsByChat", is_trait = false },
  { name = "StorageStatisticsByFileType", is_trait = false },
  { name = "StorageStatisticsFast", is_trait = false },
  { name = "Supergroup", is_trait = false },
  { name = "SupergroupFullInfo", is_trait = false },
  { name = "SupergroupMembersFilter", is_trait = true },
  { name = "SupergroupMembersFilterRecent", is_trait = false },
  { name = "SupergroupMembersFilterAdministrators", is_trait = false },
  { name = "SupergroupMembersFilterSearch", is_trait = false },
  { name = "SupergroupMembersFilterRestricted", is_trait = false },
  { name = "SupergroupMembersFilterBanned", is_trait = false },
  { name = "SupergroupMembersFilterBots", is_trait = false },
  { name = "TMeUrl", is_trait = false },
  { name = "TMeUrlType", is_trait = true },
  { name = "TMeUrlTypeUser", is_trait = false },
  { name = "TMeUrlTypeSupergroup", is_trait = false },
  { name = "TMeUrlTypeChatInvite", is_trait = false },
  { name = "TMeUrlTypeStickerSet", is_trait = false },
  { name = "TMeUrls", is_trait = false },
  { name = "TdlibParameters", is_trait = false },
  { name = "TemporaryPasswordState", is_trait = false },
  { name = "TermsOfService", is_trait = false },
  { name = "TestBytes", is_trait = false },
  { name = "TestInt", is_trait = false },
  { name = "TestString", is_trait = false },
  { name = "TestVectorInt", is_trait = false },
  { name = "TestVectorIntObject", is_trait = false },
  { name = "TestVectorString", is_trait = false },
  { name = "TestVectorStringObject", is_trait = false },
  { name = "Text", is_trait = false },
  { name = "TextEntities", is_trait = false },
  { name = "TextEntity", is_trait = false },
  { name = "TextEntityType", is_trait = true },
  { name = "TextEntityTypeMention", is_trait = false },
  { name = "TextEntityTypeHashtag", is_trait = false },
  { name = "TextEntityTypeCashtag", is_trait = false },
  { name = "TextEntityTypeBotCommand", is_trait = false },
  { name = "TextEntityTypeUrl", is_trait = false },
  { name = "TextEntityTypeEmailAddress", is_trait = false },
  { name = "TextEntityTypeBold", is_trait = false },
  { name = "TextEntityTypeItalic", is_trait = false },
  { name = "TextEntityTypeCode", is_trait = false },
  { name = "TextEntityTypePre", is_trait = false },
  { name = "TextEntityTypePreCode", is_trait = false },
  { name = "TextEntityTypeTextUrl", is_trait = false },
  { name = "TextEntityTypeMentionName", is_trait = false },
  { name = "TextEntityTypePhoneNumber", is_trait = false },
  { name = "TextParseMode", is_trait = true },
  { name = "TextParseModeMarkdown", is_trait = false },
  { name = "TextParseModeHTML", is_trait = false },
  { name = "TopChatCategory", is_trait = true },
  { name = "TopChatCategoryUsers", is_trait = false },
  { name = "TopChatCategoryBots", is_trait = false },
  { name = "TopChatCategoryGroups", is_trait = false },
  { name = "TopChatCategoryChannels", is_trait = false },
  { name = "TopChatCategoryInlineBots", is_trait = false },
  { name = "TopChatCategoryCalls", is_trait = false },
  { name = "Update", is_trait = true },
  { name = "UpdateAuthorizationState", is_trait = false },
  { name = "UpdateNewMessage", is_trait = false },
  { name = "UpdateMessageSendAcknowledged", is_trait = false },
  { name = "UpdateMessageSendSucceeded", is_trait = false },
  { name = "UpdateMessageSendFailed", is_trait = false },
  { name = "UpdateMessageContent", is_trait = false },
  { name = "UpdateMessageEdited", is_trait = false },
  { name = "UpdateMessageViews", is_trait = false },
  { name = "UpdateMessageContentOpened", is_trait = false },
  { name = "UpdateMessageMentionRead", is_trait = false },
  { name = "UpdateNewChat", is_trait = false },
  { name = "UpdateChatTitle", is_trait = false },
  { name = "UpdateChatPhoto", is_trait = false },
  { name = "UpdateChatLastMessage", is_trait = false },
  { name = "UpdateChatOrder", is_trait = false },
  { name = "UpdateChatIsPinned", is_trait = false },
  { name = "UpdateChatIsMarkedAsUnread", is_trait = false },
  { name = "UpdateChatIsSponsored", is_trait = false },
  { name = "UpdateChatDefaultDisableNotification", is_trait = false },
  { name = "UpdateChatReadInbox", is_trait = false },
  { name = "UpdateChatReadOutbox", is_trait = false },
  { name = "UpdateChatUnreadMentionCount", is_trait = false },
  { name = "UpdateChatNotificationSettings", is_trait = false },
  { name = "UpdateScopeNotificationSettings", is_trait = false },
  { name = "UpdateChatPinnedMessage", is_trait = false },
  { name = "UpdateChatReplyMarkup", is_trait = false },
  { name = "UpdateChatDraftMessage", is_trait = false },
  { name = "UpdateChatOnlineMemberCount", is_trait = false },
  { name = "UpdateNotification", is_trait = false },
  { name = "UpdateNotificationGroup", is_trait = false },
  { name = "UpdateActiveNotifications", is_trait = false },
  { name = "UpdateHavePendingNotifications", is_trait = false },
  { name = "UpdateDeleteMessages", is_trait = false },
  { name = "UpdateUserChatAction", is_trait = false },
  { name = "UpdateUserStatus", is_trait = false },
  { name = "UpdateUser", is_trait = false },
  { name = "UpdateBasicGroup", is_trait = false },
  { name = "UpdateSupergroup", is_trait = false },
  { name = "UpdateSecretChat", is_trait = false },
  { name = "UpdateUserFullInfo", is_trait = false },
  { name = "UpdateBasicGroupFullInfo", is_trait = false },
  { name = "UpdateSupergroupFullInfo", is_trait = false },
  { name = "UpdateServiceNotification", is_trait = false },
  { name = "UpdateFile", is_trait = false },
  { name = "UpdateFileGenerationStart", is_trait = false },
  { name = "UpdateFileGenerationStop", is_trait = false },
  { name = "UpdateCall", is_trait = false },
  { name = "UpdateUserPrivacySettingRules", is_trait = false },
  { name = "UpdateUnreadMessageCount", is_trait = false },
  { name = "UpdateUnreadChatCount", is_trait = false },
  { name = "UpdateOption", is_trait = false },
  { name = "UpdateInstalledStickerSets", is_trait = false },
  { name = "UpdateTrendingStickerSets", is_trait = false },
  { name = "UpdateRecentStickers", is_trait = false },
  { name = "UpdateFavoriteStickers", is_trait = false },
  { name = "UpdateSavedAnimations", is_trait = false },
  { name = "UpdateLanguagePackStrings", is_trait = false },
  { name = "UpdateConnectionState", is_trait = false },
  { name = "UpdateTermsOfService", is_trait = false },
  { name = "UpdateNewInlineQuery", is_trait = false },
  { name = "UpdateNewChosenInlineResult", is_trait = false },
  { name = "UpdateNewCallbackQuery", is_trait = false },
  { name = "UpdateNewInlineCallbackQuery", is_trait = false },
  { name = "UpdateNewShippingQuery", is_trait = false },
  { name = "UpdateNewPreCheckoutQuery", is_trait = false },
  { name = "UpdateNewCustomEvent", is_trait = false },
  { name = "UpdateNewCustomQuery", is_trait = false },
  { name = "UpdatePoll", is_trait = false },
  { name = "Updates", is_trait = false },
  { name = "User", is_trait = false },
  { name = "UserFullInfo", is_trait = false },
  { name = "UserPrivacySetting", is_trait = true },
  { name = "UserPrivacySettingShowStatus", is_trait = false },
  { name = "UserPrivacySettingAllowChatInvites", is_trait = false },
  { name = "UserPrivacySettingAllowCalls", is_trait = false },
  { name = "UserPrivacySettingAllowPeerToPeerCalls", is_trait = false },
  { name = "UserPrivacySettingRule", is_trait = true },
  { name = "UserPrivacySettingRuleAllowAll", is_trait = false },
  { name = "UserPrivacySettingRuleAllowContacts", is_trait = false },
  { name = "UserPrivacySettingRuleAllowUsers", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictAll", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictContacts", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictUsers", is_trait = false },
  { name = "UserPrivacySettingRules", is_trait = false },
  { name = "UserProfilePhoto", is_trait = false },
  { name = "UserProfilePhotos", is_trait = false },
  { name = "UserStatus", is_trait = true },
  { name = "UserStatusEmpty", is_trait = false },
  { name = "UserStatusOnline", is_trait = false },
  { name = "UserStatusOffline", is_trait = false },
  { name = "UserStatusRecently", is_trait = false },
  { name = "UserStatusLastWeek", is_trait = false },
  { name = "UserStatusLastMonth", is_trait = false },
  { name = "UserType", is_trait = true },
  { name = "UserTypeRegular", is_trait = false },
  { name = "UserTypeDeleted", is_trait = false },
  { name = "UserTypeBot", is_trait = false },
  { name = "UserTypeUnknown", is_trait = false },
  { name = "Users", is_trait = false },
  { name = "ValidatedOrderInfo", is_trait = false },
  { name = "Venue", is_trait = false },
  { name = "Video", is_trait = false },
  { name = "VideoNote", is_trait = false },
  { name = "VoiceNote", is_trait = false },
  { name = "Wallpaper", is_trait = false },
  { name = "Wallpapers", is_trait = false },
  { name = "WebPage", is_trait = false },
  { name = "WebPageInstantView", is_trait = false },
  { name = "AcceptCall", is_trait = false },
  { name = "AcceptTermsOfService", is_trait = false },
  { name = "AddChatMember", is_trait = false },
  { name = "AddChatMembers", is_trait = false },
  { name = "AddCustomServerLanguagePack", is_trait = false },
  { name = "AddFavoriteSticker", is_trait = false },
  { name = "AddLocalMessage", is_trait = false },
  { name = "AddLogMessage", is_trait = false },
  { name = "AddNetworkStatistics", is_trait = false },
  { name = "AddProxy", is_trait = false },
  { name = "AddRecentSticker", is_trait = false },
  { name = "AddRecentlyFoundChat", is_trait = false },
  { name = "AddSavedAnimation", is_trait = false },
  { name = "AddStickerToSet", is_trait = false },
  { name = "AnswerCallbackQuery", is_trait = false },
  { name = "AnswerCustomQuery", is_trait = false },
  { name = "AnswerInlineQuery", is_trait = false },
  { name = "AnswerPreCheckoutQuery", is_trait = false },
  { name = "AnswerShippingQuery", is_trait = false },
  { name = "BlockUser", is_trait = false },
  { name = "CancelDownloadFile", is_trait = false },
  { name = "CancelUploadFile", is_trait = false },
  { name = "ChangeChatReportSpamState", is_trait = false },
  { name = "ChangeImportedContacts", is_trait = false },
  { name = "ChangePhoneNumber", is_trait = false },
  { name = "ChangeStickerSet", is_trait = false },
  { name = "CheckAuthenticationBotToken", is_trait = false },
  { name = "CheckAuthenticationCode", is_trait = false },
  { name = "CheckAuthenticationPassword", is_trait = false },
  { name = "CheckChangePhoneNumberCode", is_trait = false },
  { name = "CheckChatInviteLink", is_trait = false },
  { name = "CheckChatUsername", is_trait = false },
  { name = "CheckDatabaseEncryptionKey", is_trait = false },
  { name = "CheckEmailAddressVerificationCode", is_trait = false },
  { name = "CheckPhoneNumberConfirmationCode", is_trait = false },
  { name = "CheckPhoneNumberVerificationCode", is_trait = false },
  { name = "CheckRecoveryEmailAddressCode", is_trait = false },
  { name = "CleanFileName", is_trait = false },
  { name = "ClearAllDraftMessages", is_trait = false },
  { name = "ClearImportedContacts", is_trait = false },
  { name = "ClearRecentStickers", is_trait = false },
  { name = "ClearRecentlyFoundChats", is_trait = false },
  { name = "Close", is_trait = false },
  { name = "CloseChat", is_trait = false },
  { name = "CloseSecretChat", is_trait = false },
  { name = "CreateBasicGroupChat", is_trait = false },
  { name = "CreateCall", is_trait = false },
  { name = "CreateNewBasicGroupChat", is_trait = false },
  { name = "CreateNewSecretChat", is_trait = false },
  { name = "CreateNewStickerSet", is_trait = false },
  { name = "CreateNewSupergroupChat", is_trait = false },
  { name = "CreatePrivateChat", is_trait = false },
  { name = "CreateSecretChat", is_trait = false },
  { name = "CreateSupergroupChat", is_trait = false },
  { name = "CreateTemporaryPassword", is_trait = false },
  { name = "DeleteAccount", is_trait = false },
  { name = "DeleteChatHistory", is_trait = false },
  { name = "DeleteChatMessagesFromUser", is_trait = false },
  { name = "DeleteChatReplyMarkup", is_trait = false },
  { name = "DeleteFile", is_trait = false },
  { name = "DeleteLanguagePack", is_trait = false },
  { name = "DeleteMessages", is_trait = false },
  { name = "DeletePassportElement", is_trait = false },
  { name = "DeleteProfilePhoto", is_trait = false },
  { name = "DeleteSavedCredentials", is_trait = false },
  { name = "DeleteSavedOrderInfo", is_trait = false },
  { name = "DeleteSupergroup", is_trait = false },
  { name = "Destroy", is_trait = false },
  { name = "DisableProxy", is_trait = false },
  { name = "DiscardCall", is_trait = false },
  { name = "DisconnectAllWebsites", is_trait = false },
  { name = "DisconnectWebsite", is_trait = false },
  { name = "DownloadFile", is_trait = false },
  { name = "EditCustomLanguagePackInfo", is_trait = false },
  { name = "EditInlineMessageCaption", is_trait = false },
  { name = "EditInlineMessageLiveLocation", is_trait = false },
  { name = "EditInlineMessageMedia", is_trait = false },
  { name = "EditInlineMessageReplyMarkup", is_trait = false },
  { name = "EditInlineMessageText", is_trait = false },
  { name = "EditMessageCaption", is_trait = false },
  { name = "EditMessageLiveLocation", is_trait = false },
  { name = "EditMessageMedia", is_trait = false },
  { name = "EditMessageReplyMarkup", is_trait = false },
  { name = "EditMessageText", is_trait = false },
  { name = "EditProxy", is_trait = false },
  { name = "EnableProxy", is_trait = false },
  { name = "FinishFileGeneration", is_trait = false },
  { name = "ForwardMessages", is_trait = false },
  { name = "GenerateChatInviteLink", is_trait = false },
  { name = "GetAccountTtl", is_trait = false },
  { name = "GetActiveLiveLocationMessages", is_trait = false },
  { name = "GetActiveSessions", is_trait = false },
  { name = "GetAllPassportElements", is_trait = false },
  { name = "GetApplicationConfig", is_trait = false },
  { name = "GetArchivedStickerSets", is_trait = false },
  { name = "GetAttachedStickerSets", is_trait = false },
  { name = "GetAuthorizationState", is_trait = false },
  { name = "GetBasicGroup", is_trait = false },
  { name = "GetBasicGroupFullInfo", is_trait = false },
  { name = "GetBlockedUsers", is_trait = false },
  { name = "GetCallbackQueryAnswer", is_trait = false },
  { name = "GetChat", is_trait = false },
  { name = "GetChatAdministrators", is_trait = false },
  { name = "GetChatEventLog", is_trait = false },
  { name = "GetChatHistory", is_trait = false },
  { name = "GetChatMember", is_trait = false },
  { name = "GetChatMessageByDate", is_trait = false },
  { name = "GetChatMessageCount", is_trait = false },
  { name = "GetChatNotificationSettingsExceptions", is_trait = false },
  { name = "GetChatPinnedMessage", is_trait = false },
  { name = "GetChatReportSpamState", is_trait = false },
  { name = "GetChatStatisticsUrl", is_trait = false },
  { name = "GetChats", is_trait = false },
  { name = "GetConnectedWebsites", is_trait = false },
  { name = "GetContacts", is_trait = false },
  { name = "GetCountryCode", is_trait = false },
  { name = "GetCreatedPublicChats", is_trait = false },
  { name = "GetCurrentState", is_trait = false },
  { name = "GetDatabaseStatistics", is_trait = false },
  { name = "GetDeepLinkInfo", is_trait = false },
  { name = "GetFavoriteStickers", is_trait = false },
  { name = "GetFile", is_trait = false },
  { name = "GetFileDownloadedPrefixSize", is_trait = false },
  { name = "GetFileExtension", is_trait = false },
  { name = "GetFileMimeType", is_trait = false },
  { name = "GetGameHighScores", is_trait = false },
  { name = "GetGroupsInCommon", is_trait = false },
  { name = "GetImportedContactCount", is_trait = false },
  { name = "GetInlineGameHighScores", is_trait = false },
  { name = "GetInlineQueryResults", is_trait = false },
  { name = "GetInstalledStickerSets", is_trait = false },
  { name = "GetInviteText", is_trait = false },
  { name = "GetLanguagePackInfo", is_trait = false },
  { name = "GetLanguagePackString", is_trait = false },
  { name = "GetLanguagePackStrings", is_trait = false },
  { name = "GetLocalizationTargetInfo", is_trait = false },
  { name = "GetLogStream", is_trait = false },
  { name = "GetLogTagVerbosityLevel", is_trait = false },
  { name = "GetLogTags", is_trait = false },
  { name = "GetLogVerbosityLevel", is_trait = false },
  { name = "GetMapThumbnailFile", is_trait = false },
  { name = "GetMe", is_trait = false },
  { name = "GetMessage", is_trait = false },
  { name = "GetMessageLink", is_trait = false },
  { name = "GetMessageLocally", is_trait = false },
  { name = "GetMessages", is_trait = false },
  { name = "GetNetworkStatistics", is_trait = false },
  { name = "GetOption", is_trait = false },
  { name = "GetPassportAuthorizationForm", is_trait = false },
  { name = "GetPassportAuthorizationFormAvailableElements", is_trait = false },
  { name = "GetPassportElement", is_trait = false },
  { name = "GetPasswordState", is_trait = false },
  { name = "GetPaymentForm", is_trait = false },
  { name = "GetPaymentReceipt", is_trait = false },
  { name = "GetPreferredCountryLanguage", is_trait = false },
  { name = "GetProxies", is_trait = false },
  { name = "GetProxyLink", is_trait = false },
  { name = "GetPublicMessageLink", is_trait = false },
  { name = "GetPushReceiverId", is_trait = false },
  { name = "GetRecentInlineBots", is_trait = false },
  { name = "GetRecentStickers", is_trait = false },
  { name = "GetRecentlyVisitedTMeUrls", is_trait = false },
  { name = "GetRecoveryEmailAddress", is_trait = false },
  { name = "GetRemoteFile", is_trait = false },
  { name = "GetRepliedMessage", is_trait = false },
  { name = "GetSavedAnimations", is_trait = false },
  { name = "GetSavedOrderInfo", is_trait = false },
  { name = "GetScopeNotificationSettings", is_trait = false },
  { name = "GetSecretChat", is_trait = false },
  { name = "GetStickerEmojis", is_trait = false },
  { name = "GetStickerSet", is_trait = false },
  { name = "GetStickers", is_trait = false },
  { name = "GetStorageStatistics", is_trait = false },
  { name = "GetStorageStatisticsFast", is_trait = false },
  { name = "GetSupergroup", is_trait = false },
  { name = "GetSupergroupFullInfo", is_trait = false },
  { name = "GetSupergroupMembers", is_trait = false },
  { name = "GetSupportUser", is_trait = false },
  { name = "GetTemporaryPasswordState", is_trait = false },
  { name = "GetTextEntities", is_trait = false },
  { name = "GetTopChats", is_trait = false },
  { name = "GetTrendingStickerSets", is_trait = false },
  { name = "GetUser", is_trait = false },
  { name = "GetUserFullInfo", is_trait = false },
  { name = "GetUserPrivacySettingRules", is_trait = false },
  { name = "GetUserProfilePhotos", is_trait = false },
  { name = "GetWallpapers", is_trait = false },
  { name = "GetWebPageInstantView", is_trait = false },
  { name = "GetWebPagePreview", is_trait = false },
  { name = "ImportContacts", is_trait = false },
  { name = "JoinChat", is_trait = false },
  { name = "JoinChatByInviteLink", is_trait = false },
  { name = "LeaveChat", is_trait = false },
  { name = "LogOut", is_trait = false },
  { name = "OpenChat", is_trait = false },
  { name = "OpenMessageContent", is_trait = false },
  { name = "OptimizeStorage", is_trait = false },
  { name = "ParseTextEntities", is_trait = false },
  { name = "PinChatMessage", is_trait = false },
  { name = "PingProxy", is_trait = false },
  { name = "ProcessPushNotification", is_trait = false },
  { name = "ReadAllChatMentions", is_trait = false },
  { name = "ReadFilePart", is_trait = false },
  { name = "RecoverAuthenticationPassword", is_trait = false },
  { name = "RecoverPassword", is_trait = false },
  { name = "RegisterDevice", is_trait = false },
  { name = "RemoveContacts", is_trait = false },
  { name = "RemoveFavoriteSticker", is_trait = false },
  { name = "RemoveNotification", is_trait = false },
  { name = "RemoveNotificationGroup", is_trait = false },
  { name = "RemoveProxy", is_trait = false },
  { name = "RemoveRecentHashtag", is_trait = false },
  { name = "RemoveRecentSticker", is_trait = false },
  { name = "RemoveRecentlyFoundChat", is_trait = false },
  { name = "RemoveSavedAnimation", is_trait = false },
  { name = "RemoveStickerFromSet", is_trait = false },
  { name = "RemoveTopChat", is_trait = false },
  { name = "ReorderInstalledStickerSets", is_trait = false },
  { name = "ReportChat", is_trait = false },
  { name = "ReportSupergroupSpam", is_trait = false },
  { name = "RequestAuthenticationPasswordRecovery", is_trait = false },
  { name = "RequestPasswordRecovery", is_trait = false },
  { name = "ResendAuthenticationCode", is_trait = false },
  { name = "ResendChangePhoneNumberCode", is_trait = false },
  { name = "ResendEmailAddressVerificationCode", is_trait = false },
  { name = "ResendPhoneNumberConfirmationCode", is_trait = false },
  { name = "ResendPhoneNumberVerificationCode", is_trait = false },
  { name = "ResendRecoveryEmailAddressCode", is_trait = false },
  { name = "ResetAllNotificationSettings", is_trait = false },
  { name = "ResetNetworkStatistics", is_trait = false },
  { name = "SearchCallMessages", is_trait = false },
  { name = "SearchChatMembers", is_trait = false },
  { name = "SearchChatMessages", is_trait = false },
  { name = "SearchChatRecentLocationMessages", is_trait = false },
  { name = "SearchChats", is_trait = false },
  { name = "SearchChatsOnServer", is_trait = false },
  { name = "SearchContacts", is_trait = false },
  { name = "SearchHashtags", is_trait = false },
  { name = "SearchInstalledStickerSets", is_trait = false },
  { name = "SearchMessages", is_trait = false },
  { name = "SearchPublicChat", is_trait = false },
  { name = "SearchPublicChats", is_trait = false },
  { name = "SearchSecretMessages", is_trait = false },
  { name = "SearchStickerSet", is_trait = false },
  { name = "SearchStickerSets", is_trait = false },
  { name = "SearchStickers", is_trait = false },
  { name = "SendBotStartMessage", is_trait = false },
  { name = "SendCallDebugInformation", is_trait = false },
  { name = "SendCallRating", is_trait = false },
  { name = "SendChatAction", is_trait = false },
  { name = "SendChatScreenshotTakenNotification", is_trait = false },
  { name = "SendChatSetTtlMessage", is_trait = false },
  { name = "SendCustomRequest", is_trait = false },
  { name = "SendEmailAddressVerificationCode", is_trait = false },
  { name = "SendInlineQueryResultMessage", is_trait = false },
  { name = "SendMessage", is_trait = false },
  { name = "SendMessageAlbum", is_trait = false },
  { name = "SendPassportAuthorizationForm", is_trait = false },
  { name = "SendPaymentForm", is_trait = false },
  { name = "SendPhoneNumberConfirmationCode", is_trait = false },
  { name = "SendPhoneNumberVerificationCode", is_trait = false },
  { name = "SetAccountTtl", is_trait = false },
  { name = "SetAlarm", is_trait = false },
  { name = "SetAuthenticationPhoneNumber", is_trait = false },
  { name = "SetBio", is_trait = false },
  { name = "SetBotUpdatesStatus", is_trait = false },
  { name = "SetChatClientData", is_trait = false },
  { name = "SetChatDraftMessage", is_trait = false },
  { name = "SetChatMemberStatus", is_trait = false },
  { name = "SetChatNotificationSettings", is_trait = false },
  { name = "SetChatPhoto", is_trait = false },
  { name = "SetChatTitle", is_trait = false },
  { name = "SetCustomLanguagePack", is_trait = false },
  { name = "SetCustomLanguagePackString", is_trait = false },
  { name = "SetDatabaseEncryptionKey", is_trait = false },
  { name = "SetFileGenerationProgress", is_trait = false },
  { name = "SetGameScore", is_trait = false },
  { name = "SetInlineGameScore", is_trait = false },
  { name = "SetLogStream", is_trait = false },
  { name = "SetLogTagVerbosityLevel", is_trait = false },
  { name = "SetLogVerbosityLevel", is_trait = false },
  { name = "SetName", is_trait = false },
  { name = "SetNetworkType", is_trait = false },
  { name = "SetOption", is_trait = false },
  { name = "SetPassportElement", is_trait = false },
  { name = "SetPassportElementErrors", is_trait = false },
  { name = "SetPassword", is_trait = false },
  { name = "SetPinnedChats", is_trait = false },
  { name = "SetPollAnswer", is_trait = false },
  { name = "SetProfilePhoto", is_trait = false },
  { name = "SetRecoveryEmailAddress", is_trait = false },
  { name = "SetScopeNotificationSettings", is_trait = false },
  { name = "SetStickerPositionInSet", is_trait = false },
  { name = "SetSupergroupDescription", is_trait = false },
  { name = "SetSupergroupStickerSet", is_trait = false },
  { name = "SetSupergroupUsername", is_trait = false },
  { name = "SetTdlibParameters", is_trait = false },
  { name = "SetUserPrivacySettingRules", is_trait = false },
  { name = "SetUsername", is_trait = false },
  { name = "StopPoll", is_trait = false },
  { name = "SynchronizeLanguagePack", is_trait = false },
  { name = "TerminateAllOtherSessions", is_trait = false },
  { name = "TerminateSession", is_trait = false },
  { name = "TestCallBytes", is_trait = false },
  { name = "TestCallEmpty", is_trait = false },
  { name = "TestCallString", is_trait = false },
  { name = "TestCallVectorInt", is_trait = false },
  { name = "TestCallVectorIntObject", is_trait = false },
  { name = "TestCallVectorString", is_trait = false },
  { name = "TestCallVectorStringObject", is_trait = false },
  { name = "TestGetDifference", is_trait = false },
  { name = "TestNetwork", is_trait = false },
  { name = "TestSquareInt", is_trait = false },
  { name = "TestUseError", is_trait = false },
  { name = "TestUseUpdate", is_trait = false },
  { name = "ToggleBasicGroupAdministrators", is_trait = false },
  { name = "ToggleChatDefaultDisableNotification", is_trait = false },
  { name = "ToggleChatIsMarkedAsUnread", is_trait = false },
  { name = "ToggleChatIsPinned", is_trait = false },
  { name = "ToggleSupergroupInvites", is_trait = false },
  { name = "ToggleSupergroupIsAllHistoryAvailable", is_trait = false },
  { name = "ToggleSupergroupSignMessages", is_trait = false },
  { name = "UnblockUser", is_trait = false },
  { name = "UnpinChatMessage", is_trait = false },
  { name = "UpgradeBasicGroupChatToSupergroupChat", is_trait = false },
  { name = "UploadFile", is_trait = false },
  { name = "UploadStickerFile", is_trait = false },
  { name = "ValidateOrderInfo", is_trait = false },
  { name = "ViewMessages", is_trait = false },
  { name = "ViewTrendingStickerSets", is_trait = false },
  { name = "WriteGeneratedFilePart", is_trait = false },
  
]
fields = []
fields_size = 0
has_trait_field = false
set_trait_typetag = false
dna = "trait"


[[rtd.RObject.trait_fns]]
doc_hidden = true
name = "td_name"
ret = "&'static str"

[[rtd.RObject.trait_fns]]
doc_hidden = false
name = "td_type"
ret = "RTDType"
description = "convert TDLib type to rust enum RTDType"

[[rtd.RObject.trait_fns]]
doc_hidden = false
name = "to_json"
ret = "RTDType"
description = """
The string that implements the return of to_json should be called `tdkit::fill_json_struct` for optimization,
appending the `@struct` field, although usually struct will actively generate `@struct`, but not in `Object` and `Function`,
because the implementation of typetag cannot be automatically generated.
"""


[rtd.TlObject]
origin_name = "TlObject"
clz_name = "TlObject"
is_private = true
clz_is_trait = true
clz_description = """
This class is a base class for all TDLib TL-objects.
This parent class is not important and will not be implemented for every class.
"""
dna = "trait"


[rtd.RTDType]
clz_name = "RTDType"
is_private = false
clz_is_trait = false
clz_description = """ TDLib all class name mappers """
has_subclasses = false
sub_classes = []
fields = [
  { doc_hidden = false, name = "Object" },
  { doc_hidden = false, name = "Function" },
  { doc_hidden = false, name = "AccountTtl" },
  { doc_hidden = false, name = "Address" },
  { doc_hidden = false, name = "Animation" },
  { doc_hidden = false, name = "Animations" },
  { doc_hidden = false, name = "Audio" },
  { doc_hidden = false, name = "AuthenticationCodeInfo" },
  { doc_hidden = false, name = "AuthenticationCodeType" },
  { doc_hidden = false, name = "AuthenticationCodeTypeTelegramMessage" },
  { doc_hidden = false, name = "AuthenticationCodeTypeSms" },
  { doc_hidden = false, name = "AuthenticationCodeTypeCall" },
  { doc_hidden = false, name = "AuthenticationCodeTypeFlashCall" },
  { doc_hidden = false, name = "AuthorizationState" },
  { doc_hidden = false, name = "AuthorizationStateWaitTdlibParameters" },
  { doc_hidden = false, name = "AuthorizationStateWaitEncryptionKey" },
  { doc_hidden = false, name = "AuthorizationStateWaitPhoneNumber" },
  { doc_hidden = false, name = "AuthorizationStateWaitCode" },
  { doc_hidden = false, name = "AuthorizationStateWaitPassword" },
  { doc_hidden = false, name = "AuthorizationStateReady" },
  { doc_hidden = false, name = "AuthorizationStateLoggingOut" },
  { doc_hidden = false, name = "AuthorizationStateClosing" },
  { doc_hidden = false, name = "AuthorizationStateClosed" },
  { doc_hidden = false, name = "BasicGroup" },
  { doc_hidden = false, name = "BasicGroupFullInfo" },
  { doc_hidden = false, name = "BotCommand" },
  { doc_hidden = false, name = "BotInfo" },
  { doc_hidden = false, name = "Call" },
  { doc_hidden = false, name = "CallConnection" },
  { doc_hidden = false, name = "CallDiscardReason" },
  { doc_hidden = false, name = "CallDiscardReasonEmpty" },
  { doc_hidden = false, name = "CallDiscardReasonMissed" },
  { doc_hidden = false, name = "CallDiscardReasonDeclined" },
  { doc_hidden = false, name = "CallDiscardReasonDisconnected" },
  { doc_hidden = false, name = "CallDiscardReasonHungUp" },
  { doc_hidden = false, name = "CallId" },
  { doc_hidden = false, name = "CallProtocol" },
  { doc_hidden = false, name = "CallState" },
  { doc_hidden = false, name = "CallStatePending" },
  { doc_hidden = false, name = "CallStateExchangingKeys" },
  { doc_hidden = false, name = "CallStateReady" },
  { doc_hidden = false, name = "CallStateHangingUp" },
  { doc_hidden = false, name = "CallStateDiscarded" },
  { doc_hidden = false, name = "CallStateError" },
  { doc_hidden = false, name = "CallbackQueryAnswer" },
  { doc_hidden = false, name = "CallbackQueryPayload" },
  { doc_hidden = false, name = "CallbackQueryPayloadData" },
  { doc_hidden = false, name = "CallbackQueryPayloadGame" },
  { doc_hidden = false, name = "Chat" },
  { doc_hidden = false, name = "ChatAction" },
  { doc_hidden = false, name = "ChatActionTyping" },
  { doc_hidden = false, name = "ChatActionRecordingVideo" },
  { doc_hidden = false, name = "ChatActionUploadingVideo" },
  { doc_hidden = false, name = "ChatActionRecordingVoiceNote" },
  { doc_hidden = false, name = "ChatActionUploadingVoiceNote" },
  { doc_hidden = false, name = "ChatActionUploadingPhoto" },
  { doc_hidden = false, name = "ChatActionUploadingDocument" },
  { doc_hidden = false, name = "ChatActionChoosingLocation" },
  { doc_hidden = false, name = "ChatActionChoosingContact" },
  { doc_hidden = false, name = "ChatActionStartPlayingGame" },
  { doc_hidden = false, name = "ChatActionRecordingVideoNote" },
  { doc_hidden = false, name = "ChatActionUploadingVideoNote" },
  { doc_hidden = false, name = "ChatActionCancel" },
  { doc_hidden = false, name = "ChatEvent" },
  { doc_hidden = false, name = "ChatEventAction" },
  { doc_hidden = false, name = "ChatEventMessageEdited" },
  { doc_hidden = false, name = "ChatEventMessageDeleted" },
  { doc_hidden = false, name = "ChatEventMessagePinned" },
  { doc_hidden = false, name = "ChatEventMessageUnpinned" },
  { doc_hidden = false, name = "ChatEventMemberJoined" },
  { doc_hidden = false, name = "ChatEventMemberLeft" },
  { doc_hidden = false, name = "ChatEventMemberInvited" },
  { doc_hidden = false, name = "ChatEventMemberPromoted" },
  { doc_hidden = false, name = "ChatEventMemberRestricted" },
  { doc_hidden = false, name = "ChatEventTitleChanged" },
  { doc_hidden = false, name = "ChatEventDescriptionChanged" },
  { doc_hidden = false, name = "ChatEventUsernameChanged" },
  { doc_hidden = false, name = "ChatEventPhotoChanged" },
  { doc_hidden = false, name = "ChatEventInvitesToggled" },
  { doc_hidden = false, name = "ChatEventSignMessagesToggled" },
  { doc_hidden = false, name = "ChatEventStickerSetChanged" },
  { doc_hidden = false, name = "ChatEventIsAllHistoryAvailableToggled" },
  { doc_hidden = false, name = "ChatEventLogFilters" },
  { doc_hidden = false, name = "ChatEvents" },
  { doc_hidden = false, name = "ChatInviteLink" },
  { doc_hidden = false, name = "ChatInviteLinkInfo" },
  { doc_hidden = false, name = "ChatMember" },
  { doc_hidden = false, name = "ChatMemberStatus" },
  { doc_hidden = false, name = "ChatMemberStatusCreator" },
  { doc_hidden = false, name = "ChatMemberStatusAdministrator" },
  { doc_hidden = false, name = "ChatMemberStatusMember" },
  { doc_hidden = false, name = "ChatMemberStatusRestricted" },
  { doc_hidden = false, name = "ChatMemberStatusLeft" },
  { doc_hidden = false, name = "ChatMemberStatusBanned" },
  { doc_hidden = false, name = "ChatMembers" },
  { doc_hidden = false, name = "ChatMembersFilter" },
  { doc_hidden = false, name = "ChatMembersFilterAdministrators" },
  { doc_hidden = false, name = "ChatMembersFilterMembers" },
  { doc_hidden = false, name = "ChatMembersFilterRestricted" },
  { doc_hidden = false, name = "ChatMembersFilterBanned" },
  { doc_hidden = false, name = "ChatMembersFilterBots" },
  { doc_hidden = false, name = "ChatNotificationSettings" },
  { doc_hidden = false, name = "ChatPhoto" },
  { doc_hidden = false, name = "ChatReportReason" },
  { doc_hidden = false, name = "ChatReportReasonSpam" },
  { doc_hidden = false, name = "ChatReportReasonViolence" },
  { doc_hidden = false, name = "ChatReportReasonPornography" },
  { doc_hidden = false, name = "ChatReportReasonChildAbuse" },
  { doc_hidden = false, name = "ChatReportReasonCopyright" },
  { doc_hidden = false, name = "ChatReportReasonCustom" },
  { doc_hidden = false, name = "ChatReportSpamState" },
  { doc_hidden = false, name = "ChatType" },
  { doc_hidden = false, name = "ChatTypePrivate" },
  { doc_hidden = false, name = "ChatTypeBasicGroup" },
  { doc_hidden = false, name = "ChatTypeSupergroup" },
  { doc_hidden = false, name = "ChatTypeSecret" },
  { doc_hidden = false, name = "Chats" },
  { doc_hidden = false, name = "CheckChatUsernameResult" },
  { doc_hidden = false, name = "CheckChatUsernameResultOk" },
  { doc_hidden = false, name = "CheckChatUsernameResultUsernameInvalid" },
  { doc_hidden = false, name = "CheckChatUsernameResultUsernameOccupied" },
  { doc_hidden = false, name = "CheckChatUsernameResultPublicChatsTooMuch" },
  { doc_hidden = false, name = "CheckChatUsernameResultPublicGroupsUnavailable" },
  { doc_hidden = false, name = "ConnectedWebsite" },
  { doc_hidden = false, name = "ConnectedWebsites" },
  { doc_hidden = false, name = "ConnectionState" },
  { doc_hidden = false, name = "ConnectionStateWaitingForNetwork" },
  { doc_hidden = false, name = "ConnectionStateConnectingToProxy" },
  { doc_hidden = false, name = "ConnectionStateConnecting" },
  { doc_hidden = false, name = "ConnectionStateUpdating" },
  { doc_hidden = false, name = "ConnectionStateReady" },
  { doc_hidden = false, name = "Contact" },
  { doc_hidden = false, name = "Count" },
  { doc_hidden = false, name = "CustomRequestResult" },
  { doc_hidden = false, name = "DatabaseStatistics" },
  { doc_hidden = false, name = "Date" },
  { doc_hidden = false, name = "DatedFile" },
  { doc_hidden = false, name = "DeepLinkInfo" },
  { doc_hidden = false, name = "DeviceToken" },
  { doc_hidden = false, name = "DeviceTokenFirebaseCloudMessaging" },
  { doc_hidden = false, name = "DeviceTokenApplePush" },
  { doc_hidden = false, name = "DeviceTokenApplePushVoIP" },
  { doc_hidden = false, name = "DeviceTokenWindowsPush" },
  { doc_hidden = false, name = "DeviceTokenMicrosoftPush" },
  { doc_hidden = false, name = "DeviceTokenMicrosoftPushVoIP" },
  { doc_hidden = false, name = "DeviceTokenWebPush" },
  { doc_hidden = false, name = "DeviceTokenSimplePush" },
  { doc_hidden = false, name = "DeviceTokenUbuntuPush" },
  { doc_hidden = false, name = "DeviceTokenBlackBerryPush" },
  { doc_hidden = false, name = "DeviceTokenTizenPush" },
  { doc_hidden = false, name = "Document" },
  { doc_hidden = false, name = "DraftMessage" },
  { doc_hidden = false, name = "EmailAddressAuthenticationCodeInfo" },
  { doc_hidden = false, name = "EncryptedCredentials" },
  { doc_hidden = false, name = "EncryptedPassportElement" },
  { doc_hidden = false, name = "Error" },
  { doc_hidden = false, name = "File" },
  { doc_hidden = false, name = "FilePart" },
  { doc_hidden = false, name = "FileType" },
  { doc_hidden = false, name = "FileTypeNone" },
  { doc_hidden = false, name = "FileTypeAnimation" },
  { doc_hidden = false, name = "FileTypeAudio" },
  { doc_hidden = false, name = "FileTypeDocument" },
  { doc_hidden = false, name = "FileTypePhoto" },
  { doc_hidden = false, name = "FileTypeProfilePhoto" },
  { doc_hidden = false, name = "FileTypeSecret" },
  { doc_hidden = false, name = "FileTypeSecretThumbnail" },
  { doc_hidden = false, name = "FileTypeSecure" },
  { doc_hidden = false, name = "FileTypeSticker" },
  { doc_hidden = false, name = "FileTypeThumbnail" },
  { doc_hidden = false, name = "FileTypeUnknown" },
  { doc_hidden = false, name = "FileTypeVideo" },
  { doc_hidden = false, name = "FileTypeVideoNote" },
  { doc_hidden = false, name = "FileTypeVoiceNote" },
  { doc_hidden = false, name = "FileTypeWallpaper" },
  { doc_hidden = false, name = "FormattedText" },
  { doc_hidden = false, name = "FoundMessages" },
  { doc_hidden = false, name = "Game" },
  { doc_hidden = false, name = "GameHighScore" },
  { doc_hidden = false, name = "GameHighScores" },
  { doc_hidden = false, name = "Hashtags" },
  { doc_hidden = false, name = "HttpUrl" },
  { doc_hidden = false, name = "IdentityDocument" },
  { doc_hidden = false, name = "ImportedContacts" },
  { doc_hidden = false, name = "InlineKeyboardButton" },
  { doc_hidden = false, name = "InlineKeyboardButtonType" },
  { doc_hidden = false, name = "InlineKeyboardButtonTypeUrl" },
  { doc_hidden = false, name = "InlineKeyboardButtonTypeCallback" },
  { doc_hidden = false, name = "InlineKeyboardButtonTypeCallbackGame" },
  { doc_hidden = false, name = "InlineKeyboardButtonTypeSwitchInline" },
  { doc_hidden = false, name = "InlineKeyboardButtonTypeBuy" },
  { doc_hidden = false, name = "InlineQueryResult" },
  { doc_hidden = false, name = "InlineQueryResultArticle" },
  { doc_hidden = false, name = "InlineQueryResultContact" },
  { doc_hidden = false, name = "InlineQueryResultLocation" },
  { doc_hidden = false, name = "InlineQueryResultVenue" },
  { doc_hidden = false, name = "InlineQueryResultGame" },
  { doc_hidden = false, name = "InlineQueryResultAnimation" },
  { doc_hidden = false, name = "InlineQueryResultAudio" },
  { doc_hidden = false, name = "InlineQueryResultDocument" },
  { doc_hidden = false, name = "InlineQueryResultPhoto" },
  { doc_hidden = false, name = "InlineQueryResultSticker" },
  { doc_hidden = false, name = "InlineQueryResultVideo" },
  { doc_hidden = false, name = "InlineQueryResultVoiceNote" },
  { doc_hidden = false, name = "InlineQueryResults" },
  { doc_hidden = false, name = "InputCredentials" },
  { doc_hidden = false, name = "InputCredentialsSaved" },
  { doc_hidden = false, name = "InputCredentialsNew" },
  { doc_hidden = false, name = "InputCredentialsAndroidPay" },
  { doc_hidden = false, name = "InputCredentialsApplePay" },
  { doc_hidden = false, name = "InputFile" },
  { doc_hidden = false, name = "InputFileId" },
  { doc_hidden = false, name = "InputFileRemote" },
  { doc_hidden = false, name = "InputFileLocal" },
  { doc_hidden = false, name = "InputFileGenerated" },
  { doc_hidden = false, name = "InputIdentityDocument" },
  { doc_hidden = false, name = "InputInlineQueryResult" },
  { doc_hidden = false, name = "InputInlineQueryResultAnimatedGif" },
  { doc_hidden = false, name = "InputInlineQueryResultAnimatedMpeg4" },
  { doc_hidden = false, name = "InputInlineQueryResultArticle" },
  { doc_hidden = false, name = "InputInlineQueryResultAudio" },
  { doc_hidden = false, name = "InputInlineQueryResultContact" },
  { doc_hidden = false, name = "InputInlineQueryResultDocument" },
  { doc_hidden = false, name = "InputInlineQueryResultGame" },
  { doc_hidden = false, name = "InputInlineQueryResultLocation" },
  { doc_hidden = false, name = "InputInlineQueryResultPhoto" },
  { doc_hidden = false, name = "InputInlineQueryResultSticker" },
  { doc_hidden = false, name = "InputInlineQueryResultVenue" },
  { doc_hidden = false, name = "InputInlineQueryResultVideo" },
  { doc_hidden = false, name = "InputInlineQueryResultVoiceNote" },
  { doc_hidden = false, name = "InputMessageContent" },
  { doc_hidden = false, name = "InputMessageText" },
  { doc_hidden = false, name = "InputMessageAnimation" },
  { doc_hidden = false, name = "InputMessageAudio" },
  { doc_hidden = false, name = "InputMessageDocument" },
  { doc_hidden = false, name = "InputMessagePhoto" },
  { doc_hidden = false, name = "InputMessageSticker" },
  { doc_hidden = false, name = "InputMessageVideo" },
  { doc_hidden = false, name = "InputMessageVideoNote" },
  { doc_hidden = false, name = "InputMessageVoiceNote" },
  { doc_hidden = false, name = "InputMessageLocation" },
  { doc_hidden = false, name = "InputMessageVenue" },
  { doc_hidden = false, name = "InputMessageContact" },
  { doc_hidden = false, name = "InputMessageGame" },
  { doc_hidden = false, name = "InputMessageInvoice" },
  { doc_hidden = false, name = "InputMessagePoll" },
  { doc_hidden = false, name = "InputMessageForwarded" },
  { doc_hidden = false, name = "InputPassportElement" },
  { doc_hidden = false, name = "InputPassportElementPersonalDetails" },
  { doc_hidden = false, name = "InputPassportElementPassport" },
  { doc_hidden = false, name = "InputPassportElementDriverLicense" },
  { doc_hidden = false, name = "InputPassportElementIdentityCard" },
  { doc_hidden = false, name = "InputPassportElementInternalPassport" },
  { doc_hidden = false, name = "InputPassportElementAddress" },
  { doc_hidden = false, name = "InputPassportElementUtilityBill" },
  { doc_hidden = false, name = "InputPassportElementBankStatement" },
  { doc_hidden = false, name = "InputPassportElementRentalAgreement" },
  { doc_hidden = false, name = "InputPassportElementPassportRegistration" },
  { doc_hidden = false, name = "InputPassportElementTemporaryRegistration" },
  { doc_hidden = false, name = "InputPassportElementPhoneNumber" },
  { doc_hidden = false, name = "InputPassportElementEmailAddress" },
  { doc_hidden = false, name = "InputPassportElementError" },
  { doc_hidden = false, name = "InputPassportElementErrorSource" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceUnspecified" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceDataField" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceFrontSide" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceReverseSide" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceSelfie" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceTranslationFile" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceTranslationFiles" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceFile" },
  { doc_hidden = false, name = "InputPassportElementErrorSourceFiles" },
  { doc_hidden = false, name = "InputPersonalDocument" },
  { doc_hidden = false, name = "InputSticker" },
  { doc_hidden = false, name = "InputThumbnail" },
  { doc_hidden = false, name = "Invoice" },
  { doc_hidden = false, name = "KeyboardButton" },
  { doc_hidden = false, name = "KeyboardButtonType" },
  { doc_hidden = false, name = "KeyboardButtonTypeText" },
  { doc_hidden = false, name = "KeyboardButtonTypeRequestPhoneNumber" },
  { doc_hidden = false, name = "KeyboardButtonTypeRequestLocation" },
  { doc_hidden = false, name = "LabeledPricePart" },
  { doc_hidden = false, name = "LanguagePackInfo" },
  { doc_hidden = false, name = "LanguagePackString" },
  { doc_hidden = false, name = "LanguagePackStringValue" },
  { doc_hidden = false, name = "LanguagePackStringValueOrdinary" },
  { doc_hidden = false, name = "LanguagePackStringValuePluralized" },
  { doc_hidden = false, name = "LanguagePackStringValueDeleted" },
  { doc_hidden = false, name = "LanguagePackStrings" },
  { doc_hidden = false, name = "LinkState" },
  { doc_hidden = false, name = "LinkStateNone" },
  { doc_hidden = false, name = "LinkStateKnowsPhoneNumber" },
  { doc_hidden = false, name = "LinkStateIsContact" },
  { doc_hidden = false, name = "LocalFile" },
  { doc_hidden = false, name = "LocalizationTargetInfo" },
  { doc_hidden = false, name = "Location" },
  { doc_hidden = false, name = "LogStream" },
  { doc_hidden = false, name = "LogStreamDefault" },
  { doc_hidden = false, name = "LogStreamFile" },
  { doc_hidden = false, name = "LogStreamEmpty" },
  { doc_hidden = false, name = "LogTags" },
  { doc_hidden = false, name = "LogVerbosityLevel" },
  { doc_hidden = false, name = "MaskPoint" },
  { doc_hidden = false, name = "MaskPointForehead" },
  { doc_hidden = false, name = "MaskPointEyes" },
  { doc_hidden = false, name = "MaskPointMouth" },
  { doc_hidden = false, name = "MaskPointChin" },
  { doc_hidden = false, name = "MaskPosition" },
  { doc_hidden = false, name = "Message" },
  { doc_hidden = false, name = "MessageContent" },
  { doc_hidden = false, name = "MessageText" },
  { doc_hidden = false, name = "MessageAnimation" },
  { doc_hidden = false, name = "MessageAudio" },
  { doc_hidden = false, name = "MessageDocument" },
  { doc_hidden = false, name = "MessagePhoto" },
  { doc_hidden = false, name = "MessageExpiredPhoto" },
  { doc_hidden = false, name = "MessageSticker" },
  { doc_hidden = false, name = "MessageVideo" },
  { doc_hidden = false, name = "MessageExpiredVideo" },
  { doc_hidden = false, name = "MessageVideoNote" },
  { doc_hidden = false, name = "MessageVoiceNote" },
  { doc_hidden = false, name = "MessageLocation" },
  { doc_hidden = false, name = "MessageVenue" },
  { doc_hidden = false, name = "MessageContact" },
  { doc_hidden = false, name = "MessageGame" },
  { doc_hidden = false, name = "MessagePoll" },
  { doc_hidden = false, name = "MessageInvoice" },
  { doc_hidden = false, name = "MessageCall" },
  { doc_hidden = false, name = "MessageBasicGroupChatCreate" },
  { doc_hidden = false, name = "MessageSupergroupChatCreate" },
  { doc_hidden = false, name = "MessageChatChangeTitle" },
  { doc_hidden = false, name = "MessageChatChangePhoto" },
  { doc_hidden = false, name = "MessageChatDeletePhoto" },
  { doc_hidden = false, name = "MessageChatAddMembers" },
  { doc_hidden = false, name = "MessageChatJoinByLink" },
  { doc_hidden = false, name = "MessageChatDeleteMember" },
  { doc_hidden = false, name = "MessageChatUpgradeTo" },
  { doc_hidden = false, name = "MessageChatUpgradeFrom" },
  { doc_hidden = false, name = "MessagePinMessage" },
  { doc_hidden = false, name = "MessageScreenshotTaken" },
  { doc_hidden = false, name = "MessageChatSetTtl" },
  { doc_hidden = false, name = "MessageCustomServiceAction" },
  { doc_hidden = false, name = "MessageGameScore" },
  { doc_hidden = false, name = "MessagePaymentSuccessful" },
  { doc_hidden = false, name = "MessagePaymentSuccessfulBot" },
  { doc_hidden = false, name = "MessageContactRegistered" },
  { doc_hidden = false, name = "MessageWebsiteConnected" },
  { doc_hidden = false, name = "MessagePassportDataSent" },
  { doc_hidden = false, name = "MessagePassportDataReceived" },
  { doc_hidden = false, name = "MessageUnsupported" },
  { doc_hidden = false, name = "MessageForwardInfo" },
  { doc_hidden = false, name = "MessageForwardOrigin" },
  { doc_hidden = false, name = "MessageForwardOriginUser" },
  { doc_hidden = false, name = "MessageForwardOriginHiddenUser" },
  { doc_hidden = false, name = "MessageForwardOriginChannel" },
  { doc_hidden = false, name = "MessageSendingState" },
  { doc_hidden = false, name = "MessageSendingStatePending" },
  { doc_hidden = false, name = "MessageSendingStateFailed" },
  { doc_hidden = false, name = "Messages" },
  { doc_hidden = false, name = "NetworkStatistics" },
  { doc_hidden = false, name = "NetworkStatisticsEntry" },
  { doc_hidden = false, name = "NetworkStatisticsEntryFile" },
  { doc_hidden = false, name = "NetworkStatisticsEntryCall" },
  { doc_hidden = false, name = "NetworkType" },
  { doc_hidden = false, name = "NetworkTypeNone" },
  { doc_hidden = false, name = "NetworkTypeMobile" },
  { doc_hidden = false, name = "NetworkTypeMobileRoaming" },
  { doc_hidden = false, name = "NetworkTypeWiFi" },
  { doc_hidden = false, name = "NetworkTypeOther" },
  { doc_hidden = false, name = "Notification" },
  { doc_hidden = false, name = "NotificationGroup" },
  { doc_hidden = false, name = "NotificationGroupType" },
  { doc_hidden = false, name = "NotificationGroupTypeMessages" },
  { doc_hidden = false, name = "NotificationGroupTypeMentions" },
  { doc_hidden = false, name = "NotificationGroupTypeSecretChat" },
  { doc_hidden = false, name = "NotificationGroupTypeCalls" },
  { doc_hidden = false, name = "NotificationSettingsScope" },
  { doc_hidden = false, name = "NotificationSettingsScopePrivateChats" },
  { doc_hidden = false, name = "NotificationSettingsScopeGroupChats" },
  { doc_hidden = false, name = "NotificationSettingsScopeChannelChats" },
  { doc_hidden = false, name = "NotificationType" },
  { doc_hidden = false, name = "NotificationTypeNewMessage" },
  { doc_hidden = false, name = "NotificationTypeNewSecretChat" },
  { doc_hidden = false, name = "NotificationTypeNewCall" },
  { doc_hidden = false, name = "NotificationTypeNewPushMessage" },
  { doc_hidden = false, name = "Ok" },
  { doc_hidden = false, name = "OptionValue" },
  { doc_hidden = false, name = "OptionValueBoolean" },
  { doc_hidden = false, name = "OptionValueEmpty" },
  { doc_hidden = false, name = "OptionValueInteger" },
  { doc_hidden = false, name = "OptionValueString" },
  { doc_hidden = false, name = "OrderInfo" },
  { doc_hidden = false, name = "PageBlock" },
  { doc_hidden = false, name = "PageBlockTitle" },
  { doc_hidden = false, name = "PageBlockSubtitle" },
  { doc_hidden = false, name = "PageBlockAuthorDate" },
  { doc_hidden = false, name = "PageBlockHeader" },
  { doc_hidden = false, name = "PageBlockSubheader" },
  { doc_hidden = false, name = "PageBlockKicker" },
  { doc_hidden = false, name = "PageBlockParagraph" },
  { doc_hidden = false, name = "PageBlockPreformatted" },
  { doc_hidden = false, name = "PageBlockFooter" },
  { doc_hidden = false, name = "PageBlockDivider" },
  { doc_hidden = false, name = "PageBlockAnchor" },
  { doc_hidden = false, name = "PageBlockList" },
  { doc_hidden = false, name = "PageBlockBlockQuote" },
  { doc_hidden = false, name = "PageBlockPullQuote" },
  { doc_hidden = false, name = "PageBlockAnimation" },
  { doc_hidden = false, name = "PageBlockAudio" },
  { doc_hidden = false, name = "PageBlockPhoto" },
  { doc_hidden = false, name = "PageBlockVideo" },
  { doc_hidden = false, name = "PageBlockCover" },
  { doc_hidden = false, name = "PageBlockEmbedded" },
  { doc_hidden = false, name = "PageBlockEmbeddedPost" },
  { doc_hidden = false, name = "PageBlockCollage" },
  { doc_hidden = false, name = "PageBlockSlideshow" },
  { doc_hidden = false, name = "PageBlockChatLink" },
  { doc_hidden = false, name = "PageBlockTable" },
  { doc_hidden = false, name = "PageBlockDetails" },
  { doc_hidden = false, name = "PageBlockRelatedArticles" },
  { doc_hidden = false, name = "PageBlockMap" },
  { doc_hidden = false, name = "PageBlockCaption" },
  { doc_hidden = false, name = "PageBlockHorizontalAlignment" },
  { doc_hidden = false, name = "PageBlockHorizontalAlignmentLeft" },
  { doc_hidden = false, name = "PageBlockHorizontalAlignmentCenter" },
  { doc_hidden = false, name = "PageBlockHorizontalAlignmentRight" },
  { doc_hidden = false, name = "PageBlockListItem" },
  { doc_hidden = false, name = "PageBlockRelatedArticle" },
  { doc_hidden = false, name = "PageBlockTableCell" },
  { doc_hidden = false, name = "PageBlockVerticalAlignment" },
  { doc_hidden = false, name = "PageBlockVerticalAlignmentTop" },
  { doc_hidden = false, name = "PageBlockVerticalAlignmentMiddle" },
  { doc_hidden = false, name = "PageBlockVerticalAlignmentBottom" },
  { doc_hidden = false, name = "PassportAuthorizationForm" },
  { doc_hidden = false, name = "PassportElement" },
  { doc_hidden = false, name = "PassportElementPersonalDetails" },
  { doc_hidden = false, name = "PassportElementPassport" },
  { doc_hidden = false, name = "PassportElementDriverLicense" },
  { doc_hidden = false, name = "PassportElementIdentityCard" },
  { doc_hidden = false, name = "PassportElementInternalPassport" },
  { doc_hidden = false, name = "PassportElementAddress" },
  { doc_hidden = false, name = "PassportElementUtilityBill" },
  { doc_hidden = false, name = "PassportElementBankStatement" },
  { doc_hidden = false, name = "PassportElementRentalAgreement" },
  { doc_hidden = false, name = "PassportElementPassportRegistration" },
  { doc_hidden = false, name = "PassportElementTemporaryRegistration" },
  { doc_hidden = false, name = "PassportElementPhoneNumber" },
  { doc_hidden = false, name = "PassportElementEmailAddress" },
  { doc_hidden = false, name = "PassportElementError" },
  { doc_hidden = false, name = "PassportElementErrorSource" },
  { doc_hidden = false, name = "PassportElementErrorSourceUnspecified" },
  { doc_hidden = false, name = "PassportElementErrorSourceDataField" },
  { doc_hidden = false, name = "PassportElementErrorSourceFrontSide" },
  { doc_hidden = false, name = "PassportElementErrorSourceReverseSide" },
  { doc_hidden = false, name = "PassportElementErrorSourceSelfie" },
  { doc_hidden = false, name = "PassportElementErrorSourceTranslationFile" },
  { doc_hidden = false, name = "PassportElementErrorSourceTranslationFiles" },
  { doc_hidden = false, name = "PassportElementErrorSourceFile" },
  { doc_hidden = false, name = "PassportElementErrorSourceFiles" },
  { doc_hidden = false, name = "PassportElementType" },
  { doc_hidden = false, name = "PassportElementTypePersonalDetails" },
  { doc_hidden = false, name = "PassportElementTypePassport" },
  { doc_hidden = false, name = "PassportElementTypeDriverLicense" },
  { doc_hidden = false, name = "PassportElementTypeIdentityCard" },
  { doc_hidden = false, name = "PassportElementTypeInternalPassport" },
  { doc_hidden = false, name = "PassportElementTypeAddress" },
  { doc_hidden = false, name = "PassportElementTypeUtilityBill" },
  { doc_hidden = false, name = "PassportElementTypeBankStatement" },
  { doc_hidden = false, name = "PassportElementTypeRentalAgreement" },
  { doc_hidden = false, name = "PassportElementTypePassportRegistration" },
  { doc_hidden = false, name = "PassportElementTypeTemporaryRegistration" },
  { doc_hidden = false, name = "PassportElementTypePhoneNumber" },
  { doc_hidden = false, name = "PassportElementTypeEmailAddress" },
  { doc_hidden = false, name = "PassportElements" },
  { doc_hidden = false, name = "PassportElementsWithErrors" },
  { doc_hidden = false, name = "PassportRequiredElement" },
  { doc_hidden = false, name = "PassportSuitableElement" },
  { doc_hidden = false, name = "PasswordState" },
  { doc_hidden = false, name = "PaymentForm" },
  { doc_hidden = false, name = "PaymentReceipt" },
  { doc_hidden = false, name = "PaymentResult" },
  { doc_hidden = false, name = "PaymentsProviderStripe" },
  { doc_hidden = false, name = "PersonalDetails" },
  { doc_hidden = false, name = "PersonalDocument" },
  { doc_hidden = false, name = "Photo" },
  { doc_hidden = false, name = "PhotoSize" },
  { doc_hidden = false, name = "Poll" },
  { doc_hidden = false, name = "PollOption" },
  { doc_hidden = false, name = "ProfilePhoto" },
  { doc_hidden = false, name = "Proxies" },
  { doc_hidden = false, name = "Proxy" },
  { doc_hidden = false, name = "ProxyType" },
  { doc_hidden = false, name = "ProxyTypeSocks5" },
  { doc_hidden = false, name = "ProxyTypeHttp" },
  { doc_hidden = false, name = "ProxyTypeMtproto" },
  { doc_hidden = false, name = "PublicMessageLink" },
  { doc_hidden = false, name = "PushMessageContent" },
  { doc_hidden = false, name = "PushMessageContentHidden" },
  { doc_hidden = false, name = "PushMessageContentAnimation" },
  { doc_hidden = false, name = "PushMessageContentAudio" },
  { doc_hidden = false, name = "PushMessageContentContact" },
  { doc_hidden = false, name = "PushMessageContentContactRegistered" },
  { doc_hidden = false, name = "PushMessageContentDocument" },
  { doc_hidden = false, name = "PushMessageContentGame" },
  { doc_hidden = false, name = "PushMessageContentGameScore" },
  { doc_hidden = false, name = "PushMessageContentInvoice" },
  { doc_hidden = false, name = "PushMessageContentLocation" },
  { doc_hidden = false, name = "PushMessageContentPhoto" },
  { doc_hidden = false, name = "PushMessageContentPoll" },
  { doc_hidden = false, name = "PushMessageContentScreenshotTaken" },
  { doc_hidden = false, name = "PushMessageContentSticker" },
  { doc_hidden = false, name = "PushMessageContentText" },
  { doc_hidden = false, name = "PushMessageContentVideo" },
  { doc_hidden = false, name = "PushMessageContentVideoNote" },
  { doc_hidden = false, name = "PushMessageContentVoiceNote" },
  { doc_hidden = false, name = "PushMessageContentBasicGroupChatCreate" },
  { doc_hidden = false, name = "PushMessageContentChatAddMembers" },
  { doc_hidden = false, name = "PushMessageContentChatChangePhoto" },
  { doc_hidden = false, name = "PushMessageContentChatChangeTitle" },
  { doc_hidden = false, name = "PushMessageContentChatDeleteMember" },
  { doc_hidden = false, name = "PushMessageContentChatJoinByLink" },
  { doc_hidden = false, name = "PushMessageContentMessageForwards" },
  { doc_hidden = false, name = "PushMessageContentMediaAlbum" },
  { doc_hidden = false, name = "PushReceiverId" },
  { doc_hidden = false, name = "RecoveryEmailAddress" },
  { doc_hidden = false, name = "RemoteFile" },
  { doc_hidden = false, name = "ReplyMarkup" },
  { doc_hidden = false, name = "ReplyMarkupRemoveKeyboard" },
  { doc_hidden = false, name = "ReplyMarkupForceReply" },
  { doc_hidden = false, name = "ReplyMarkupShowKeyboard" },
  { doc_hidden = false, name = "ReplyMarkupInlineKeyboard" },
  { doc_hidden = false, name = "RichText" },
  { doc_hidden = false, name = "RichTextPlain" },
  { doc_hidden = false, name = "RichTextBold" },
  { doc_hidden = false, name = "RichTextItalic" },
  { doc_hidden = false, name = "RichTextUnderline" },
  { doc_hidden = false, name = "RichTextStrikethrough" },
  { doc_hidden = false, name = "RichTextFixed" },
  { doc_hidden = false, name = "RichTextUrl" },
  { doc_hidden = false, name = "RichTextEmailAddress" },
  { doc_hidden = false, name = "RichTextSubscript" },
  { doc_hidden = false, name = "RichTextSuperscript" },
  { doc_hidden = false, name = "RichTextMarked" },
  { doc_hidden = false, name = "RichTextPhoneNumber" },
  { doc_hidden = false, name = "RichTextIcon" },
  { doc_hidden = false, name = "RichTextAnchor" },
  { doc_hidden = false, name = "RichTexts" },
  { doc_hidden = false, name = "SavedCredentials" },
  { doc_hidden = false, name = "ScopeNotificationSettings" },
  { doc_hidden = false, name = "SearchMessagesFilter" },
  { doc_hidden = false, name = "SearchMessagesFilterEmpty" },
  { doc_hidden = false, name = "SearchMessagesFilterAnimation" },
  { doc_hidden = false, name = "SearchMessagesFilterAudio" },
  { doc_hidden = false, name = "SearchMessagesFilterDocument" },
  { doc_hidden = false, name = "SearchMessagesFilterPhoto" },
  { doc_hidden = false, name = "SearchMessagesFilterVideo" },
  { doc_hidden = false, name = "SearchMessagesFilterVoiceNote" },
  { doc_hidden = false, name = "SearchMessagesFilterPhotoAndVideo" },
  { doc_hidden = false, name = "SearchMessagesFilterUrl" },
  { doc_hidden = false, name = "SearchMessagesFilterChatPhoto" },
  { doc_hidden = false, name = "SearchMessagesFilterCall" },
  { doc_hidden = false, name = "SearchMessagesFilterMissedCall" },
  { doc_hidden = false, name = "SearchMessagesFilterVideoNote" },
  { doc_hidden = false, name = "SearchMessagesFilterVoiceAndVideoNote" },
  { doc_hidden = false, name = "SearchMessagesFilterMention" },
  { doc_hidden = false, name = "SearchMessagesFilterUnreadMention" },
  { doc_hidden = false, name = "Seconds" },
  { doc_hidden = false, name = "SecretChat" },
  { doc_hidden = false, name = "SecretChatState" },
  { doc_hidden = false, name = "SecretChatStatePending" },
  { doc_hidden = false, name = "SecretChatStateReady" },
  { doc_hidden = false, name = "SecretChatStateClosed" },
  { doc_hidden = false, name = "Session" },
  { doc_hidden = false, name = "Sessions" },
  { doc_hidden = false, name = "ShippingOption" },
  { doc_hidden = false, name = "Sticker" },
  { doc_hidden = false, name = "StickerEmojis" },
  { doc_hidden = false, name = "StickerSet" },
  { doc_hidden = false, name = "StickerSetInfo" },
  { doc_hidden = false, name = "StickerSets" },
  { doc_hidden = false, name = "Stickers" },
  { doc_hidden = false, name = "StorageStatistics" },
  { doc_hidden = false, name = "StorageStatisticsByChat" },
  { doc_hidden = false, name = "StorageStatisticsByFileType" },
  { doc_hidden = false, name = "StorageStatisticsFast" },
  { doc_hidden = false, name = "Supergroup" },
  { doc_hidden = false, name = "SupergroupFullInfo" },
  { doc_hidden = false, name = "SupergroupMembersFilter" },
  { doc_hidden = false, name = "SupergroupMembersFilterRecent" },
  { doc_hidden = false, name = "SupergroupMembersFilterAdministrators" },
  { doc_hidden = false, name = "SupergroupMembersFilterSearch" },
  { doc_hidden = false, name = "SupergroupMembersFilterRestricted" },
  { doc_hidden = false, name = "SupergroupMembersFilterBanned" },
  { doc_hidden = false, name = "SupergroupMembersFilterBots" },
  { doc_hidden = false, name = "TMeUrl" },
  { doc_hidden = false, name = "TMeUrlType" },
  { doc_hidden = false, name = "TMeUrlTypeUser" },
  { doc_hidden = false, name = "TMeUrlTypeSupergroup" },
  { doc_hidden = false, name = "TMeUrlTypeChatInvite" },
  { doc_hidden = false, name = "TMeUrlTypeStickerSet" },
  { doc_hidden = false, name = "TMeUrls" },
  { doc_hidden = false, name = "TdlibParameters" },
  { doc_hidden = false, name = "TemporaryPasswordState" },
  { doc_hidden = false, name = "TermsOfService" },
  { doc_hidden = false, name = "TestBytes" },
  { doc_hidden = false, name = "TestInt" },
  { doc_hidden = false, name = "TestString" },
  { doc_hidden = false, name = "TestVectorInt" },
  { doc_hidden = false, name = "TestVectorIntObject" },
  { doc_hidden = false, name = "TestVectorString" },
  { doc_hidden = false, name = "TestVectorStringObject" },
  { doc_hidden = false, name = "Text" },
  { doc_hidden = false, name = "TextEntities" },
  { doc_hidden = false, name = "TextEntity" },
  { doc_hidden = false, name = "TextEntityType" },
  { doc_hidden = false, name = "TextEntityTypeMention" },
  { doc_hidden = false, name = "TextEntityTypeHashtag" },
  { doc_hidden = false, name = "TextEntityTypeCashtag" },
  { doc_hidden = false, name = "TextEntityTypeBotCommand" },
  { doc_hidden = false, name = "TextEntityTypeUrl" },
  { doc_hidden = false, name = "TextEntityTypeEmailAddress" },
  { doc_hidden = false, name = "TextEntityTypeBold" },
  { doc_hidden = false, name = "TextEntityTypeItalic" },
  { doc_hidden = false, name = "TextEntityTypeCode" },
  { doc_hidden = false, name = "TextEntityTypePre" },
  { doc_hidden = false, name = "TextEntityTypePreCode" },
  { doc_hidden = false, name = "TextEntityTypeTextUrl" },
  { doc_hidden = false, name = "TextEntityTypeMentionName" },
  { doc_hidden = false, name = "TextEntityTypePhoneNumber" },
  { doc_hidden = false, name = "TextParseMode" },
  { doc_hidden = false, name = "TextParseModeMarkdown" },
  { doc_hidden = false, name = "TextParseModeHTML" },
  { doc_hidden = false, name = "TopChatCategory" },
  { doc_hidden = false, name = "TopChatCategoryUsers" },
  { doc_hidden = false, name = "TopChatCategoryBots" },
  { doc_hidden = false, name = "TopChatCategoryGroups" },
  { doc_hidden = false, name = "TopChatCategoryChannels" },
  { doc_hidden = false, name = "TopChatCategoryInlineBots" },
  { doc_hidden = false, name = "TopChatCategoryCalls" },
  { doc_hidden = false, name = "Update" },
  { doc_hidden = false, name = "UpdateAuthorizationState" },
  { doc_hidden = false, name = "UpdateNewMessage" },
  { doc_hidden = false, name = "UpdateMessageSendAcknowledged" },
  { doc_hidden = false, name = "UpdateMessageSendSucceeded" },
  { doc_hidden = false, name = "UpdateMessageSendFailed" },
  { doc_hidden = false, name = "UpdateMessageContent" },
  { doc_hidden = false, name = "UpdateMessageEdited" },
  { doc_hidden = false, name = "UpdateMessageViews" },
  { doc_hidden = false, name = "UpdateMessageContentOpened" },
  { doc_hidden = false, name = "UpdateMessageMentionRead" },
  { doc_hidden = false, name = "UpdateNewChat" },
  { doc_hidden = false, name = "UpdateChatTitle" },
  { doc_hidden = false, name = "UpdateChatPhoto" },
  { doc_hidden = false, name = "UpdateChatLastMessage" },
  { doc_hidden = false, name = "UpdateChatOrder" },
  { doc_hidden = false, name = "UpdateChatIsPinned" },
  { doc_hidden = false, name = "UpdateChatIsMarkedAsUnread" },
  { doc_hidden = false, name = "UpdateChatIsSponsored" },
  { doc_hidden = false, name = "UpdateChatDefaultDisableNotification" },
  { doc_hidden = false, name = "UpdateChatReadInbox" },
  { doc_hidden = false, name = "UpdateChatReadOutbox" },
  { doc_hidden = false, name = "UpdateChatUnreadMentionCount" },
  { doc_hidden = false, name = "UpdateChatNotificationSettings" },
  { doc_hidden = false, name = "UpdateScopeNotificationSettings" },
  { doc_hidden = false, name = "UpdateChatPinnedMessage" },
  { doc_hidden = false, name = "UpdateChatReplyMarkup" },
  { doc_hidden = false, name = "UpdateChatDraftMessage" },
  { doc_hidden = false, name = "UpdateChatOnlineMemberCount" },
  { doc_hidden = false, name = "UpdateNotification" },
  { doc_hidden = false, name = "UpdateNotificationGroup" },
  { doc_hidden = false, name = "UpdateActiveNotifications" },
  { doc_hidden = false, name = "UpdateHavePendingNotifications" },
  { doc_hidden = false, name = "UpdateDeleteMessages" },
  { doc_hidden = false, name = "UpdateUserChatAction" },
  { doc_hidden = false, name = "UpdateUserStatus" },
  { doc_hidden = false, name = "UpdateUser" },
  { doc_hidden = false, name = "UpdateBasicGroup" },
  { doc_hidden = false, name = "UpdateSupergroup" },
  { doc_hidden = false, name = "UpdateSecretChat" },
  { doc_hidden = false, name = "UpdateUserFullInfo" },
  { doc_hidden = false, name = "UpdateBasicGroupFullInfo" },
  { doc_hidden = false, name = "UpdateSupergroupFullInfo" },
  { doc_hidden = false, name = "UpdateServiceNotification" },
  { doc_hidden = false, name = "UpdateFile" },
  { doc_hidden = false, name = "UpdateFileGenerationStart" },
  { doc_hidden = false, name = "UpdateFileGenerationStop" },
  { doc_hidden = false, name = "UpdateCall" },
  { doc_hidden = false, name = "UpdateUserPrivacySettingRules" },
  { doc_hidden = false, name = "UpdateUnreadMessageCount" },
  { doc_hidden = false, name = "UpdateUnreadChatCount" },
  { doc_hidden = false, name = "UpdateOption" },
  { doc_hidden = false, name = "UpdateInstalledStickerSets" },
  { doc_hidden = false, name = "UpdateTrendingStickerSets" },
  { doc_hidden = false, name = "UpdateRecentStickers" },
  { doc_hidden = false, name = "UpdateFavoriteStickers" },
  { doc_hidden = false, name = "UpdateSavedAnimations" },
  { doc_hidden = false, name = "UpdateLanguagePackStrings" },
  { doc_hidden = false, name = "UpdateConnectionState" },
  { doc_hidden = false, name = "UpdateTermsOfService" },
  { doc_hidden = false, name = "UpdateNewInlineQuery" },
  { doc_hidden = false, name = "UpdateNewChosenInlineResult" },
  { doc_hidden = false, name = "UpdateNewCallbackQuery" },
  { doc_hidden = false, name = "UpdateNewInlineCallbackQuery" },
  { doc_hidden = false, name = "UpdateNewShippingQuery" },
  { doc_hidden = false, name = "UpdateNewPreCheckoutQuery" },
  { doc_hidden = false, name = "UpdateNewCustomEvent" },
  { doc_hidden = false, name = "UpdateNewCustomQuery" },
  { doc_hidden = false, name = "UpdatePoll" },
  { doc_hidden = false, name = "Updates" },
  { doc_hidden = false, name = "User" },
  { doc_hidden = false, name = "UserFullInfo" },
  { doc_hidden = false, name = "UserPrivacySetting" },
  { doc_hidden = false, name = "UserPrivacySettingShowStatus" },
  { doc_hidden = false, name = "UserPrivacySettingAllowChatInvites" },
  { doc_hidden = false, name = "UserPrivacySettingAllowCalls" },
  { doc_hidden = false, name = "UserPrivacySettingAllowPeerToPeerCalls" },
  { doc_hidden = false, name = "UserPrivacySettingRule" },
  { doc_hidden = false, name = "UserPrivacySettingRuleAllowAll" },
  { doc_hidden = false, name = "UserPrivacySettingRuleAllowContacts" },
  { doc_hidden = false, name = "UserPrivacySettingRuleAllowUsers" },
  { doc_hidden = false, name = "UserPrivacySettingRuleRestrictAll" },
  { doc_hidden = false, name = "UserPrivacySettingRuleRestrictContacts" },
  { doc_hidden = false, name = "UserPrivacySettingRuleRestrictUsers" },
  { doc_hidden = false, name = "UserPrivacySettingRules" },
  { doc_hidden = false, name = "UserProfilePhoto" },
  { doc_hidden = false, name = "UserProfilePhotos" },
  { doc_hidden = false, name = "UserStatus" },
  { doc_hidden = false, name = "UserStatusEmpty" },
  { doc_hidden = false, name = "UserStatusOnline" },
  { doc_hidden = false, name = "UserStatusOffline" },
  { doc_hidden = false, name = "UserStatusRecently" },
  { doc_hidden = false, name = "UserStatusLastWeek" },
  { doc_hidden = false, name = "UserStatusLastMonth" },
  { doc_hidden = false, name = "UserType" },
  { doc_hidden = false, name = "UserTypeRegular" },
  { doc_hidden = false, name = "UserTypeDeleted" },
  { doc_hidden = false, name = "UserTypeBot" },
  { doc_hidden = false, name = "UserTypeUnknown" },
  { doc_hidden = false, name = "Users" },
  { doc_hidden = false, name = "ValidatedOrderInfo" },
  { doc_hidden = false, name = "Venue" },
  { doc_hidden = false, name = "Video" },
  { doc_hidden = false, name = "VideoNote" },
  { doc_hidden = false, name = "VoiceNote" },
  { doc_hidden = false, name = "Wallpaper" },
  { doc_hidden = false, name = "Wallpapers" },
  { doc_hidden = false, name = "WebPage" },
  { doc_hidden = false, name = "WebPageInstantView" },
  { doc_hidden = false, name = "AcceptCall" },
  { doc_hidden = false, name = "AcceptTermsOfService" },
  { doc_hidden = false, name = "AddChatMember" },
  { doc_hidden = false, name = "AddChatMembers" },
  { doc_hidden = false, name = "AddCustomServerLanguagePack" },
  { doc_hidden = false, name = "AddFavoriteSticker" },
  { doc_hidden = false, name = "AddLocalMessage" },
  { doc_hidden = false, name = "AddLogMessage" },
  { doc_hidden = false, name = "AddNetworkStatistics" },
  { doc_hidden = false, name = "AddProxy" },
  { doc_hidden = false, name = "AddRecentSticker" },
  { doc_hidden = false, name = "AddRecentlyFoundChat" },
  { doc_hidden = false, name = "AddSavedAnimation" },
  { doc_hidden = false, name = "AddStickerToSet" },
  { doc_hidden = false, name = "AnswerCallbackQuery" },
  { doc_hidden = false, name = "AnswerCustomQuery" },
  { doc_hidden = false, name = "AnswerInlineQuery" },
  { doc_hidden = false, name = "AnswerPreCheckoutQuery" },
  { doc_hidden = false, name = "AnswerShippingQuery" },
  { doc_hidden = false, name = "BlockUser" },
  { doc_hidden = false, name = "CancelDownloadFile" },
  { doc_hidden = false, name = "CancelUploadFile" },
  { doc_hidden = false, name = "ChangeChatReportSpamState" },
  { doc_hidden = false, name = "ChangeImportedContacts" },
  { doc_hidden = false, name = "ChangePhoneNumber" },
  { doc_hidden = false, name = "ChangeStickerSet" },
  { doc_hidden = false, name = "CheckAuthenticationBotToken" },
  { doc_hidden = false, name = "CheckAuthenticationCode" },
  { doc_hidden = false, name = "CheckAuthenticationPassword" },
  { doc_hidden = false, name = "CheckChangePhoneNumberCode" },
  { doc_hidden = false, name = "CheckChatInviteLink" },
  { doc_hidden = false, name = "CheckChatUsername" },
  { doc_hidden = false, name = "CheckDatabaseEncryptionKey" },
  { doc_hidden = false, name = "CheckEmailAddressVerificationCode" },
  { doc_hidden = false, name = "CheckPhoneNumberConfirmationCode" },
  { doc_hidden = false, name = "CheckPhoneNumberVerificationCode" },
  { doc_hidden = false, name = "CheckRecoveryEmailAddressCode" },
  { doc_hidden = false, name = "CleanFileName" },
  { doc_hidden = false, name = "ClearAllDraftMessages" },
  { doc_hidden = false, name = "ClearImportedContacts" },
  { doc_hidden = false, name = "ClearRecentStickers" },
  { doc_hidden = false, name = "ClearRecentlyFoundChats" },
  { doc_hidden = false, name = "Close" },
  { doc_hidden = false, name = "CloseChat" },
  { doc_hidden = false, name = "CloseSecretChat" },
  { doc_hidden = false, name = "CreateBasicGroupChat" },
  { doc_hidden = false, name = "CreateCall" },
  { doc_hidden = false, name = "CreateNewBasicGroupChat" },
  { doc_hidden = false, name = "CreateNewSecretChat" },
  { doc_hidden = false, name = "CreateNewStickerSet" },
  { doc_hidden = false, name = "CreateNewSupergroupChat" },
  { doc_hidden = false, name = "CreatePrivateChat" },
  { doc_hidden = false, name = "CreateSecretChat" },
  { doc_hidden = false, name = "CreateSupergroupChat" },
  { doc_hidden = false, name = "CreateTemporaryPassword" },
  { doc_hidden = false, name = "DeleteAccount" },
  { doc_hidden = false, name = "DeleteChatHistory" },
  { doc_hidden = false, name = "DeleteChatMessagesFromUser" },
  { doc_hidden = false, name = "DeleteChatReplyMarkup" },
  { doc_hidden = false, name = "DeleteFile" },
  { doc_hidden = false, name = "DeleteLanguagePack" },
  { doc_hidden = false, name = "DeleteMessages" },
  { doc_hidden = false, name = "DeletePassportElement" },
  { doc_hidden = false, name = "DeleteProfilePhoto" },
  { doc_hidden = false, name = "DeleteSavedCredentials" },
  { doc_hidden = false, name = "DeleteSavedOrderInfo" },
  { doc_hidden = false, name = "DeleteSupergroup" },
  { doc_hidden = false, name = "Destroy" },
  { doc_hidden = false, name = "DisableProxy" },
  { doc_hidden = false, name = "DiscardCall" },
  { doc_hidden = false, name = "DisconnectAllWebsites" },
  { doc_hidden = false, name = "DisconnectWebsite" },
  { doc_hidden = false, name = "DownloadFile" },
  { doc_hidden = false, name = "EditCustomLanguagePackInfo" },
  { doc_hidden = false, name = "EditInlineMessageCaption" },
  { doc_hidden = false, name = "EditInlineMessageLiveLocation" },
  { doc_hidden = false, name = "EditInlineMessageMedia" },
  { doc_hidden = false, name = "EditInlineMessageReplyMarkup" },
  { doc_hidden = false, name = "EditInlineMessageText" },
  { doc_hidden = false, name = "EditMessageCaption" },
  { doc_hidden = false, name = "EditMessageLiveLocation" },
  { doc_hidden = false, name = "EditMessageMedia" },
  { doc_hidden = false, name = "EditMessageReplyMarkup" },
  { doc_hidden = false, name = "EditMessageText" },
  { doc_hidden = false, name = "EditProxy" },
  { doc_hidden = false, name = "EnableProxy" },
  { doc_hidden = false, name = "FinishFileGeneration" },
  { doc_hidden = false, name = "ForwardMessages" },
  { doc_hidden = false, name = "GenerateChatInviteLink" },
  { doc_hidden = false, name = "GetAccountTtl" },
  { doc_hidden = false, name = "GetActiveLiveLocationMessages" },
  { doc_hidden = false, name = "GetActiveSessions" },
  { doc_hidden = false, name = "GetAllPassportElements" },
  { doc_hidden = false, name = "GetApplicationConfig" },
  { doc_hidden = false, name = "GetArchivedStickerSets" },
  { doc_hidden = false, name = "GetAttachedStickerSets" },
  { doc_hidden = false, name = "GetAuthorizationState" },
  { doc_hidden = false, name = "GetBasicGroup" },
  { doc_hidden = false, name = "GetBasicGroupFullInfo" },
  { doc_hidden = false, name = "GetBlockedUsers" },
  { doc_hidden = false, name = "GetCallbackQueryAnswer" },
  { doc_hidden = false, name = "GetChat" },
  { doc_hidden = false, name = "GetChatAdministrators" },
  { doc_hidden = false, name = "GetChatEventLog" },
  { doc_hidden = false, name = "GetChatHistory" },
  { doc_hidden = false, name = "GetChatMember" },
  { doc_hidden = false, name = "GetChatMessageByDate" },
  { doc_hidden = false, name = "GetChatMessageCount" },
  { doc_hidden = false, name = "GetChatNotificationSettingsExceptions" },
  { doc_hidden = false, name = "GetChatPinnedMessage" },
  { doc_hidden = false, name = "GetChatReportSpamState" },
  { doc_hidden = false, name = "GetChatStatisticsUrl" },
  { doc_hidden = false, name = "GetChats" },
  { doc_hidden = false, name = "GetConnectedWebsites" },
  { doc_hidden = false, name = "GetContacts" },
  { doc_hidden = false, name = "GetCountryCode" },
  { doc_hidden = false, name = "GetCreatedPublicChats" },
  { doc_hidden = false, name = "GetCurrentState" },
  { doc_hidden = false, name = "GetDatabaseStatistics" },
  { doc_hidden = false, name = "GetDeepLinkInfo" },
  { doc_hidden = false, name = "GetFavoriteStickers" },
  { doc_hidden = false, name = "GetFile" },
  { doc_hidden = false, name = "GetFileDownloadedPrefixSize" },
  { doc_hidden = false, name = "GetFileExtension" },
  { doc_hidden = false, name = "GetFileMimeType" },
  { doc_hidden = false, name = "GetGameHighScores" },
  { doc_hidden = false, name = "GetGroupsInCommon" },
  { doc_hidden = false, name = "GetImportedContactCount" },
  { doc_hidden = false, name = "GetInlineGameHighScores" },
  { doc_hidden = false, name = "GetInlineQueryResults" },
  { doc_hidden = false, name = "GetInstalledStickerSets" },
  { doc_hidden = false, name = "GetInviteText" },
  { doc_hidden = false, name = "GetLanguagePackInfo" },
  { doc_hidden = false, name = "GetLanguagePackString" },
  { doc_hidden = false, name = "GetLanguagePackStrings" },
  { doc_hidden = false, name = "GetLocalizationTargetInfo" },
  { doc_hidden = false, name = "GetLogStream" },
  { doc_hidden = false, name = "GetLogTagVerbosityLevel" },
  { doc_hidden = false, name = "GetLogTags" },
  { doc_hidden = false, name = "GetLogVerbosityLevel" },
  { doc_hidden = false, name = "GetMapThumbnailFile" },
  { doc_hidden = false, name = "GetMe" },
  { doc_hidden = false, name = "GetMessage" },
  { doc_hidden = false, name = "GetMessageLink" },
  { doc_hidden = false, name = "GetMessageLocally" },
  { doc_hidden = false, name = "GetMessages" },
  { doc_hidden = false, name = "GetNetworkStatistics" },
  { doc_hidden = false, name = "GetOption" },
  { doc_hidden = false, name = "GetPassportAuthorizationForm" },
  { doc_hidden = false, name = "GetPassportAuthorizationFormAvailableElements" },
  { doc_hidden = false, name = "GetPassportElement" },
  { doc_hidden = false, name = "GetPasswordState" },
  { doc_hidden = false, name = "GetPaymentForm" },
  { doc_hidden = false, name = "GetPaymentReceipt" },
  { doc_hidden = false, name = "GetPreferredCountryLanguage" },
  { doc_hidden = false, name = "GetProxies" },
  { doc_hidden = false, name = "GetProxyLink" },
  { doc_hidden = false, name = "GetPublicMessageLink" },
  { doc_hidden = false, name = "GetPushReceiverId" },
  { doc_hidden = false, name = "GetRecentInlineBots" },
  { doc_hidden = false, name = "GetRecentStickers" },
  { doc_hidden = false, name = "GetRecentlyVisitedTMeUrls" },
  { doc_hidden = false, name = "GetRecoveryEmailAddress" },
  { doc_hidden = false, name = "GetRemoteFile" },
  { doc_hidden = false, name = "GetRepliedMessage" },
  { doc_hidden = false, name = "GetSavedAnimations" },
  { doc_hidden = false, name = "GetSavedOrderInfo" },
  { doc_hidden = false, name = "GetScopeNotificationSettings" },
  { doc_hidden = false, name = "GetSecretChat" },
  { doc_hidden = false, name = "GetStickerEmojis" },
  { doc_hidden = false, name = "GetStickerSet" },
  { doc_hidden = false, name = "GetStickers" },
  { doc_hidden = false, name = "GetStorageStatistics" },
  { doc_hidden = false, name = "GetStorageStatisticsFast" },
  { doc_hidden = false, name = "GetSupergroup" },
  { doc_hidden = false, name = "GetSupergroupFullInfo" },
  { doc_hidden = false, name = "GetSupergroupMembers" },
  { doc_hidden = false, name = "GetSupportUser" },
  { doc_hidden = false, name = "GetTemporaryPasswordState" },
  { doc_hidden = false, name = "GetTextEntities" },
  { doc_hidden = false, name = "GetTopChats" },
  { doc_hidden = false, name = "GetTrendingStickerSets" },
  { doc_hidden = false, name = "GetUser" },
  { doc_hidden = false, name = "GetUserFullInfo" },
  { doc_hidden = false, name = "GetUserPrivacySettingRules" },
  { doc_hidden = false, name = "GetUserProfilePhotos" },
  { doc_hidden = false, name = "GetWallpapers" },
  { doc_hidden = false, name = "GetWebPageInstantView" },
  { doc_hidden = false, name = "GetWebPagePreview" },
  { doc_hidden = false, name = "ImportContacts" },
  { doc_hidden = false, name = "JoinChat" },
  { doc_hidden = false, name = "JoinChatByInviteLink" },
  { doc_hidden = false, name = "LeaveChat" },
  { doc_hidden = false, name = "LogOut" },
  { doc_hidden = false, name = "OpenChat" },
  { doc_hidden = false, name = "OpenMessageContent" },
  { doc_hidden = false, name = "OptimizeStorage" },
  { doc_hidden = false, name = "ParseTextEntities" },
  { doc_hidden = false, name = "PinChatMessage" },
  { doc_hidden = false, name = "PingProxy" },
  { doc_hidden = false, name = "ProcessPushNotification" },
  { doc_hidden = false, name = "ReadAllChatMentions" },
  { doc_hidden = false, name = "ReadFilePart" },
  { doc_hidden = false, name = "RecoverAuthenticationPassword" },
  { doc_hidden = false, name = "RecoverPassword" },
  { doc_hidden = false, name = "RegisterDevice" },
  { doc_hidden = false, name = "RemoveContacts" },
  { doc_hidden = false, name = "RemoveFavoriteSticker" },
  { doc_hidden = false, name = "RemoveNotification" },
  { doc_hidden = false, name = "RemoveNotificationGroup" },
  { doc_hidden = false, name = "RemoveProxy" },
  { doc_hidden = false, name = "RemoveRecentHashtag" },
  { doc_hidden = false, name = "RemoveRecentSticker" },
  { doc_hidden = false, name = "RemoveRecentlyFoundChat" },
  { doc_hidden = false, name = "RemoveSavedAnimation" },
  { doc_hidden = false, name = "RemoveStickerFromSet" },
  { doc_hidden = false, name = "RemoveTopChat" },
  { doc_hidden = false, name = "ReorderInstalledStickerSets" },
  { doc_hidden = false, name = "ReportChat" },
  { doc_hidden = false, name = "ReportSupergroupSpam" },
  { doc_hidden = false, name = "RequestAuthenticationPasswordRecovery" },
  { doc_hidden = false, name = "RequestPasswordRecovery" },
  { doc_hidden = false, name = "ResendAuthenticationCode" },
  { doc_hidden = false, name = "ResendChangePhoneNumberCode" },
  { doc_hidden = false, name = "ResendEmailAddressVerificationCode" },
  { doc_hidden = false, name = "ResendPhoneNumberConfirmationCode" },
  { doc_hidden = false, name = "ResendPhoneNumberVerificationCode" },
  { doc_hidden = false, name = "ResendRecoveryEmailAddressCode" },
  { doc_hidden = false, name = "ResetAllNotificationSettings" },
  { doc_hidden = false, name = "ResetNetworkStatistics" },
  { doc_hidden = false, name = "SearchCallMessages" },
  { doc_hidden = false, name = "SearchChatMembers" },
  { doc_hidden = false, name = "SearchChatMessages" },
  { doc_hidden = false, name = "SearchChatRecentLocationMessages" },
  { doc_hidden = false, name = "SearchChats" },
  { doc_hidden = false, name = "SearchChatsOnServer" },
  { doc_hidden = false, name = "SearchContacts" },
  { doc_hidden = false, name = "SearchHashtags" },
  { doc_hidden = false, name = "SearchInstalledStickerSets" },
  { doc_hidden = false, name = "SearchMessages" },
  { doc_hidden = false, name = "SearchPublicChat" },
  { doc_hidden = false, name = "SearchPublicChats" },
  { doc_hidden = false, name = "SearchSecretMessages" },
  { doc_hidden = false, name = "SearchStickerSet" },
  { doc_hidden = false, name = "SearchStickerSets" },
  { doc_hidden = false, name = "SearchStickers" },
  { doc_hidden = false, name = "SendBotStartMessage" },
  { doc_hidden = false, name = "SendCallDebugInformation" },
  { doc_hidden = false, name = "SendCallRating" },
  { doc_hidden = false, name = "SendChatAction" },
  { doc_hidden = false, name = "SendChatScreenshotTakenNotification" },
  { doc_hidden = false, name = "SendChatSetTtlMessage" },
  { doc_hidden = false, name = "SendCustomRequest" },
  { doc_hidden = false, name = "SendEmailAddressVerificationCode" },
  { doc_hidden = false, name = "SendInlineQueryResultMessage" },
  { doc_hidden = false, name = "SendMessage" },
  { doc_hidden = false, name = "SendMessageAlbum" },
  { doc_hidden = false, name = "SendPassportAuthorizationForm" },
  { doc_hidden = false, name = "SendPaymentForm" },
  { doc_hidden = false, name = "SendPhoneNumberConfirmationCode" },
  { doc_hidden = false, name = "SendPhoneNumberVerificationCode" },
  { doc_hidden = false, name = "SetAccountTtl" },
  { doc_hidden = false, name = "SetAlarm" },
  { doc_hidden = false, name = "SetAuthenticationPhoneNumber" },
  { doc_hidden = false, name = "SetBio" },
  { doc_hidden = false, name = "SetBotUpdatesStatus" },
  { doc_hidden = false, name = "SetChatClientData" },
  { doc_hidden = false, name = "SetChatDraftMessage" },
  { doc_hidden = false, name = "SetChatMemberStatus" },
  { doc_hidden = false, name = "SetChatNotificationSettings" },
  { doc_hidden = false, name = "SetChatPhoto" },
  { doc_hidden = false, name = "SetChatTitle" },
  { doc_hidden = false, name = "SetCustomLanguagePack" },
  { doc_hidden = false, name = "SetCustomLanguagePackString" },
  { doc_hidden = false, name = "SetDatabaseEncryptionKey" },
  { doc_hidden = false, name = "SetFileGenerationProgress" },
  { doc_hidden = false, name = "SetGameScore" },
  { doc_hidden = false, name = "SetInlineGameScore" },
  { doc_hidden = false, name = "SetLogStream" },
  { doc_hidden = false, name = "SetLogTagVerbosityLevel" },
  { doc_hidden = false, name = "SetLogVerbosityLevel" },
  { doc_hidden = false, name = "SetName" },
  { doc_hidden = false, name = "SetNetworkType" },
  { doc_hidden = false, name = "SetOption" },
  { doc_hidden = false, name = "SetPassportElement" },
  { doc_hidden = false, name = "SetPassportElementErrors" },
  { doc_hidden = false, name = "SetPassword" },
  { doc_hidden = false, name = "SetPinnedChats" },
  { doc_hidden = false, name = "SetPollAnswer" },
  { doc_hidden = false, name = "SetProfilePhoto" },
  { doc_hidden = false, name = "SetRecoveryEmailAddress" },
  { doc_hidden = false, name = "SetScopeNotificationSettings" },
  { doc_hidden = false, name = "SetStickerPositionInSet" },
  { doc_hidden = false, name = "SetSupergroupDescription" },
  { doc_hidden = false, name = "SetSupergroupStickerSet" },
  { doc_hidden = false, name = "SetSupergroupUsername" },
  { doc_hidden = false, name = "SetTdlibParameters" },
  { doc_hidden = false, name = "SetUserPrivacySettingRules" },
  { doc_hidden = false, name = "SetUsername" },
  { doc_hidden = false, name = "StopPoll" },
  { doc_hidden = false, name = "SynchronizeLanguagePack" },
  { doc_hidden = false, name = "TerminateAllOtherSessions" },
  { doc_hidden = false, name = "TerminateSession" },
  { doc_hidden = false, name = "TestCallBytes" },
  { doc_hidden = false, name = "TestCallEmpty" },
  { doc_hidden = false, name = "TestCallString" },
  { doc_hidden = false, name = "TestCallVectorInt" },
  { doc_hidden = false, name = "TestCallVectorIntObject" },
  { doc_hidden = false, name = "TestCallVectorString" },
  { doc_hidden = false, name = "TestCallVectorStringObject" },
  { doc_hidden = false, name = "TestGetDifference" },
  { doc_hidden = false, name = "TestNetwork" },
  { doc_hidden = false, name = "TestSquareInt" },
  { doc_hidden = false, name = "TestUseError" },
  { doc_hidden = false, name = "TestUseUpdate" },
  { doc_hidden = false, name = "ToggleBasicGroupAdministrators" },
  { doc_hidden = false, name = "ToggleChatDefaultDisableNotification" },
  { doc_hidden = false, name = "ToggleChatIsMarkedAsUnread" },
  { doc_hidden = false, name = "ToggleChatIsPinned" },
  { doc_hidden = false, name = "ToggleSupergroupInvites" },
  { doc_hidden = false, name = "ToggleSupergroupIsAllHistoryAvailable" },
  { doc_hidden = false, name = "ToggleSupergroupSignMessages" },
  { doc_hidden = false, name = "UnblockUser" },
  { doc_hidden = false, name = "UnpinChatMessage" },
  { doc_hidden = false, name = "UpgradeBasicGroupChatToSupergroupChat" },
  { doc_hidden = false, name = "UploadFile" },
  { doc_hidden = false, name = "UploadStickerFile" },
  { doc_hidden = false, name = "ValidateOrderInfo" },
  { doc_hidden = false, name = "ViewMessages" },
  { doc_hidden = false, name = "ViewTrendingStickerSets" },
  { doc_hidden = false, name = "WriteGeneratedFilePart" },
  
]
fields_size = 1079
has_trait_field = false
set_trait_typetag = false
dna = "enum"
extra_fns = [
"""
impl RTDType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDType)(text.as_ref()) }
}
""",
]


[rtd.Object]
origin_name = "Object"
clz_name = "Object"
is_private = false
clz_is_trait = true
clz_description = """ This class is a base class for all TDLib API classes.  """
has_subclasses = true
sub_classes = [
  { name = "AccountTtl", is_trait = false },
  { name = "Address", is_trait = false },
  { name = "Animation", is_trait = false },
  { name = "Animations", is_trait = false },
  { name = "Audio", is_trait = false },
  { name = "AuthenticationCodeInfo", is_trait = false },
  { name = "AuthenticationCodeType", is_trait = true },
  { name = "AuthorizationState", is_trait = true },
  { name = "BasicGroup", is_trait = false },
  { name = "BasicGroupFullInfo", is_trait = false },
  { name = "BotCommand", is_trait = false },
  { name = "BotInfo", is_trait = false },
  { name = "Call", is_trait = false },
  { name = "CallbackQueryAnswer", is_trait = false },
  { name = "CallbackQueryPayload", is_trait = true },
  { name = "CallConnection", is_trait = false },
  { name = "CallDiscardReason", is_trait = true },
  { name = "CallId", is_trait = false },
  { name = "CallProtocol", is_trait = false },
  { name = "CallState", is_trait = true },
  { name = "Chat", is_trait = false },
  { name = "ChatAction", is_trait = true },
  { name = "ChatEvent", is_trait = false },
  { name = "ChatEventAction", is_trait = true },
  { name = "ChatEventLogFilters", is_trait = false },
  { name = "ChatEvents", is_trait = false },
  { name = "ChatInviteLink", is_trait = false },
  { name = "ChatInviteLinkInfo", is_trait = false },
  { name = "ChatMember", is_trait = false },
  { name = "ChatMembers", is_trait = false },
  { name = "ChatMembersFilter", is_trait = true },
  { name = "ChatMemberStatus", is_trait = true },
  { name = "ChatNotificationSettings", is_trait = false },
  { name = "ChatPhoto", is_trait = false },
  { name = "ChatReportReason", is_trait = true },
  { name = "ChatReportSpamState", is_trait = false },
  { name = "Chats", is_trait = false },
  { name = "ChatType", is_trait = true },
  { name = "CheckChatUsernameResult", is_trait = true },
  { name = "ConnectedWebsite", is_trait = false },
  { name = "ConnectedWebsites", is_trait = false },
  { name = "ConnectionState", is_trait = true },
  { name = "Contact", is_trait = false },
  { name = "Count", is_trait = false },
  { name = "CustomRequestResult", is_trait = false },
  { name = "DatabaseStatistics", is_trait = false },
  { name = "Date", is_trait = false },
  { name = "DatedFile", is_trait = false },
  { name = "DeepLinkInfo", is_trait = false },
  { name = "DeviceToken", is_trait = true },
  { name = "Document", is_trait = false },
  { name = "DraftMessage", is_trait = false },
  { name = "EmailAddressAuthenticationCodeInfo", is_trait = false },
  { name = "EncryptedCredentials", is_trait = false },
  { name = "EncryptedPassportElement", is_trait = false },
  { name = "Error", is_trait = false },
  { name = "File", is_trait = false },
  { name = "FilePart", is_trait = false },
  { name = "FileType", is_trait = true },
  { name = "FormattedText", is_trait = false },
  { name = "FoundMessages", is_trait = false },
  { name = "Game", is_trait = false },
  { name = "GameHighScore", is_trait = false },
  { name = "GameHighScores", is_trait = false },
  { name = "Hashtags", is_trait = false },
  { name = "HttpUrl", is_trait = false },
  { name = "IdentityDocument", is_trait = false },
  { name = "ImportedContacts", is_trait = false },
  { name = "InlineKeyboardButton", is_trait = false },
  { name = "InlineKeyboardButtonType", is_trait = true },
  { name = "InlineQueryResult", is_trait = true },
  { name = "InlineQueryResults", is_trait = false },
  { name = "InputCredentials", is_trait = true },
  { name = "InputFile", is_trait = true },
  { name = "InputIdentityDocument", is_trait = false },
  { name = "InputInlineQueryResult", is_trait = true },
  { name = "InputMessageContent", is_trait = true },
  { name = "InputPassportElement", is_trait = true },
  { name = "InputPassportElementError", is_trait = false },
  { name = "InputPassportElementErrorSource", is_trait = true },
  { name = "InputPersonalDocument", is_trait = false },
  { name = "InputSticker", is_trait = false },
  { name = "InputThumbnail", is_trait = false },
  { name = "Invoice", is_trait = false },
  { name = "KeyboardButton", is_trait = false },
  { name = "KeyboardButtonType", is_trait = true },
  { name = "LabeledPricePart", is_trait = false },
  { name = "LanguagePackInfo", is_trait = false },
  { name = "LanguagePackString", is_trait = false },
  { name = "LanguagePackStrings", is_trait = false },
  { name = "LanguagePackStringValue", is_trait = true },
  { name = "LinkState", is_trait = true },
  { name = "LocalFile", is_trait = false },
  { name = "LocalizationTargetInfo", is_trait = false },
  { name = "Location", is_trait = false },
  { name = "LogStream", is_trait = true },
  { name = "LogTags", is_trait = false },
  { name = "LogVerbosityLevel", is_trait = false },
  { name = "MaskPoint", is_trait = true },
  { name = "MaskPosition", is_trait = false },
  { name = "Message", is_trait = false },
  { name = "MessageContent", is_trait = true },
  { name = "MessageForwardInfo", is_trait = false },
  { name = "MessageForwardOrigin", is_trait = true },
  { name = "Messages", is_trait = false },
  { name = "MessageSendingState", is_trait = true },
  { name = "NetworkStatistics", is_trait = false },
  { name = "NetworkStatisticsEntry", is_trait = true },
  { name = "NetworkType", is_trait = true },
  { name = "Notification", is_trait = false },
  { name = "NotificationGroup", is_trait = false },
  { name = "NotificationGroupType", is_trait = true },
  { name = "NotificationSettingsScope", is_trait = true },
  { name = "NotificationType", is_trait = true },
  { name = "Ok", is_trait = false },
  { name = "OptionValue", is_trait = true },
  { name = "OrderInfo", is_trait = false },
  { name = "PageBlock", is_trait = true },
  { name = "PageBlockCaption", is_trait = false },
  { name = "PageBlockHorizontalAlignment", is_trait = true },
  { name = "PageBlockListItem", is_trait = false },
  { name = "PageBlockRelatedArticle", is_trait = false },
  { name = "PageBlockTableCell", is_trait = false },
  { name = "PageBlockVerticalAlignment", is_trait = true },
  { name = "PassportAuthorizationForm", is_trait = false },
  { name = "PassportElement", is_trait = true },
  { name = "PassportElementError", is_trait = false },
  { name = "PassportElementErrorSource", is_trait = true },
  { name = "PassportElements", is_trait = false },
  { name = "PassportElementsWithErrors", is_trait = false },
  { name = "PassportElementType", is_trait = true },
  { name = "PassportRequiredElement", is_trait = false },
  { name = "PassportSuitableElement", is_trait = false },
  { name = "PasswordState", is_trait = false },
  { name = "PaymentForm", is_trait = false },
  { name = "PaymentReceipt", is_trait = false },
  { name = "PaymentResult", is_trait = false },
  { name = "PaymentsProviderStripe", is_trait = false },
  { name = "PersonalDetails", is_trait = false },
  { name = "PersonalDocument", is_trait = false },
  { name = "Photo", is_trait = false },
  { name = "PhotoSize", is_trait = false },
  { name = "Poll", is_trait = false },
  { name = "PollOption", is_trait = false },
  { name = "ProfilePhoto", is_trait = false },
  { name = "Proxies", is_trait = false },
  { name = "Proxy", is_trait = false },
  { name = "ProxyType", is_trait = true },
  { name = "PublicMessageLink", is_trait = false },
  { name = "PushMessageContent", is_trait = true },
  { name = "PushReceiverId", is_trait = false },
  { name = "RecoveryEmailAddress", is_trait = false },
  { name = "RemoteFile", is_trait = false },
  { name = "ReplyMarkup", is_trait = true },
  { name = "RichText", is_trait = true },
  { name = "SavedCredentials", is_trait = false },
  { name = "ScopeNotificationSettings", is_trait = false },
  { name = "SearchMessagesFilter", is_trait = true },
  { name = "Seconds", is_trait = false },
  { name = "SecretChat", is_trait = false },
  { name = "SecretChatState", is_trait = true },
  { name = "Session", is_trait = false },
  { name = "Sessions", is_trait = false },
  { name = "ShippingOption", is_trait = false },
  { name = "Sticker", is_trait = false },
  { name = "StickerEmojis", is_trait = false },
  { name = "Stickers", is_trait = false },
  { name = "StickerSet", is_trait = false },
  { name = "StickerSetInfo", is_trait = false },
  { name = "StickerSets", is_trait = false },
  { name = "StorageStatistics", is_trait = false },
  { name = "StorageStatisticsByChat", is_trait = false },
  { name = "StorageStatisticsByFileType", is_trait = false },
  { name = "StorageStatisticsFast", is_trait = false },
  { name = "Supergroup", is_trait = false },
  { name = "SupergroupFullInfo", is_trait = false },
  { name = "SupergroupMembersFilter", is_trait = true },
  { name = "TdlibParameters", is_trait = false },
  { name = "TemporaryPasswordState", is_trait = false },
  { name = "TermsOfService", is_trait = false },
  { name = "TestBytes", is_trait = false },
  { name = "TestInt", is_trait = false },
  { name = "TestString", is_trait = false },
  { name = "TestVectorInt", is_trait = false },
  { name = "TestVectorIntObject", is_trait = false },
  { name = "TestVectorString", is_trait = false },
  { name = "TestVectorStringObject", is_trait = false },
  { name = "Text", is_trait = false },
  { name = "TextEntities", is_trait = false },
  { name = "TextEntity", is_trait = false },
  { name = "TextEntityType", is_trait = true },
  { name = "TextParseMode", is_trait = true },
  { name = "TMeUrl", is_trait = false },
  { name = "TMeUrls", is_trait = false },
  { name = "TMeUrlType", is_trait = true },
  { name = "TopChatCategory", is_trait = true },
  { name = "Update", is_trait = true },
  { name = "Updates", is_trait = false },
  { name = "User", is_trait = false },
  { name = "UserFullInfo", is_trait = false },
  { name = "UserPrivacySetting", is_trait = true },
  { name = "UserPrivacySettingRule", is_trait = true },
  { name = "UserPrivacySettingRules", is_trait = false },
  { name = "UserProfilePhoto", is_trait = false },
  { name = "UserProfilePhotos", is_trait = false },
  { name = "Users", is_trait = false },
  { name = "UserStatus", is_trait = true },
  { name = "UserType", is_trait = true },
  { name = "ValidatedOrderInfo", is_trait = false },
  { name = "Venue", is_trait = false },
  { name = "Video", is_trait = false },
  { name = "VideoNote", is_trait = false },
  { name = "VoiceNote", is_trait = false },
  { name = "Wallpaper", is_trait = false },
  { name = "Wallpapers", is_trait = false },
  { name = "WebPage", is_trait = false },
  { name = "WebPageInstantView", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "trait"

extra_fns = [

]



[[rtd.Object.supers]]
name = "RObject"
[[rtd.Object.supers]]
name = "Debug"










[rtd.Function]
origin_name = "Function"
clz_name = "Function"
is_private = false
clz_is_trait = true
clz_description = """ This class is a base class for all TDLib API functions.  """
has_subclasses = true
sub_classes = [
  { name = "AcceptCall", is_trait = false },
  { name = "AcceptTermsOfService", is_trait = false },
  { name = "AddChatMember", is_trait = false },
  { name = "AddChatMembers", is_trait = false },
  { name = "AddCustomServerLanguagePack", is_trait = false },
  { name = "AddFavoriteSticker", is_trait = false },
  { name = "AddLocalMessage", is_trait = false },
  { name = "AddLogMessage", is_trait = false },
  { name = "AddNetworkStatistics", is_trait = false },
  { name = "AddProxy", is_trait = false },
  { name = "AddRecentlyFoundChat", is_trait = false },
  { name = "AddRecentSticker", is_trait = false },
  { name = "AddSavedAnimation", is_trait = false },
  { name = "AddStickerToSet", is_trait = false },
  { name = "AnswerCallbackQuery", is_trait = false },
  { name = "AnswerCustomQuery", is_trait = false },
  { name = "AnswerInlineQuery", is_trait = false },
  { name = "AnswerPreCheckoutQuery", is_trait = false },
  { name = "AnswerShippingQuery", is_trait = false },
  { name = "BlockUser", is_trait = false },
  { name = "CancelDownloadFile", is_trait = false },
  { name = "CancelUploadFile", is_trait = false },
  { name = "ChangeChatReportSpamState", is_trait = false },
  { name = "ChangeImportedContacts", is_trait = false },
  { name = "ChangePhoneNumber", is_trait = false },
  { name = "ChangeStickerSet", is_trait = false },
  { name = "CheckAuthenticationBotToken", is_trait = false },
  { name = "CheckAuthenticationCode", is_trait = false },
  { name = "CheckAuthenticationPassword", is_trait = false },
  { name = "CheckChangePhoneNumberCode", is_trait = false },
  { name = "CheckChatInviteLink", is_trait = false },
  { name = "CheckChatUsername", is_trait = false },
  { name = "CheckDatabaseEncryptionKey", is_trait = false },
  { name = "CheckEmailAddressVerificationCode", is_trait = false },
  { name = "CheckPhoneNumberConfirmationCode", is_trait = false },
  { name = "CheckPhoneNumberVerificationCode", is_trait = false },
  { name = "CheckRecoveryEmailAddressCode", is_trait = false },
  { name = "CleanFileName", is_trait = false },
  { name = "ClearAllDraftMessages", is_trait = false },
  { name = "ClearImportedContacts", is_trait = false },
  { name = "ClearRecentlyFoundChats", is_trait = false },
  { name = "ClearRecentStickers", is_trait = false },
  { name = "Close", is_trait = false },
  { name = "CloseChat", is_trait = false },
  { name = "CloseSecretChat", is_trait = false },
  { name = "CreateBasicGroupChat", is_trait = false },
  { name = "CreateCall", is_trait = false },
  { name = "CreateNewBasicGroupChat", is_trait = false },
  { name = "CreateNewSecretChat", is_trait = false },
  { name = "CreateNewStickerSet", is_trait = false },
  { name = "CreateNewSupergroupChat", is_trait = false },
  { name = "CreatePrivateChat", is_trait = false },
  { name = "CreateSecretChat", is_trait = false },
  { name = "CreateSupergroupChat", is_trait = false },
  { name = "CreateTemporaryPassword", is_trait = false },
  { name = "DeleteAccount", is_trait = false },
  { name = "DeleteChatHistory", is_trait = false },
  { name = "DeleteChatMessagesFromUser", is_trait = false },
  { name = "DeleteChatReplyMarkup", is_trait = false },
  { name = "DeleteFile", is_trait = false },
  { name = "DeleteLanguagePack", is_trait = false },
  { name = "DeleteMessages", is_trait = false },
  { name = "DeletePassportElement", is_trait = false },
  { name = "DeleteProfilePhoto", is_trait = false },
  { name = "DeleteSavedCredentials", is_trait = false },
  { name = "DeleteSavedOrderInfo", is_trait = false },
  { name = "DeleteSupergroup", is_trait = false },
  { name = "Destroy", is_trait = false },
  { name = "DisableProxy", is_trait = false },
  { name = "DiscardCall", is_trait = false },
  { name = "DisconnectAllWebsites", is_trait = false },
  { name = "DisconnectWebsite", is_trait = false },
  { name = "DownloadFile", is_trait = false },
  { name = "EditCustomLanguagePackInfo", is_trait = false },
  { name = "EditInlineMessageCaption", is_trait = false },
  { name = "EditInlineMessageLiveLocation", is_trait = false },
  { name = "EditInlineMessageMedia", is_trait = false },
  { name = "EditInlineMessageReplyMarkup", is_trait = false },
  { name = "EditInlineMessageText", is_trait = false },
  { name = "EditMessageCaption", is_trait = false },
  { name = "EditMessageLiveLocation", is_trait = false },
  { name = "EditMessageMedia", is_trait = false },
  { name = "EditMessageReplyMarkup", is_trait = false },
  { name = "EditMessageText", is_trait = false },
  { name = "EditProxy", is_trait = false },
  { name = "EnableProxy", is_trait = false },
  { name = "FinishFileGeneration", is_trait = false },
  { name = "ForwardMessages", is_trait = false },
  { name = "GenerateChatInviteLink", is_trait = false },
  { name = "GetAccountTtl", is_trait = false },
  { name = "GetActiveLiveLocationMessages", is_trait = false },
  { name = "GetActiveSessions", is_trait = false },
  { name = "GetAllPassportElements", is_trait = false },
  { name = "GetApplicationConfig", is_trait = false },
  { name = "GetArchivedStickerSets", is_trait = false },
  { name = "GetAttachedStickerSets", is_trait = false },
  { name = "GetAuthorizationState", is_trait = false },
  { name = "GetBasicGroup", is_trait = false },
  { name = "GetBasicGroupFullInfo", is_trait = false },
  { name = "GetBlockedUsers", is_trait = false },
  { name = "GetCallbackQueryAnswer", is_trait = false },
  { name = "GetChat", is_trait = false },
  { name = "GetChatAdministrators", is_trait = false },
  { name = "GetChatEventLog", is_trait = false },
  { name = "GetChatHistory", is_trait = false },
  { name = "GetChatMember", is_trait = false },
  { name = "GetChatMessageByDate", is_trait = false },
  { name = "GetChatMessageCount", is_trait = false },
  { name = "GetChatNotificationSettingsExceptions", is_trait = false },
  { name = "GetChatPinnedMessage", is_trait = false },
  { name = "GetChatReportSpamState", is_trait = false },
  { name = "GetChats", is_trait = false },
  { name = "GetChatStatisticsUrl", is_trait = false },
  { name = "GetConnectedWebsites", is_trait = false },
  { name = "GetContacts", is_trait = false },
  { name = "GetCountryCode", is_trait = false },
  { name = "GetCreatedPublicChats", is_trait = false },
  { name = "GetCurrentState", is_trait = false },
  { name = "GetDatabaseStatistics", is_trait = false },
  { name = "GetDeepLinkInfo", is_trait = false },
  { name = "GetFavoriteStickers", is_trait = false },
  { name = "GetFile", is_trait = false },
  { name = "GetFileDownloadedPrefixSize", is_trait = false },
  { name = "GetFileExtension", is_trait = false },
  { name = "GetFileMimeType", is_trait = false },
  { name = "GetGameHighScores", is_trait = false },
  { name = "GetGroupsInCommon", is_trait = false },
  { name = "GetImportedContactCount", is_trait = false },
  { name = "GetInlineGameHighScores", is_trait = false },
  { name = "GetInlineQueryResults", is_trait = false },
  { name = "GetInstalledStickerSets", is_trait = false },
  { name = "GetInviteText", is_trait = false },
  { name = "GetLanguagePackInfo", is_trait = false },
  { name = "GetLanguagePackString", is_trait = false },
  { name = "GetLanguagePackStrings", is_trait = false },
  { name = "GetLocalizationTargetInfo", is_trait = false },
  { name = "GetLogStream", is_trait = false },
  { name = "GetLogTags", is_trait = false },
  { name = "GetLogTagVerbosityLevel", is_trait = false },
  { name = "GetLogVerbosityLevel", is_trait = false },
  { name = "GetMapThumbnailFile", is_trait = false },
  { name = "GetMe", is_trait = false },
  { name = "GetMessage", is_trait = false },
  { name = "GetMessageLink", is_trait = false },
  { name = "GetMessageLocally", is_trait = false },
  { name = "GetMessages", is_trait = false },
  { name = "GetNetworkStatistics", is_trait = false },
  { name = "GetOption", is_trait = false },
  { name = "GetPassportAuthorizationForm", is_trait = false },
  { name = "GetPassportAuthorizationFormAvailableElements", is_trait = false },
  { name = "GetPassportElement", is_trait = false },
  { name = "GetPasswordState", is_trait = false },
  { name = "GetPaymentForm", is_trait = false },
  { name = "GetPaymentReceipt", is_trait = false },
  { name = "GetPreferredCountryLanguage", is_trait = false },
  { name = "GetProxies", is_trait = false },
  { name = "GetProxyLink", is_trait = false },
  { name = "GetPublicMessageLink", is_trait = false },
  { name = "GetPushReceiverId", is_trait = false },
  { name = "GetRecentInlineBots", is_trait = false },
  { name = "GetRecentlyVisitedTMeUrls", is_trait = false },
  { name = "GetRecentStickers", is_trait = false },
  { name = "GetRecoveryEmailAddress", is_trait = false },
  { name = "GetRemoteFile", is_trait = false },
  { name = "GetRepliedMessage", is_trait = false },
  { name = "GetSavedAnimations", is_trait = false },
  { name = "GetSavedOrderInfo", is_trait = false },
  { name = "GetScopeNotificationSettings", is_trait = false },
  { name = "GetSecretChat", is_trait = false },
  { name = "GetStickerEmojis", is_trait = false },
  { name = "GetStickers", is_trait = false },
  { name = "GetStickerSet", is_trait = false },
  { name = "GetStorageStatistics", is_trait = false },
  { name = "GetStorageStatisticsFast", is_trait = false },
  { name = "GetSupergroup", is_trait = false },
  { name = "GetSupergroupFullInfo", is_trait = false },
  { name = "GetSupergroupMembers", is_trait = false },
  { name = "GetSupportUser", is_trait = false },
  { name = "GetTemporaryPasswordState", is_trait = false },
  { name = "GetTextEntities", is_trait = false },
  { name = "GetTopChats", is_trait = false },
  { name = "GetTrendingStickerSets", is_trait = false },
  { name = "GetUser", is_trait = false },
  { name = "GetUserFullInfo", is_trait = false },
  { name = "GetUserPrivacySettingRules", is_trait = false },
  { name = "GetUserProfilePhotos", is_trait = false },
  { name = "GetWallpapers", is_trait = false },
  { name = "GetWebPageInstantView", is_trait = false },
  { name = "GetWebPagePreview", is_trait = false },
  { name = "ImportContacts", is_trait = false },
  { name = "JoinChat", is_trait = false },
  { name = "JoinChatByInviteLink", is_trait = false },
  { name = "LeaveChat", is_trait = false },
  { name = "LogOut", is_trait = false },
  { name = "OpenChat", is_trait = false },
  { name = "OpenMessageContent", is_trait = false },
  { name = "OptimizeStorage", is_trait = false },
  { name = "ParseTextEntities", is_trait = false },
  { name = "PinChatMessage", is_trait = false },
  { name = "PingProxy", is_trait = false },
  { name = "ProcessPushNotification", is_trait = false },
  { name = "ReadAllChatMentions", is_trait = false },
  { name = "ReadFilePart", is_trait = false },
  { name = "RecoverAuthenticationPassword", is_trait = false },
  { name = "RecoverPassword", is_trait = false },
  { name = "RegisterDevice", is_trait = false },
  { name = "RemoveContacts", is_trait = false },
  { name = "RemoveFavoriteSticker", is_trait = false },
  { name = "RemoveNotification", is_trait = false },
  { name = "RemoveNotificationGroup", is_trait = false },
  { name = "RemoveProxy", is_trait = false },
  { name = "RemoveRecentHashtag", is_trait = false },
  { name = "RemoveRecentlyFoundChat", is_trait = false },
  { name = "RemoveRecentSticker", is_trait = false },
  { name = "RemoveSavedAnimation", is_trait = false },
  { name = "RemoveStickerFromSet", is_trait = false },
  { name = "RemoveTopChat", is_trait = false },
  { name = "ReorderInstalledStickerSets", is_trait = false },
  { name = "ReportChat", is_trait = false },
  { name = "ReportSupergroupSpam", is_trait = false },
  { name = "RequestAuthenticationPasswordRecovery", is_trait = false },
  { name = "RequestPasswordRecovery", is_trait = false },
  { name = "ResendAuthenticationCode", is_trait = false },
  { name = "ResendChangePhoneNumberCode", is_trait = false },
  { name = "ResendEmailAddressVerificationCode", is_trait = false },
  { name = "ResendPhoneNumberConfirmationCode", is_trait = false },
  { name = "ResendPhoneNumberVerificationCode", is_trait = false },
  { name = "ResendRecoveryEmailAddressCode", is_trait = false },
  { name = "ResetAllNotificationSettings", is_trait = false },
  { name = "ResetNetworkStatistics", is_trait = false },
  { name = "SearchCallMessages", is_trait = false },
  { name = "SearchChatMembers", is_trait = false },
  { name = "SearchChatMessages", is_trait = false },
  { name = "SearchChatRecentLocationMessages", is_trait = false },
  { name = "SearchChats", is_trait = false },
  { name = "SearchChatsOnServer", is_trait = false },
  { name = "SearchContacts", is_trait = false },
  { name = "SearchHashtags", is_trait = false },
  { name = "SearchInstalledStickerSets", is_trait = false },
  { name = "SearchMessages", is_trait = false },
  { name = "SearchPublicChat", is_trait = false },
  { name = "SearchPublicChats", is_trait = false },
  { name = "SearchSecretMessages", is_trait = false },
  { name = "SearchStickers", is_trait = false },
  { name = "SearchStickerSet", is_trait = false },
  { name = "SearchStickerSets", is_trait = false },
  { name = "SendBotStartMessage", is_trait = false },
  { name = "SendCallDebugInformation", is_trait = false },
  { name = "SendCallRating", is_trait = false },
  { name = "SendChatAction", is_trait = false },
  { name = "SendChatScreenshotTakenNotification", is_trait = false },
  { name = "SendChatSetTtlMessage", is_trait = false },
  { name = "SendCustomRequest", is_trait = false },
  { name = "SendEmailAddressVerificationCode", is_trait = false },
  { name = "SendInlineQueryResultMessage", is_trait = false },
  { name = "SendMessage", is_trait = false },
  { name = "SendMessageAlbum", is_trait = false },
  { name = "SendPassportAuthorizationForm", is_trait = false },
  { name = "SendPaymentForm", is_trait = false },
  { name = "SendPhoneNumberConfirmationCode", is_trait = false },
  { name = "SendPhoneNumberVerificationCode", is_trait = false },
  { name = "SetAccountTtl", is_trait = false },
  { name = "SetAlarm", is_trait = false },
  { name = "SetAuthenticationPhoneNumber", is_trait = false },
  { name = "SetBio", is_trait = false },
  { name = "SetBotUpdatesStatus", is_trait = false },
  { name = "SetChatClientData", is_trait = false },
  { name = "SetChatDraftMessage", is_trait = false },
  { name = "SetChatMemberStatus", is_trait = false },
  { name = "SetChatNotificationSettings", is_trait = false },
  { name = "SetChatPhoto", is_trait = false },
  { name = "SetChatTitle", is_trait = false },
  { name = "SetCustomLanguagePack", is_trait = false },
  { name = "SetCustomLanguagePackString", is_trait = false },
  { name = "SetDatabaseEncryptionKey", is_trait = false },
  { name = "SetFileGenerationProgress", is_trait = false },
  { name = "SetGameScore", is_trait = false },
  { name = "SetInlineGameScore", is_trait = false },
  { name = "SetLogStream", is_trait = false },
  { name = "SetLogTagVerbosityLevel", is_trait = false },
  { name = "SetLogVerbosityLevel", is_trait = false },
  { name = "SetName", is_trait = false },
  { name = "SetNetworkType", is_trait = false },
  { name = "SetOption", is_trait = false },
  { name = "SetPassportElement", is_trait = false },
  { name = "SetPassportElementErrors", is_trait = false },
  { name = "SetPassword", is_trait = false },
  { name = "SetPinnedChats", is_trait = false },
  { name = "SetPollAnswer", is_trait = false },
  { name = "SetProfilePhoto", is_trait = false },
  { name = "SetRecoveryEmailAddress", is_trait = false },
  { name = "SetScopeNotificationSettings", is_trait = false },
  { name = "SetStickerPositionInSet", is_trait = false },
  { name = "SetSupergroupDescription", is_trait = false },
  { name = "SetSupergroupStickerSet", is_trait = false },
  { name = "SetSupergroupUsername", is_trait = false },
  { name = "SetTdlibParameters", is_trait = false },
  { name = "SetUsername", is_trait = false },
  { name = "SetUserPrivacySettingRules", is_trait = false },
  { name = "StopPoll", is_trait = false },
  { name = "SynchronizeLanguagePack", is_trait = false },
  { name = "TerminateAllOtherSessions", is_trait = false },
  { name = "TerminateSession", is_trait = false },
  { name = "TestCallBytes", is_trait = false },
  { name = "TestCallEmpty", is_trait = false },
  { name = "TestCallString", is_trait = false },
  { name = "TestCallVectorInt", is_trait = false },
  { name = "TestCallVectorIntObject", is_trait = false },
  { name = "TestCallVectorString", is_trait = false },
  { name = "TestCallVectorStringObject", is_trait = false },
  { name = "TestGetDifference", is_trait = false },
  { name = "TestNetwork", is_trait = false },
  { name = "TestSquareInt", is_trait = false },
  { name = "TestUseError", is_trait = false },
  { name = "TestUseUpdate", is_trait = false },
  { name = "ToggleBasicGroupAdministrators", is_trait = false },
  { name = "ToggleChatDefaultDisableNotification", is_trait = false },
  { name = "ToggleChatIsMarkedAsUnread", is_trait = false },
  { name = "ToggleChatIsPinned", is_trait = false },
  { name = "ToggleSupergroupInvites", is_trait = false },
  { name = "ToggleSupergroupIsAllHistoryAvailable", is_trait = false },
  { name = "ToggleSupergroupSignMessages", is_trait = false },
  { name = "UnblockUser", is_trait = false },
  { name = "UnpinChatMessage", is_trait = false },
  { name = "UpgradeBasicGroupChatToSupergroupChat", is_trait = false },
  { name = "UploadFile", is_trait = false },
  { name = "UploadStickerFile", is_trait = false },
  { name = "ValidateOrderInfo", is_trait = false },
  { name = "ViewMessages", is_trait = false },
  { name = "ViewTrendingStickerSets", is_trait = false },
  { name = "WriteGeneratedFilePart", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "trait"

extra_fns = [

]



[[rtd.Function.supers]]
name = "Object"

[[rtd.Function.supers]]
name = "RObject"
[[rtd.Function.supers]]
name = "Debug"







[rtd.RTDFunctionType]
clz_name = "RTDFunctionType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "AcceptCall", is_trait = false },
  { name = "AcceptTermsOfService", is_trait = false },
  { name = "AddChatMember", is_trait = false },
  { name = "AddChatMembers", is_trait = false },
  { name = "AddCustomServerLanguagePack", is_trait = false },
  { name = "AddFavoriteSticker", is_trait = false },
  { name = "AddLocalMessage", is_trait = false },
  { name = "AddLogMessage", is_trait = false },
  { name = "AddNetworkStatistics", is_trait = false },
  { name = "AddProxy", is_trait = false },
  { name = "AddRecentlyFoundChat", is_trait = false },
  { name = "AddRecentSticker", is_trait = false },
  { name = "AddSavedAnimation", is_trait = false },
  { name = "AddStickerToSet", is_trait = false },
  { name = "AnswerCallbackQuery", is_trait = false },
  { name = "AnswerCustomQuery", is_trait = false },
  { name = "AnswerInlineQuery", is_trait = false },
  { name = "AnswerPreCheckoutQuery", is_trait = false },
  { name = "AnswerShippingQuery", is_trait = false },
  { name = "BlockUser", is_trait = false },
  { name = "CancelDownloadFile", is_trait = false },
  { name = "CancelUploadFile", is_trait = false },
  { name = "ChangeChatReportSpamState", is_trait = false },
  { name = "ChangeImportedContacts", is_trait = false },
  { name = "ChangePhoneNumber", is_trait = false },
  { name = "ChangeStickerSet", is_trait = false },
  { name = "CheckAuthenticationBotToken", is_trait = false },
  { name = "CheckAuthenticationCode", is_trait = false },
  { name = "CheckAuthenticationPassword", is_trait = false },
  { name = "CheckChangePhoneNumberCode", is_trait = false },
  { name = "CheckChatInviteLink", is_trait = false },
  { name = "CheckChatUsername", is_trait = false },
  { name = "CheckDatabaseEncryptionKey", is_trait = false },
  { name = "CheckEmailAddressVerificationCode", is_trait = false },
  { name = "CheckPhoneNumberConfirmationCode", is_trait = false },
  { name = "CheckPhoneNumberVerificationCode", is_trait = false },
  { name = "CheckRecoveryEmailAddressCode", is_trait = false },
  { name = "CleanFileName", is_trait = false },
  { name = "ClearAllDraftMessages", is_trait = false },
  { name = "ClearImportedContacts", is_trait = false },
  { name = "ClearRecentlyFoundChats", is_trait = false },
  { name = "ClearRecentStickers", is_trait = false },
  { name = "Close", is_trait = false },
  { name = "CloseChat", is_trait = false },
  { name = "CloseSecretChat", is_trait = false },
  { name = "CreateBasicGroupChat", is_trait = false },
  { name = "CreateCall", is_trait = false },
  { name = "CreateNewBasicGroupChat", is_trait = false },
  { name = "CreateNewSecretChat", is_trait = false },
  { name = "CreateNewStickerSet", is_trait = false },
  { name = "CreateNewSupergroupChat", is_trait = false },
  { name = "CreatePrivateChat", is_trait = false },
  { name = "CreateSecretChat", is_trait = false },
  { name = "CreateSupergroupChat", is_trait = false },
  { name = "CreateTemporaryPassword", is_trait = false },
  { name = "DeleteAccount", is_trait = false },
  { name = "DeleteChatHistory", is_trait = false },
  { name = "DeleteChatMessagesFromUser", is_trait = false },
  { name = "DeleteChatReplyMarkup", is_trait = false },
  { name = "DeleteFile", is_trait = false },
  { name = "DeleteLanguagePack", is_trait = false },
  { name = "DeleteMessages", is_trait = false },
  { name = "DeletePassportElement", is_trait = false },
  { name = "DeleteProfilePhoto", is_trait = false },
  { name = "DeleteSavedCredentials", is_trait = false },
  { name = "DeleteSavedOrderInfo", is_trait = false },
  { name = "DeleteSupergroup", is_trait = false },
  { name = "Destroy", is_trait = false },
  { name = "DisableProxy", is_trait = false },
  { name = "DiscardCall", is_trait = false },
  { name = "DisconnectAllWebsites", is_trait = false },
  { name = "DisconnectWebsite", is_trait = false },
  { name = "DownloadFile", is_trait = false },
  { name = "EditCustomLanguagePackInfo", is_trait = false },
  { name = "EditInlineMessageCaption", is_trait = false },
  { name = "EditInlineMessageLiveLocation", is_trait = false },
  { name = "EditInlineMessageMedia", is_trait = false },
  { name = "EditInlineMessageReplyMarkup", is_trait = false },
  { name = "EditInlineMessageText", is_trait = false },
  { name = "EditMessageCaption", is_trait = false },
  { name = "EditMessageLiveLocation", is_trait = false },
  { name = "EditMessageMedia", is_trait = false },
  { name = "EditMessageReplyMarkup", is_trait = false },
  { name = "EditMessageText", is_trait = false },
  { name = "EditProxy", is_trait = false },
  { name = "EnableProxy", is_trait = false },
  { name = "FinishFileGeneration", is_trait = false },
  { name = "ForwardMessages", is_trait = false },
  { name = "GenerateChatInviteLink", is_trait = false },
  { name = "GetAccountTtl", is_trait = false },
  { name = "GetActiveLiveLocationMessages", is_trait = false },
  { name = "GetActiveSessions", is_trait = false },
  { name = "GetAllPassportElements", is_trait = false },
  { name = "GetApplicationConfig", is_trait = false },
  { name = "GetArchivedStickerSets", is_trait = false },
  { name = "GetAttachedStickerSets", is_trait = false },
  { name = "GetAuthorizationState", is_trait = false },
  { name = "GetBasicGroup", is_trait = false },
  { name = "GetBasicGroupFullInfo", is_trait = false },
  { name = "GetBlockedUsers", is_trait = false },
  { name = "GetCallbackQueryAnswer", is_trait = false },
  { name = "GetChat", is_trait = false },
  { name = "GetChatAdministrators", is_trait = false },
  { name = "GetChatEventLog", is_trait = false },
  { name = "GetChatHistory", is_trait = false },
  { name = "GetChatMember", is_trait = false },
  { name = "GetChatMessageByDate", is_trait = false },
  { name = "GetChatMessageCount", is_trait = false },
  { name = "GetChatNotificationSettingsExceptions", is_trait = false },
  { name = "GetChatPinnedMessage", is_trait = false },
  { name = "GetChatReportSpamState", is_trait = false },
  { name = "GetChats", is_trait = false },
  { name = "GetChatStatisticsUrl", is_trait = false },
  { name = "GetConnectedWebsites", is_trait = false },
  { name = "GetContacts", is_trait = false },
  { name = "GetCountryCode", is_trait = false },
  { name = "GetCreatedPublicChats", is_trait = false },
  { name = "GetCurrentState", is_trait = false },
  { name = "GetDatabaseStatistics", is_trait = false },
  { name = "GetDeepLinkInfo", is_trait = false },
  { name = "GetFavoriteStickers", is_trait = false },
  { name = "GetFile", is_trait = false },
  { name = "GetFileDownloadedPrefixSize", is_trait = false },
  { name = "GetFileExtension", is_trait = false },
  { name = "GetFileMimeType", is_trait = false },
  { name = "GetGameHighScores", is_trait = false },
  { name = "GetGroupsInCommon", is_trait = false },
  { name = "GetImportedContactCount", is_trait = false },
  { name = "GetInlineGameHighScores", is_trait = false },
  { name = "GetInlineQueryResults", is_trait = false },
  { name = "GetInstalledStickerSets", is_trait = false },
  { name = "GetInviteText", is_trait = false },
  { name = "GetLanguagePackInfo", is_trait = false },
  { name = "GetLanguagePackString", is_trait = false },
  { name = "GetLanguagePackStrings", is_trait = false },
  { name = "GetLocalizationTargetInfo", is_trait = false },
  { name = "GetLogStream", is_trait = false },
  { name = "GetLogTags", is_trait = false },
  { name = "GetLogTagVerbosityLevel", is_trait = false },
  { name = "GetLogVerbosityLevel", is_trait = false },
  { name = "GetMapThumbnailFile", is_trait = false },
  { name = "GetMe", is_trait = false },
  { name = "GetMessage", is_trait = false },
  { name = "GetMessageLink", is_trait = false },
  { name = "GetMessageLocally", is_trait = false },
  { name = "GetMessages", is_trait = false },
  { name = "GetNetworkStatistics", is_trait = false },
  { name = "GetOption", is_trait = false },
  { name = "GetPassportAuthorizationForm", is_trait = false },
  { name = "GetPassportAuthorizationFormAvailableElements", is_trait = false },
  { name = "GetPassportElement", is_trait = false },
  { name = "GetPasswordState", is_trait = false },
  { name = "GetPaymentForm", is_trait = false },
  { name = "GetPaymentReceipt", is_trait = false },
  { name = "GetPreferredCountryLanguage", is_trait = false },
  { name = "GetProxies", is_trait = false },
  { name = "GetProxyLink", is_trait = false },
  { name = "GetPublicMessageLink", is_trait = false },
  { name = "GetPushReceiverId", is_trait = false },
  { name = "GetRecentInlineBots", is_trait = false },
  { name = "GetRecentlyVisitedTMeUrls", is_trait = false },
  { name = "GetRecentStickers", is_trait = false },
  { name = "GetRecoveryEmailAddress", is_trait = false },
  { name = "GetRemoteFile", is_trait = false },
  { name = "GetRepliedMessage", is_trait = false },
  { name = "GetSavedAnimations", is_trait = false },
  { name = "GetSavedOrderInfo", is_trait = false },
  { name = "GetScopeNotificationSettings", is_trait = false },
  { name = "GetSecretChat", is_trait = false },
  { name = "GetStickerEmojis", is_trait = false },
  { name = "GetStickers", is_trait = false },
  { name = "GetStickerSet", is_trait = false },
  { name = "GetStorageStatistics", is_trait = false },
  { name = "GetStorageStatisticsFast", is_trait = false },
  { name = "GetSupergroup", is_trait = false },
  { name = "GetSupergroupFullInfo", is_trait = false },
  { name = "GetSupergroupMembers", is_trait = false },
  { name = "GetSupportUser", is_trait = false },
  { name = "GetTemporaryPasswordState", is_trait = false },
  { name = "GetTextEntities", is_trait = false },
  { name = "GetTopChats", is_trait = false },
  { name = "GetTrendingStickerSets", is_trait = false },
  { name = "GetUser", is_trait = false },
  { name = "GetUserFullInfo", is_trait = false },
  { name = "GetUserPrivacySettingRules", is_trait = false },
  { name = "GetUserProfilePhotos", is_trait = false },
  { name = "GetWallpapers", is_trait = false },
  { name = "GetWebPageInstantView", is_trait = false },
  { name = "GetWebPagePreview", is_trait = false },
  { name = "ImportContacts", is_trait = false },
  { name = "JoinChat", is_trait = false },
  { name = "JoinChatByInviteLink", is_trait = false },
  { name = "LeaveChat", is_trait = false },
  { name = "LogOut", is_trait = false },
  { name = "OpenChat", is_trait = false },
  { name = "OpenMessageContent", is_trait = false },
  { name = "OptimizeStorage", is_trait = false },
  { name = "ParseTextEntities", is_trait = false },
  { name = "PinChatMessage", is_trait = false },
  { name = "PingProxy", is_trait = false },
  { name = "ProcessPushNotification", is_trait = false },
  { name = "ReadAllChatMentions", is_trait = false },
  { name = "ReadFilePart", is_trait = false },
  { name = "RecoverAuthenticationPassword", is_trait = false },
  { name = "RecoverPassword", is_trait = false },
  { name = "RegisterDevice", is_trait = false },
  { name = "RemoveContacts", is_trait = false },
  { name = "RemoveFavoriteSticker", is_trait = false },
  { name = "RemoveNotification", is_trait = false },
  { name = "RemoveNotificationGroup", is_trait = false },
  { name = "RemoveProxy", is_trait = false },
  { name = "RemoveRecentHashtag", is_trait = false },
  { name = "RemoveRecentlyFoundChat", is_trait = false },
  { name = "RemoveRecentSticker", is_trait = false },
  { name = "RemoveSavedAnimation", is_trait = false },
  { name = "RemoveStickerFromSet", is_trait = false },
  { name = "RemoveTopChat", is_trait = false },
  { name = "ReorderInstalledStickerSets", is_trait = false },
  { name = "ReportChat", is_trait = false },
  { name = "ReportSupergroupSpam", is_trait = false },
  { name = "RequestAuthenticationPasswordRecovery", is_trait = false },
  { name = "RequestPasswordRecovery", is_trait = false },
  { name = "ResendAuthenticationCode", is_trait = false },
  { name = "ResendChangePhoneNumberCode", is_trait = false },
  { name = "ResendEmailAddressVerificationCode", is_trait = false },
  { name = "ResendPhoneNumberConfirmationCode", is_trait = false },
  { name = "ResendPhoneNumberVerificationCode", is_trait = false },
  { name = "ResendRecoveryEmailAddressCode", is_trait = false },
  { name = "ResetAllNotificationSettings", is_trait = false },
  { name = "ResetNetworkStatistics", is_trait = false },
  { name = "SearchCallMessages", is_trait = false },
  { name = "SearchChatMembers", is_trait = false },
  { name = "SearchChatMessages", is_trait = false },
  { name = "SearchChatRecentLocationMessages", is_trait = false },
  { name = "SearchChats", is_trait = false },
  { name = "SearchChatsOnServer", is_trait = false },
  { name = "SearchContacts", is_trait = false },
  { name = "SearchHashtags", is_trait = false },
  { name = "SearchInstalledStickerSets", is_trait = false },
  { name = "SearchMessages", is_trait = false },
  { name = "SearchPublicChat", is_trait = false },
  { name = "SearchPublicChats", is_trait = false },
  { name = "SearchSecretMessages", is_trait = false },
  { name = "SearchStickers", is_trait = false },
  { name = "SearchStickerSet", is_trait = false },
  { name = "SearchStickerSets", is_trait = false },
  { name = "SendBotStartMessage", is_trait = false },
  { name = "SendCallDebugInformation", is_trait = false },
  { name = "SendCallRating", is_trait = false },
  { name = "SendChatAction", is_trait = false },
  { name = "SendChatScreenshotTakenNotification", is_trait = false },
  { name = "SendChatSetTtlMessage", is_trait = false },
  { name = "SendCustomRequest", is_trait = false },
  { name = "SendEmailAddressVerificationCode", is_trait = false },
  { name = "SendInlineQueryResultMessage", is_trait = false },
  { name = "SendMessage", is_trait = false },
  { name = "SendMessageAlbum", is_trait = false },
  { name = "SendPassportAuthorizationForm", is_trait = false },
  { name = "SendPaymentForm", is_trait = false },
  { name = "SendPhoneNumberConfirmationCode", is_trait = false },
  { name = "SendPhoneNumberVerificationCode", is_trait = false },
  { name = "SetAccountTtl", is_trait = false },
  { name = "SetAlarm", is_trait = false },
  { name = "SetAuthenticationPhoneNumber", is_trait = false },
  { name = "SetBio", is_trait = false },
  { name = "SetBotUpdatesStatus", is_trait = false },
  { name = "SetChatClientData", is_trait = false },
  { name = "SetChatDraftMessage", is_trait = false },
  { name = "SetChatMemberStatus", is_trait = false },
  { name = "SetChatNotificationSettings", is_trait = false },
  { name = "SetChatPhoto", is_trait = false },
  { name = "SetChatTitle", is_trait = false },
  { name = "SetCustomLanguagePack", is_trait = false },
  { name = "SetCustomLanguagePackString", is_trait = false },
  { name = "SetDatabaseEncryptionKey", is_trait = false },
  { name = "SetFileGenerationProgress", is_trait = false },
  { name = "SetGameScore", is_trait = false },
  { name = "SetInlineGameScore", is_trait = false },
  { name = "SetLogStream", is_trait = false },
  { name = "SetLogTagVerbosityLevel", is_trait = false },
  { name = "SetLogVerbosityLevel", is_trait = false },
  { name = "SetName", is_trait = false },
  { name = "SetNetworkType", is_trait = false },
  { name = "SetOption", is_trait = false },
  { name = "SetPassportElement", is_trait = false },
  { name = "SetPassportElementErrors", is_trait = false },
  { name = "SetPassword", is_trait = false },
  { name = "SetPinnedChats", is_trait = false },
  { name = "SetPollAnswer", is_trait = false },
  { name = "SetProfilePhoto", is_trait = false },
  { name = "SetRecoveryEmailAddress", is_trait = false },
  { name = "SetScopeNotificationSettings", is_trait = false },
  { name = "SetStickerPositionInSet", is_trait = false },
  { name = "SetSupergroupDescription", is_trait = false },
  { name = "SetSupergroupStickerSet", is_trait = false },
  { name = "SetSupergroupUsername", is_trait = false },
  { name = "SetTdlibParameters", is_trait = false },
  { name = "SetUsername", is_trait = false },
  { name = "SetUserPrivacySettingRules", is_trait = false },
  { name = "StopPoll", is_trait = false },
  { name = "SynchronizeLanguagePack", is_trait = false },
  { name = "TerminateAllOtherSessions", is_trait = false },
  { name = "TerminateSession", is_trait = false },
  { name = "TestCallBytes", is_trait = false },
  { name = "TestCallEmpty", is_trait = false },
  { name = "TestCallString", is_trait = false },
  { name = "TestCallVectorInt", is_trait = false },
  { name = "TestCallVectorIntObject", is_trait = false },
  { name = "TestCallVectorString", is_trait = false },
  { name = "TestCallVectorStringObject", is_trait = false },
  { name = "TestGetDifference", is_trait = false },
  { name = "TestNetwork", is_trait = false },
  { name = "TestSquareInt", is_trait = false },
  { name = "TestUseError", is_trait = false },
  { name = "TestUseUpdate", is_trait = false },
  { name = "ToggleBasicGroupAdministrators", is_trait = false },
  { name = "ToggleChatDefaultDisableNotification", is_trait = false },
  { name = "ToggleChatIsMarkedAsUnread", is_trait = false },
  { name = "ToggleChatIsPinned", is_trait = false },
  { name = "ToggleSupergroupInvites", is_trait = false },
  { name = "ToggleSupergroupIsAllHistoryAvailable", is_trait = false },
  { name = "ToggleSupergroupSignMessages", is_trait = false },
  { name = "UnblockUser", is_trait = false },
  { name = "UnpinChatMessage", is_trait = false },
  { name = "UpgradeBasicGroupChatToSupergroupChat", is_trait = false },
  { name = "UploadFile", is_trait = false },
  { name = "UploadStickerFile", is_trait = false },
  { name = "ValidateOrderInfo", is_trait = false },
  { name = "ViewMessages", is_trait = false },
  { name = "ViewTrendingStickerSets", is_trait = false },
  { name = "WriteGeneratedFilePart", is_trait = false },
  
]
fields_size = 331
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDFunctionType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDFunctionType)(text.as_ref()) }
}
""",
]




[rtd.AccountTtl]
origin_name = "accountTtl"
clz_name = "AccountTtl"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the period of inactivity after which the current user's account will automatically be deleted.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "days", class = "Option<i32>", description = """ Number of days of inactivity before the account will be flagged for deletion; should range from 30-366 days. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AccountTtl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AccountTtl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AccountTtl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "accountTtl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AccountTtl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Address]
origin_name = "address"
clz_name = "Address"
is_private = false
clz_is_trait = false
clz_description = """ Describes an address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "country_code", class = "Option<String>", description = """ A two-letter ISO 3166-1 alpha-2 country code. """, tags = [  ] },
  { name = "state", class = "Option<String>", description = """ State, if applicable. """, tags = [  ] },
  { name = "city", class = "Option<String>", description = """ City. """, tags = [  ] },
  { name = "street_line1", class = "Option<String>", description = """ First line of the address. """, tags = [  ] },
  { name = "street_line2", class = "Option<String>", description = """ Second line of the address. """, tags = [  ] },
  { name = "postal_code", class = "Option<String>", description = """ Address postal code. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Address {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Address.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Address.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "address" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Address """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Animation]
origin_name = "animation"
clz_name = "Animation"
is_private = false
clz_is_trait = false
clz_description = """ Describes an animation file. The animation must be encoded in GIF or MPEG4 format.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the animation, in seconds; as defined by the sender. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Width of the animation. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Height of the animation. """, tags = [  ] },
  { name = "file_name", class = "Option<String>", description = """ Original name of the file; as defined by the sender. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the file, usually "image/gif" or "video/mp4". """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Animation thumbnail; may be null. """, tags = [  ] },
  { name = "animation", class = "Option<File>", description = """ File containing the animation. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Animation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Animation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Animation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "animation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Animation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Animations]
origin_name = "animations"
clz_name = "Animations"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of animations.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animations", class = "Option<Vec<Animation>>", description = """ List of animations. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Animations {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Animations.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Animations.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "animations" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Animations """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Audio]
origin_name = "audio"
clz_name = "Audio"
is_private = false
clz_is_trait = false
clz_description = """ Describes an audio file. Audio is usually in MP3 format.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the audio, in seconds; as defined by the sender. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the audio; as defined by the sender. """, tags = [  ] },
  { name = "performer", class = "Option<String>", description = """ Performer of the audio; as defined by the sender. """, tags = [  ] },
  { name = "file_name", class = "Option<String>", description = """ Original name of the file; as defined by the sender. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ The MIME type of the file; as defined by the sender. """, tags = [  ] },
  { name = "album_cover_thumbnail", class = "Option<PhotoSize>", description = """ The thumbnail of the album cover; as defined by the sender. The full size thumbnail should be extracted from the downloaded file; may be null. """, tags = [  ] },
  { name = "audio", class = "Option<File>", description = """ File containing the audio. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Audio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Audio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Audio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "audio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Audio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.AuthenticationCodeInfo]
origin_name = "authenticationCodeInfo"
clz_name = "AuthenticationCodeInfo"
is_private = false
clz_is_trait = false
clz_description = """ Information about the authentication code that was sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ A phone number that is being authenticated. """, tags = [  ] },
  { name = "type_", class = "Option<Box<AuthenticationCodeType>>", description = """ Describes the way the code was sent to the user. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "next_type", class = "Option<Box<AuthenticationCodeType>>", description = """ Describes the way the next code will be sent to the user; may be null. """, tags = [  ] },
  { name = "timeout", class = "Option<i32>", description = """ Timeout before the code should be re-sent, in seconds. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthenticationCodeInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AuthenticationCodeInfo {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AuthenticationCodeInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthenticationCodeInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authenticationCodeInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthenticationCodeInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.AuthenticationCodeType]
origin_name = "AuthenticationCodeType"
clz_name = "AuthenticationCodeType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Provides information about the method by which an authentication code is delivered to the user.  """
has_subclasses = true
sub_classes = [
  { name = "AuthenticationCodeTypeCall", is_trait = false },
  { name = "AuthenticationCodeTypeFlashCall", is_trait = false },
  { name = "AuthenticationCodeTypeSms", is_trait = false },
  { name = "AuthenticationCodeTypeTelegramMessage", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl AuthenticationCodeType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<AuthenticationCodeType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AuthenticationCodeType.supers]]
name = "Object"

[[rtd.AuthenticationCodeType.supers]]
name = "RObject"
[[rtd.AuthenticationCodeType.supers]]
name = "Debug"







[rtd.RTDAuthenticationCodeTypeType]
clz_name = "RTDAuthenticationCodeTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "AuthenticationCodeTypeCall", is_trait = false },
  { name = "AuthenticationCodeTypeFlashCall", is_trait = false },
  { name = "AuthenticationCodeTypeSms", is_trait = false },
  { name = "AuthenticationCodeTypeTelegramMessage", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDAuthenticationCodeTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDAuthenticationCodeTypeType)(text.as_ref()) }
}
""",
]




[rtd.AuthenticationCodeTypeTelegramMessage]
origin_name = "authenticationCodeTypeTelegramMessage"
clz_name = "AuthenticationCodeTypeTelegramMessage"
is_private = false
clz_is_trait = false
clz_description = """ An authentication code is delivered via a private Telegram message, which can be viewed in another client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "length", class = "Option<i32>", description = """ Length of the code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthenticationCodeTypeTelegramMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthenticationCodeTypeTelegramMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthenticationCodeTypeTelegramMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authenticationCodeTypeTelegramMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthenticationCodeTypeTelegramMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthenticationCodeTypeTelegramMessage.supers]]
name = "AuthenticationCodeType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthenticationCodeTypeSms]
origin_name = "authenticationCodeTypeSms"
clz_name = "AuthenticationCodeTypeSms"
is_private = false
clz_is_trait = false
clz_description = """ An authentication code is delivered via an SMS message to the specified phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "length", class = "Option<i32>", description = """ Length of the code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthenticationCodeTypeSms {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthenticationCodeTypeSms.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthenticationCodeTypeSms.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authenticationCodeTypeSms" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthenticationCodeTypeSms """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthenticationCodeTypeSms.supers]]
name = "AuthenticationCodeType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthenticationCodeTypeCall]
origin_name = "authenticationCodeTypeCall"
clz_name = "AuthenticationCodeTypeCall"
is_private = false
clz_is_trait = false
clz_description = """ An authentication code is delivered via a phone call to the specified phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "length", class = "Option<i32>", description = """ Length of the code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthenticationCodeTypeCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthenticationCodeTypeCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthenticationCodeTypeCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authenticationCodeTypeCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthenticationCodeTypeCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthenticationCodeTypeCall.supers]]
name = "AuthenticationCodeType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthenticationCodeTypeFlashCall]
origin_name = "authenticationCodeTypeFlashCall"
clz_name = "AuthenticationCodeTypeFlashCall"
is_private = false
clz_is_trait = false
clz_description = """ An authentication code is delivered by an immediately cancelled call to the specified phone number. The number from which the call was made is the code.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "pattern", class = "Option<String>", description = """ Pattern of the phone number from which the call will be made. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthenticationCodeTypeFlashCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthenticationCodeTypeFlashCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthenticationCodeTypeFlashCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authenticationCodeTypeFlashCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthenticationCodeTypeFlashCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthenticationCodeTypeFlashCall.supers]]
name = "AuthenticationCodeType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationState]
origin_name = "AuthorizationState"
clz_name = "AuthorizationState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the current authorization state of the client.  """
has_subclasses = true
sub_classes = [
  { name = "AuthorizationStateClosed", is_trait = false },
  { name = "AuthorizationStateClosing", is_trait = false },
  { name = "AuthorizationStateLoggingOut", is_trait = false },
  { name = "AuthorizationStateReady", is_trait = false },
  { name = "AuthorizationStateWaitCode", is_trait = false },
  { name = "AuthorizationStateWaitEncryptionKey", is_trait = false },
  { name = "AuthorizationStateWaitPassword", is_trait = false },
  { name = "AuthorizationStateWaitPhoneNumber", is_trait = false },
  { name = "AuthorizationStateWaitTdlibParameters", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl AuthorizationState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<AuthorizationState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AuthorizationState.supers]]
name = "Object"

[[rtd.AuthorizationState.supers]]
name = "RObject"
[[rtd.AuthorizationState.supers]]
name = "Debug"







[rtd.RTDAuthorizationStateType]
clz_name = "RTDAuthorizationStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "AuthorizationStateClosed", is_trait = false },
  { name = "AuthorizationStateClosing", is_trait = false },
  { name = "AuthorizationStateLoggingOut", is_trait = false },
  { name = "AuthorizationStateReady", is_trait = false },
  { name = "AuthorizationStateWaitCode", is_trait = false },
  { name = "AuthorizationStateWaitEncryptionKey", is_trait = false },
  { name = "AuthorizationStateWaitPassword", is_trait = false },
  { name = "AuthorizationStateWaitPhoneNumber", is_trait = false },
  { name = "AuthorizationStateWaitTdlibParameters", is_trait = false },
  
]
fields_size = 9
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDAuthorizationStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDAuthorizationStateType)(text.as_ref()) }
}
""",
]




[rtd.AuthorizationStateWaitTdlibParameters]
origin_name = "authorizationStateWaitTdlibParameters"
clz_name = "AuthorizationStateWaitTdlibParameters"
is_private = false
clz_is_trait = false
clz_description = """ TDLib needs TdlibParameters for initialization.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateWaitTdlibParameters {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateWaitTdlibParameters.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateWaitTdlibParameters.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateWaitTdlibParameters" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateWaitTdlibParameters """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateWaitTdlibParameters.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateWaitEncryptionKey]
origin_name = "authorizationStateWaitEncryptionKey"
clz_name = "AuthorizationStateWaitEncryptionKey"
is_private = false
clz_is_trait = false
clz_description = """ TDLib needs an encryption key to decrypt the local database.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_encrypted", class = "Option<bool>", description = """ True, if the database is currently encrypted. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateWaitEncryptionKey {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateWaitEncryptionKey.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateWaitEncryptionKey.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateWaitEncryptionKey" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateWaitEncryptionKey """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateWaitEncryptionKey.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateWaitPhoneNumber]
origin_name = "authorizationStateWaitPhoneNumber"
clz_name = "AuthorizationStateWaitPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ TDLib needs the user's phone number to authorize.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateWaitPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateWaitPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateWaitPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateWaitPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateWaitPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateWaitPhoneNumber.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateWaitCode]
origin_name = "authorizationStateWaitCode"
clz_name = "AuthorizationStateWaitCode"
is_private = false
clz_is_trait = false
clz_description = """ TDLib needs the user's authentication code to finalize authorization.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_registered", class = "Option<bool>", description = """ True, if the user is already registered. """, tags = [  ] },
  { name = "terms_of_service", class = "Option<TermsOfService>", description = """ Telegram terms of service, which should be accepted before user can continue registration; may be null. """, tags = [  ] },
  { name = "code_info", class = "Option<AuthenticationCodeInfo>", description = """ Information about the authorization code that was sent. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateWaitCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateWaitCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateWaitCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateWaitCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateWaitCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateWaitCode.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateWaitPassword]
origin_name = "authorizationStateWaitPassword"
clz_name = "AuthorizationStateWaitPassword"
is_private = false
clz_is_trait = false
clz_description = """ The user has been authorized, but needs to enter a password to start using the application.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password_hint", class = "Option<String>", description = """ Hint for the password; may be empty. """, tags = [  ] },
  { name = "has_recovery_email_address", class = "Option<bool>", description = """ True if a recovery email address has been set up. """, tags = [  ] },
  { name = "recovery_email_address_pattern", class = "Option<String>", description = """ Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateWaitPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateWaitPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateWaitPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateWaitPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateWaitPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateWaitPassword.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateReady]
origin_name = "authorizationStateReady"
clz_name = "AuthorizationStateReady"
is_private = false
clz_is_trait = false
clz_description = """ The user has been successfully authorized. TDLib is now ready to answer queries.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateReady {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateReady.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateReady.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateReady" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateReady """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateReady.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateLoggingOut]
origin_name = "authorizationStateLoggingOut"
clz_name = "AuthorizationStateLoggingOut"
is_private = false
clz_is_trait = false
clz_description = """ The user is currently logging out.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateLoggingOut {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateLoggingOut.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateLoggingOut.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateLoggingOut" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateLoggingOut """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateLoggingOut.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateClosing]
origin_name = "authorizationStateClosing"
clz_name = "AuthorizationStateClosing"
is_private = false
clz_is_trait = false
clz_description = """ TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateClosing {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateClosing.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateClosing.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateClosing" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateClosing """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateClosing.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.AuthorizationStateClosed]
origin_name = "authorizationStateClosed"
clz_name = "AuthorizationStateClosed"
is_private = false
clz_is_trait = false
clz_description = """ TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one should create a new instance of the TDLib client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AuthorizationStateClosed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AuthorizationStateClosed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AuthorizationStateClosed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "authorizationStateClosed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AuthorizationStateClosed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AuthorizationStateClosed.supers]]
name = "AuthorizationState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.BasicGroup]
origin_name = "basicGroup"
clz_name = "BasicGroup"
is_private = false
clz_is_trait = false
clz_description = """ Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Group identifier. """, tags = [  ] },
  { name = "member_count", class = "Option<i32>", description = """ Number of members in the group. """, tags = [  ] },
  { name = "status", class = "Option<Box<ChatMemberStatus>>", description = """ Status of the current user in the group. """, tags = [  ] },
  { name = "everyone_is_administrator", class = "Option<bool>", description = """ True, if all members have been granted administrator rights in the group. """, tags = [  ] },
  { name = "is_active", class = "Option<bool>", description = """ True, if the group is active. """, tags = [  ] },
  { name = "upgraded_to_supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup to which this group was upgraded; 0 if none. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl BasicGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for BasicGroup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.BasicGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.BasicGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "basicGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::BasicGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.BasicGroupFullInfo]
origin_name = "basicGroupFullInfo"
clz_name = "BasicGroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains full information about a basic group.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "creator_user_id", class = "Option<i32>", description = """ User identifier of the creator of the group; 0 if unknown. """, tags = [  ] },
  { name = "members", class = "Option<Vec<ChatMember>>", description = """ Group members. """, tags = [  ] },
  { name = "invite_link", class = "Option<String>", description = """ Invite link for this group; available only for the group creator and only after it has been generated at least once. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl BasicGroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.BasicGroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.BasicGroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "basicGroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::BasicGroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.BotCommand]
origin_name = "botCommand"
clz_name = "BotCommand"
is_private = false
clz_is_trait = false
clz_description = """ Represents commands supported by a bot.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "command", class = "Option<String>", description = """ Text of the bot command. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Description of the bot command. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl BotCommand {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.BotCommand.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.BotCommand.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "botCommand" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::BotCommand """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.BotInfo]
origin_name = "botInfo"
clz_name = "BotInfo"
is_private = false
clz_is_trait = false
clz_description = """ Provides information about a bot and its supported commands.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "description", class = "Option<String>", description = """ Long description shown on the user info page. """, tags = [  ] },
  { name = "commands", class = "Option<Vec<BotCommand>>", description = """ A list of commands supported by the bot. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl BotInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.BotInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.BotInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "botInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::BotInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Call]
origin_name = "call"
clz_name = "Call"
is_private = false
clz_is_trait = false
clz_description = """ Describes a call.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Call identifier, not persistent. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Peer user identifier. """, tags = [  ] },
  { name = "is_outgoing", class = "Option<bool>", description = """ True, if the call is outgoing. """, tags = [  ] },
  { name = "state", class = "Option<Box<CallState>>", description = """ Call state. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Call {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Call {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Call.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Call.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "call" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Call """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CallConnection]
origin_name = "callConnection"
clz_name = "CallConnection"
is_private = false
clz_is_trait = false
clz_description = """ Describes the address of UDP reflectors.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Reflector identifier. """, tags = [  ] },
  { name = "ip", class = "Option<String>", description = """ IPv4 reflector address. """, tags = [  ] },
  { name = "ipv6", class = "Option<String>", description = """ IPv6 reflector address. """, tags = [  ] },
  { name = "port", class = "Option<i32>", description = """ Reflector port number. """, tags = [  ] },
  { name = "peer_tag", class = "Option<String>", description = """ Connection peer tag. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallConnection {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallConnection.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallConnection.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callConnection" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallConnection """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CallDiscardReason]
origin_name = "CallDiscardReason"
clz_name = "CallDiscardReason"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the reason why a call was discarded.  """
has_subclasses = true
sub_classes = [
  { name = "CallDiscardReasonDeclined", is_trait = false },
  { name = "CallDiscardReasonDisconnected", is_trait = false },
  { name = "CallDiscardReasonEmpty", is_trait = false },
  { name = "CallDiscardReasonHungUp", is_trait = false },
  { name = "CallDiscardReasonMissed", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl CallDiscardReason {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<CallDiscardReason> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.CallDiscardReason.supers]]
name = "Object"

[[rtd.CallDiscardReason.supers]]
name = "RObject"
[[rtd.CallDiscardReason.supers]]
name = "Debug"







[rtd.RTDCallDiscardReasonType]
clz_name = "RTDCallDiscardReasonType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "CallDiscardReasonDeclined", is_trait = false },
  { name = "CallDiscardReasonDisconnected", is_trait = false },
  { name = "CallDiscardReasonEmpty", is_trait = false },
  { name = "CallDiscardReasonHungUp", is_trait = false },
  { name = "CallDiscardReasonMissed", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDCallDiscardReasonType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDCallDiscardReasonType)(text.as_ref()) }
}
""",
]




[rtd.CallDiscardReasonEmpty]
origin_name = "callDiscardReasonEmpty"
clz_name = "CallDiscardReasonEmpty"
is_private = false
clz_is_trait = false
clz_description = """ The call wasn't discarded, or the reason is unknown.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallDiscardReasonEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallDiscardReasonEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallDiscardReasonEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callDiscardReasonEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallDiscardReasonEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallDiscardReasonEmpty.supers]]
name = "CallDiscardReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallDiscardReasonMissed]
origin_name = "callDiscardReasonMissed"
clz_name = "CallDiscardReasonMissed"
is_private = false
clz_is_trait = false
clz_description = """ The call was ended before the conversation started. It was cancelled by the caller or missed by the other party.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallDiscardReasonMissed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallDiscardReasonMissed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallDiscardReasonMissed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callDiscardReasonMissed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallDiscardReasonMissed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallDiscardReasonMissed.supers]]
name = "CallDiscardReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallDiscardReasonDeclined]
origin_name = "callDiscardReasonDeclined"
clz_name = "CallDiscardReasonDeclined"
is_private = false
clz_is_trait = false
clz_description = """ The call was ended before the conversation started. It was declined by the other party.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallDiscardReasonDeclined {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallDiscardReasonDeclined.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallDiscardReasonDeclined.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callDiscardReasonDeclined" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallDiscardReasonDeclined """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallDiscardReasonDeclined.supers]]
name = "CallDiscardReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallDiscardReasonDisconnected]
origin_name = "callDiscardReasonDisconnected"
clz_name = "CallDiscardReasonDisconnected"
is_private = false
clz_is_trait = false
clz_description = """ The call was ended during the conversation because the users were disconnected.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallDiscardReasonDisconnected {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallDiscardReasonDisconnected.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallDiscardReasonDisconnected.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callDiscardReasonDisconnected" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallDiscardReasonDisconnected """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallDiscardReasonDisconnected.supers]]
name = "CallDiscardReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallDiscardReasonHungUp]
origin_name = "callDiscardReasonHungUp"
clz_name = "CallDiscardReasonHungUp"
is_private = false
clz_is_trait = false
clz_description = """ The call was ended because one of the parties hung up.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallDiscardReasonHungUp {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallDiscardReasonHungUp.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallDiscardReasonHungUp.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callDiscardReasonHungUp" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallDiscardReasonHungUp """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallDiscardReasonHungUp.supers]]
name = "CallDiscardReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallId]
origin_name = "callId"
clz_name = "CallId"
is_private = false
clz_is_trait = false
clz_description = """ Contains the call identifier.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallId {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallId.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallId.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callId" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallId """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CallProtocol]
origin_name = "callProtocol"
clz_name = "CallProtocol"
is_private = false
clz_is_trait = false
clz_description = """ Specifies the supported call protocols.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "udp_p2p", class = "Option<bool>", description = """ True, if UDP peer-to-peer connections are supported. """, tags = [  ] },
  { name = "udp_reflector", class = "Option<bool>", description = """ True, if connection through UDP reflectors is supported. """, tags = [  ] },
  { name = "min_layer", class = "Option<i32>", description = """ Minimum supported API layer; use 65. """, tags = [  ] },
  { name = "max_layer", class = "Option<i32>", description = """ Maximum supported API layer; use 65. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallProtocol {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallProtocol.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallProtocol.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callProtocol" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallProtocol """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CallState]
origin_name = "CallState"
clz_name = "CallState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the current call state.  """
has_subclasses = true
sub_classes = [
  { name = "CallStateDiscarded", is_trait = false },
  { name = "CallStateError", is_trait = false },
  { name = "CallStateExchangingKeys", is_trait = false },
  { name = "CallStateHangingUp", is_trait = false },
  { name = "CallStatePending", is_trait = false },
  { name = "CallStateReady", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl CallState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<CallState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.CallState.supers]]
name = "Object"

[[rtd.CallState.supers]]
name = "RObject"
[[rtd.CallState.supers]]
name = "Debug"







[rtd.RTDCallStateType]
clz_name = "RTDCallStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "CallStateDiscarded", is_trait = false },
  { name = "CallStateError", is_trait = false },
  { name = "CallStateExchangingKeys", is_trait = false },
  { name = "CallStateHangingUp", is_trait = false },
  { name = "CallStatePending", is_trait = false },
  { name = "CallStateReady", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDCallStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDCallStateType)(text.as_ref()) }
}
""",
]




[rtd.CallStatePending]
origin_name = "callStatePending"
clz_name = "CallStatePending"
is_private = false
clz_is_trait = false
clz_description = """ The call is pending, waiting to be accepted by a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_created", class = "Option<bool>", description = """ True, if the call has already been created by the server. """, tags = [  ] },
  { name = "is_received", class = "Option<bool>", description = """ True, if the call has already been received by the other party. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStatePending {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallStatePending.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStatePending.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStatePending" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStatePending """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStatePending.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallStateExchangingKeys]
origin_name = "callStateExchangingKeys"
clz_name = "CallStateExchangingKeys"
is_private = false
clz_is_trait = false
clz_description = """ The call has been answered and encryption keys are being exchanged.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStateExchangingKeys {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallStateExchangingKeys.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStateExchangingKeys.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStateExchangingKeys" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStateExchangingKeys """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStateExchangingKeys.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallStateReady]
origin_name = "callStateReady"
clz_name = "CallStateReady"
is_private = false
clz_is_trait = false
clz_description = """ The call is ready to use.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "protocol", class = "Option<CallProtocol>", description = """ Call protocols supported by the peer. """, tags = [  ] },
  { name = "connections", class = "Option<Vec<CallConnection>>", description = """ Available UDP reflectors. """, tags = [  ] },
  { name = "config", class = "Option<String>", description = """ A JSON-encoded call config. """, tags = [  ] },
  { name = "encryption_key", class = "Option<String>", description = """ Call encryption key. """, tags = [  ] },
  { name = "emojis", class = "Option<Vec<String>>", description = """ Encryption key emojis fingerprint. """, tags = [  ] },
  { name = "allow_p2p", class = "Option<bool>", description = """ True, if peer-to-peer connection is allowed by users privacy settings. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStateReady {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallStateReady.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStateReady.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStateReady" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStateReady """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStateReady.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallStateHangingUp]
origin_name = "callStateHangingUp"
clz_name = "CallStateHangingUp"
is_private = false
clz_is_trait = false
clz_description = """ The call is hanging up after  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStateHangingUp {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallStateHangingUp.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStateHangingUp.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStateHangingUp" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStateHangingUp """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStateHangingUp.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallStateDiscarded]
origin_name = "callStateDiscarded"
clz_name = "CallStateDiscarded"
is_private = false
clz_is_trait = false
clz_description = """ The call has ended successfully.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "reason", class = "Option<Box<CallDiscardReason>>", description = """ The reason, why the call has ended. """, tags = [  ] },
  { name = "need_rating", class = "Option<bool>", description = """ True, if the call rating should be sent to the server. """, tags = [  ] },
  { name = "need_debug_information", class = "Option<bool>", description = """ True, if the call debug information should be sent to the server. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStateDiscarded {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for CallStateDiscarded {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.CallStateDiscarded.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStateDiscarded.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStateDiscarded" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStateDiscarded """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStateDiscarded.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallStateError]
origin_name = "callStateError"
clz_name = "CallStateError"
is_private = false
clz_is_trait = false
clz_description = """ The call has ended with an error.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "error", class = "Option<Error>", description = """ Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallStateError {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallStateError.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallStateError.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callStateError" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallStateError """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallStateError.supers]]
name = "CallState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallbackQueryAnswer]
origin_name = "callbackQueryAnswer"
clz_name = "CallbackQueryAnswer"
is_private = false
clz_is_trait = false
clz_description = """ Contains a bot's answer to a callback query.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Text of the answer. """, tags = [  ] },
  { name = "show_alert", class = "Option<bool>", description = """ True, if an alert should be shown to the user instead of a toast notification. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL to be opened. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallbackQueryAnswer {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallbackQueryAnswer.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallbackQueryAnswer.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callbackQueryAnswer" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallbackQueryAnswer """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CallbackQueryPayload]
origin_name = "CallbackQueryPayload"
clz_name = "CallbackQueryPayload"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a payload of a callback query.  """
has_subclasses = true
sub_classes = [
  { name = "CallbackQueryPayloadData", is_trait = false },
  { name = "CallbackQueryPayloadGame", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl CallbackQueryPayload {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<CallbackQueryPayload> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.CallbackQueryPayload.supers]]
name = "Object"

[[rtd.CallbackQueryPayload.supers]]
name = "RObject"
[[rtd.CallbackQueryPayload.supers]]
name = "Debug"







[rtd.RTDCallbackQueryPayloadType]
clz_name = "RTDCallbackQueryPayloadType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "CallbackQueryPayloadData", is_trait = false },
  { name = "CallbackQueryPayloadGame", is_trait = false },
  
]
fields_size = 2
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDCallbackQueryPayloadType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDCallbackQueryPayloadType)(text.as_ref()) }
}
""",
]




[rtd.CallbackQueryPayloadData]
origin_name = "callbackQueryPayloadData"
clz_name = "CallbackQueryPayloadData"
is_private = false
clz_is_trait = false
clz_description = """ The payload from a general callback button.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ Data that was attached to the callback button. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallbackQueryPayloadData {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallbackQueryPayloadData.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallbackQueryPayloadData.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callbackQueryPayloadData" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallbackQueryPayloadData """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallbackQueryPayloadData.supers]]
name = "CallbackQueryPayload"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CallbackQueryPayloadGame]
origin_name = "callbackQueryPayloadGame"
clz_name = "CallbackQueryPayloadGame"
is_private = false
clz_is_trait = false
clz_description = """ The payload from a game callback button.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "game_short_name", class = "Option<String>", description = """ A short name of the game that was attached to the callback button. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CallbackQueryPayloadGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CallbackQueryPayloadGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CallbackQueryPayloadGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "callbackQueryPayloadGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CallbackQueryPayloadGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CallbackQueryPayloadGame.supers]]
name = "CallbackQueryPayload"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Chat]
origin_name = "chat"
clz_name = "Chat"
is_private = false
clz_is_trait = false
clz_description = """ A chat. (Can be a private chat, basic group, supergroup, or secret chat.)  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Chat unique identifier. """, tags = [  ] },
  { name = "type_", class = "Option<Box<ChatType>>", description = """ Type of the chat. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Chat title. """, tags = [  ] },
  { name = "photo", class = "Option<ChatPhoto>", description = """ Chat photo; may be null. """, tags = [  ] },
  { name = "last_message", class = "Option<Message>", description = """ Last message in the chat; may be null. """, tags = [  ] },
  { name = "order", class = "Option<String>", description = """ Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the chat is pinned. """, tags = [  ] },
  { name = "is_marked_as_unread", class = "Option<bool>", description = """ True, if the chat is marked as unread. """, tags = [  ] },
  { name = "is_sponsored", class = "Option<bool>", description = """ True, if the chat is sponsored by the user's MTProxy server. """, tags = [  ] },
  { name = "can_be_deleted_only_for_self", class = "Option<bool>", description = """ True, if the chat messages can be deleted only for the current user while other users will continue to see the messages. """, tags = [  ] },
  { name = "can_be_deleted_for_all_users", class = "Option<bool>", description = """ True, if the chat messages can be deleted for all users. """, tags = [  ] },
  { name = "can_be_reported", class = "Option<bool>", description = """ True, if the chat can be reported to Telegram moderators through reportChat. """, tags = [  ] },
  { name = "default_disable_notification", class = "Option<bool>", description = """ Default value of the disable_notification parameter, used when a message is sent to the chat. """, tags = [  ] },
  { name = "unread_count", class = "Option<i32>", description = """ Number of unread messages in the chat. """, tags = [  ] },
  { name = "last_read_inbox_message_id", class = "Option<i64>", description = """ Identifier of the last read incoming message. """, tags = [  ] },
  { name = "last_read_outbox_message_id", class = "Option<i64>", description = """ Identifier of the last read outgoing message. """, tags = [  ] },
  { name = "unread_mention_count", class = "Option<i32>", description = """ Number of unread messages with a mention/reply in the chat. """, tags = [  ] },
  { name = "notification_settings", class = "Option<ChatNotificationSettings>", description = """ Notification settings for this chat. """, tags = [  ] },
  { name = "pinned_message_id", class = "Option<i64>", description = """ Identifier of the pinned message in the chat; 0 if none. """, tags = [  ] },
  { name = "reply_markup_message_id", class = "Option<i64>", description = """ Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat. """, tags = [  ] },
  { name = "draft_message", class = "Option<DraftMessage>", description = """ A draft of a message in the chat; may be null. """, tags = [  ] },
  { name = "client_data", class = "Option<String>", description = """ Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if a message database is used. """, tags = [  ] },
  
]
fields_size = 23
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Chat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Chat {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Chat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Chat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Chat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatAction]
origin_name = "ChatAction"
clz_name = "ChatAction"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the different types of activity in a chat.  """
has_subclasses = true
sub_classes = [
  { name = "ChatActionCancel", is_trait = false },
  { name = "ChatActionChoosingContact", is_trait = false },
  { name = "ChatActionChoosingLocation", is_trait = false },
  { name = "ChatActionRecordingVideo", is_trait = false },
  { name = "ChatActionRecordingVideoNote", is_trait = false },
  { name = "ChatActionRecordingVoiceNote", is_trait = false },
  { name = "ChatActionStartPlayingGame", is_trait = false },
  { name = "ChatActionTyping", is_trait = false },
  { name = "ChatActionUploadingDocument", is_trait = false },
  { name = "ChatActionUploadingPhoto", is_trait = false },
  { name = "ChatActionUploadingVideo", is_trait = false },
  { name = "ChatActionUploadingVideoNote", is_trait = false },
  { name = "ChatActionUploadingVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatAction {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatAction> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatAction.supers]]
name = "Object"

[[rtd.ChatAction.supers]]
name = "RObject"
[[rtd.ChatAction.supers]]
name = "Debug"







[rtd.RTDChatActionType]
clz_name = "RTDChatActionType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatActionCancel", is_trait = false },
  { name = "ChatActionChoosingContact", is_trait = false },
  { name = "ChatActionChoosingLocation", is_trait = false },
  { name = "ChatActionRecordingVideo", is_trait = false },
  { name = "ChatActionRecordingVideoNote", is_trait = false },
  { name = "ChatActionRecordingVoiceNote", is_trait = false },
  { name = "ChatActionStartPlayingGame", is_trait = false },
  { name = "ChatActionTyping", is_trait = false },
  { name = "ChatActionUploadingDocument", is_trait = false },
  { name = "ChatActionUploadingPhoto", is_trait = false },
  { name = "ChatActionUploadingVideo", is_trait = false },
  { name = "ChatActionUploadingVideoNote", is_trait = false },
  { name = "ChatActionUploadingVoiceNote", is_trait = false },
  
]
fields_size = 13
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatActionType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatActionType)(text.as_ref()) }
}
""",
]




[rtd.ChatActionTyping]
origin_name = "chatActionTyping"
clz_name = "ChatActionTyping"
is_private = false
clz_is_trait = false
clz_description = """ The user is typing a message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionTyping {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionTyping.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionTyping.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionTyping" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionTyping """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionTyping.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionRecordingVideo]
origin_name = "chatActionRecordingVideo"
clz_name = "ChatActionRecordingVideo"
is_private = false
clz_is_trait = false
clz_description = """ The user is recording a video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionRecordingVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionRecordingVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionRecordingVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionRecordingVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionRecordingVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionRecordingVideo.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionUploadingVideo]
origin_name = "chatActionUploadingVideo"
clz_name = "ChatActionUploadingVideo"
is_private = false
clz_is_trait = false
clz_description = """ The user is uploading a video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "progress", class = "Option<i32>", description = """ Upload progress, as a percentage. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionUploadingVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionUploadingVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionUploadingVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionUploadingVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionUploadingVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionUploadingVideo.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionRecordingVoiceNote]
origin_name = "chatActionRecordingVoiceNote"
clz_name = "ChatActionRecordingVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ The user is recording a voice note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionRecordingVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionRecordingVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionRecordingVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionRecordingVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionRecordingVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionRecordingVoiceNote.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionUploadingVoiceNote]
origin_name = "chatActionUploadingVoiceNote"
clz_name = "ChatActionUploadingVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ The user is uploading a voice note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "progress", class = "Option<i32>", description = """ Upload progress, as a percentage. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionUploadingVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionUploadingVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionUploadingVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionUploadingVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionUploadingVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionUploadingVoiceNote.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionUploadingPhoto]
origin_name = "chatActionUploadingPhoto"
clz_name = "ChatActionUploadingPhoto"
is_private = false
clz_is_trait = false
clz_description = """ The user is uploading a photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "progress", class = "Option<i32>", description = """ Upload progress, as a percentage. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionUploadingPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionUploadingPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionUploadingPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionUploadingPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionUploadingPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionUploadingPhoto.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionUploadingDocument]
origin_name = "chatActionUploadingDocument"
clz_name = "ChatActionUploadingDocument"
is_private = false
clz_is_trait = false
clz_description = """ The user is uploading a document.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "progress", class = "Option<i32>", description = """ Upload progress, as a percentage. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionUploadingDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionUploadingDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionUploadingDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionUploadingDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionUploadingDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionUploadingDocument.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionChoosingLocation]
origin_name = "chatActionChoosingLocation"
clz_name = "ChatActionChoosingLocation"
is_private = false
clz_is_trait = false
clz_description = """ The user is picking a location or venue to send.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionChoosingLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionChoosingLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionChoosingLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionChoosingLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionChoosingLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionChoosingLocation.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionChoosingContact]
origin_name = "chatActionChoosingContact"
clz_name = "ChatActionChoosingContact"
is_private = false
clz_is_trait = false
clz_description = """ The user is picking a contact to send.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionChoosingContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionChoosingContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionChoosingContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionChoosingContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionChoosingContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionChoosingContact.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionStartPlayingGame]
origin_name = "chatActionStartPlayingGame"
clz_name = "ChatActionStartPlayingGame"
is_private = false
clz_is_trait = false
clz_description = """ The user has started to play a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionStartPlayingGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionStartPlayingGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionStartPlayingGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionStartPlayingGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionStartPlayingGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionStartPlayingGame.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionRecordingVideoNote]
origin_name = "chatActionRecordingVideoNote"
clz_name = "ChatActionRecordingVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ The user is recording a video note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionRecordingVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionRecordingVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionRecordingVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionRecordingVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionRecordingVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionRecordingVideoNote.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionUploadingVideoNote]
origin_name = "chatActionUploadingVideoNote"
clz_name = "ChatActionUploadingVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ The user is uploading a video note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "progress", class = "Option<i32>", description = """ Upload progress, as a percentage. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionUploadingVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionUploadingVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionUploadingVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionUploadingVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionUploadingVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionUploadingVideoNote.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatActionCancel]
origin_name = "chatActionCancel"
clz_name = "ChatActionCancel"
is_private = false
clz_is_trait = false
clz_description = """ The user has cancelled the previous action.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatActionCancel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatActionCancel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatActionCancel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatActionCancel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatActionCancel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatActionCancel.supers]]
name = "ChatAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEvent]
origin_name = "chatEvent"
clz_name = "ChatEvent"
is_private = false
clz_is_trait = false
clz_description = """ Represents a chat event.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Chat event identifier. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the event happened. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the user who performed the action that triggered the event. """, tags = [  ] },
  { name = "action", class = "Option<Box<ChatEventAction>>", description = """ Action performed by the user. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEvent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatEvent {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatEvent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEvent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEvent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEvent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatEventAction]
origin_name = "ChatEventAction"
clz_name = "ChatEventAction"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a chat event.  """
has_subclasses = true
sub_classes = [
  { name = "ChatEventDescriptionChanged", is_trait = false },
  { name = "ChatEventInvitesToggled", is_trait = false },
  { name = "ChatEventIsAllHistoryAvailableToggled", is_trait = false },
  { name = "ChatEventMemberInvited", is_trait = false },
  { name = "ChatEventMemberJoined", is_trait = false },
  { name = "ChatEventMemberLeft", is_trait = false },
  { name = "ChatEventMemberPromoted", is_trait = false },
  { name = "ChatEventMemberRestricted", is_trait = false },
  { name = "ChatEventMessageDeleted", is_trait = false },
  { name = "ChatEventMessageEdited", is_trait = false },
  { name = "ChatEventMessagePinned", is_trait = false },
  { name = "ChatEventMessageUnpinned", is_trait = false },
  { name = "ChatEventPhotoChanged", is_trait = false },
  { name = "ChatEventSignMessagesToggled", is_trait = false },
  { name = "ChatEventStickerSetChanged", is_trait = false },
  { name = "ChatEventTitleChanged", is_trait = false },
  { name = "ChatEventUsernameChanged", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatEventAction {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatEventAction> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatEventAction.supers]]
name = "Object"

[[rtd.ChatEventAction.supers]]
name = "RObject"
[[rtd.ChatEventAction.supers]]
name = "Debug"







[rtd.RTDChatEventActionType]
clz_name = "RTDChatEventActionType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatEventDescriptionChanged", is_trait = false },
  { name = "ChatEventInvitesToggled", is_trait = false },
  { name = "ChatEventIsAllHistoryAvailableToggled", is_trait = false },
  { name = "ChatEventMemberInvited", is_trait = false },
  { name = "ChatEventMemberJoined", is_trait = false },
  { name = "ChatEventMemberLeft", is_trait = false },
  { name = "ChatEventMemberPromoted", is_trait = false },
  { name = "ChatEventMemberRestricted", is_trait = false },
  { name = "ChatEventMessageDeleted", is_trait = false },
  { name = "ChatEventMessageEdited", is_trait = false },
  { name = "ChatEventMessagePinned", is_trait = false },
  { name = "ChatEventMessageUnpinned", is_trait = false },
  { name = "ChatEventPhotoChanged", is_trait = false },
  { name = "ChatEventSignMessagesToggled", is_trait = false },
  { name = "ChatEventStickerSetChanged", is_trait = false },
  { name = "ChatEventTitleChanged", is_trait = false },
  { name = "ChatEventUsernameChanged", is_trait = false },
  
]
fields_size = 17
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatEventActionType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatEventActionType)(text.as_ref()) }
}
""",
]




[rtd.ChatEventMessageEdited]
origin_name = "chatEventMessageEdited"
clz_name = "ChatEventMessageEdited"
is_private = false
clz_is_trait = false
clz_description = """ A message was edited.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_message", class = "Option<Message>", description = """ The original message before the edit. """, tags = [  ] },
  { name = "new_message", class = "Option<Message>", description = """ The message after it was edited. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMessageEdited {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMessageEdited.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMessageEdited.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMessageEdited" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMessageEdited """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMessageEdited.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMessageDeleted]
origin_name = "chatEventMessageDeleted"
clz_name = "ChatEventMessageDeleted"
is_private = false
clz_is_trait = false
clz_description = """ A message was deleted.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ Deleted message. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMessageDeleted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMessageDeleted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMessageDeleted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMessageDeleted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMessageDeleted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMessageDeleted.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMessagePinned]
origin_name = "chatEventMessagePinned"
clz_name = "ChatEventMessagePinned"
is_private = false
clz_is_trait = false
clz_description = """ A message was pinned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ Pinned message. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMessagePinned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMessagePinned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMessagePinned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMessagePinned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMessagePinned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMessagePinned.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMessageUnpinned]
origin_name = "chatEventMessageUnpinned"
clz_name = "ChatEventMessageUnpinned"
is_private = false
clz_is_trait = false
clz_description = """ A message was unpinned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMessageUnpinned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMessageUnpinned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMessageUnpinned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMessageUnpinned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMessageUnpinned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMessageUnpinned.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMemberJoined]
origin_name = "chatEventMemberJoined"
clz_name = "ChatEventMemberJoined"
is_private = false
clz_is_trait = false
clz_description = """ A new member joined the chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMemberJoined {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMemberJoined.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMemberJoined.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMemberJoined" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMemberJoined """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMemberJoined.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMemberLeft]
origin_name = "chatEventMemberLeft"
clz_name = "ChatEventMemberLeft"
is_private = false
clz_is_trait = false
clz_description = """ A member left the chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMemberLeft {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventMemberLeft.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMemberLeft.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMemberLeft" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMemberLeft """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMemberLeft.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMemberInvited]
origin_name = "chatEventMemberInvited"
clz_name = "ChatEventMemberInvited"
is_private = false
clz_is_trait = false
clz_description = """ A new chat member was invited.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ New member user identifier. """, tags = [  ] },
  { name = "status", class = "Option<Box<ChatMemberStatus>>", description = """ New member status. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMemberInvited {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatEventMemberInvited {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatEventMemberInvited.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMemberInvited.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMemberInvited" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMemberInvited """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMemberInvited.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMemberPromoted]
origin_name = "chatEventMemberPromoted"
clz_name = "ChatEventMemberPromoted"
is_private = false
clz_is_trait = false
clz_description = """ A chat member has gained/lost administrator status, or the list of their administrator privileges has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Chat member user identifier. """, tags = [  ] },
  { name = "old_status", class = "Option<Box<ChatMemberStatus>>", description = """ Previous status of the chat member. """, tags = [  ] },
  { name = "new_status", class = "Option<Box<ChatMemberStatus>>", description = """ New status of the chat member. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMemberPromoted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatEventMemberPromoted {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatEventMemberPromoted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMemberPromoted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMemberPromoted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMemberPromoted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMemberPromoted.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventMemberRestricted]
origin_name = "chatEventMemberRestricted"
clz_name = "ChatEventMemberRestricted"
is_private = false
clz_is_trait = false
clz_description = """ A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Chat member user identifier. """, tags = [  ] },
  { name = "old_status", class = "Option<Box<ChatMemberStatus>>", description = """ Previous status of the chat member. """, tags = [  ] },
  { name = "new_status", class = "Option<Box<ChatMemberStatus>>", description = """ New status of the chat member. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventMemberRestricted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatEventMemberRestricted {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatEventMemberRestricted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventMemberRestricted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventMemberRestricted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventMemberRestricted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventMemberRestricted.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventTitleChanged]
origin_name = "chatEventTitleChanged"
clz_name = "ChatEventTitleChanged"
is_private = false
clz_is_trait = false
clz_description = """ The chat title was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_title", class = "Option<String>", description = """ Previous chat title. """, tags = [  ] },
  { name = "new_title", class = "Option<String>", description = """ New chat title. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventTitleChanged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventTitleChanged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventTitleChanged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventTitleChanged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventTitleChanged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventTitleChanged.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventDescriptionChanged]
origin_name = "chatEventDescriptionChanged"
clz_name = "ChatEventDescriptionChanged"
is_private = false
clz_is_trait = false
clz_description = """ The chat description was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_description", class = "Option<String>", description = """ Previous chat description. """, tags = [  ] },
  { name = "new_description", class = "Option<String>", description = """ New chat description. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventDescriptionChanged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventDescriptionChanged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventDescriptionChanged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventDescriptionChanged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventDescriptionChanged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventDescriptionChanged.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventUsernameChanged]
origin_name = "chatEventUsernameChanged"
clz_name = "ChatEventUsernameChanged"
is_private = false
clz_is_trait = false
clz_description = """ The chat username was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_username", class = "Option<String>", description = """ Previous chat username. """, tags = [  ] },
  { name = "new_username", class = "Option<String>", description = """ New chat username. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventUsernameChanged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventUsernameChanged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventUsernameChanged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventUsernameChanged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventUsernameChanged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventUsernameChanged.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventPhotoChanged]
origin_name = "chatEventPhotoChanged"
clz_name = "ChatEventPhotoChanged"
is_private = false
clz_is_trait = false
clz_description = """ The chat photo was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_photo", class = "Option<ChatPhoto>", description = """ Previous chat photo value; may be null. """, tags = [  ] },
  { name = "new_photo", class = "Option<ChatPhoto>", description = """ New chat photo value; may be null. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventPhotoChanged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventPhotoChanged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventPhotoChanged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventPhotoChanged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventPhotoChanged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventPhotoChanged.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventInvitesToggled]
origin_name = "chatEventInvitesToggled"
clz_name = "ChatEventInvitesToggled"
is_private = false
clz_is_trait = false
clz_description = """ The anyone_can_invite setting of a supergroup chat was toggled.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "anyone_can_invite", class = "Option<bool>", description = """ New value of anyone_can_invite. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventInvitesToggled {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventInvitesToggled.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventInvitesToggled.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventInvitesToggled" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventInvitesToggled """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventInvitesToggled.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventSignMessagesToggled]
origin_name = "chatEventSignMessagesToggled"
clz_name = "ChatEventSignMessagesToggled"
is_private = false
clz_is_trait = false
clz_description = """ The sign_messages setting of a channel was toggled.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sign_messages", class = "Option<bool>", description = """ New value of sign_messages. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventSignMessagesToggled {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventSignMessagesToggled.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventSignMessagesToggled.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventSignMessagesToggled" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventSignMessagesToggled """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventSignMessagesToggled.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventStickerSetChanged]
origin_name = "chatEventStickerSetChanged"
clz_name = "ChatEventStickerSetChanged"
is_private = false
clz_is_trait = false
clz_description = """ The supergroup sticker set was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_sticker_set_id", class = "Option<i64>", description = """ Previous identifier of the chat sticker set; 0 if none. """, tags = [  ] },
  { name = "new_sticker_set_id", class = "Option<i64>", description = """ New identifier of the chat sticker set; 0 if none. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventStickerSetChanged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventStickerSetChanged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventStickerSetChanged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventStickerSetChanged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventStickerSetChanged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventStickerSetChanged.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventIsAllHistoryAvailableToggled]
origin_name = "chatEventIsAllHistoryAvailableToggled"
clz_name = "ChatEventIsAllHistoryAvailableToggled"
is_private = false
clz_is_trait = false
clz_description = """ The is_all_history_available setting of a supergroup was toggled.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_all_history_available", class = "Option<bool>", description = """ New value of is_all_history_available. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventIsAllHistoryAvailableToggled {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventIsAllHistoryAvailableToggled.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventIsAllHistoryAvailableToggled.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventIsAllHistoryAvailableToggled" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventIsAllHistoryAvailableToggled """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatEventIsAllHistoryAvailableToggled.supers]]
name = "ChatEventAction"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatEventLogFilters]
origin_name = "chatEventLogFilters"
clz_name = "ChatEventLogFilters"
is_private = false
clz_is_trait = false
clz_description = """ Represents a set of filters used to obtain a chat event log.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message_edits", class = "Option<bool>", description = """ True, if message edits should be returned. """, tags = [  ] },
  { name = "message_deletions", class = "Option<bool>", description = """ True, if message deletions should be returned. """, tags = [  ] },
  { name = "message_pins", class = "Option<bool>", description = """ True, if pin/unpin events should be returned. """, tags = [  ] },
  { name = "member_joins", class = "Option<bool>", description = """ True, if members joining events should be returned. """, tags = [  ] },
  { name = "member_leaves", class = "Option<bool>", description = """ True, if members leaving events should be returned. """, tags = [  ] },
  { name = "member_invites", class = "Option<bool>", description = """ True, if invited member events should be returned. """, tags = [  ] },
  { name = "member_promotions", class = "Option<bool>", description = """ True, if member promotion/demotion events should be returned. """, tags = [  ] },
  { name = "member_restrictions", class = "Option<bool>", description = """ True, if member restricted/unrestricted/banned/unbanned events should be returned. """, tags = [  ] },
  { name = "info_changes", class = "Option<bool>", description = """ True, if changes in chat information should be returned. """, tags = [  ] },
  { name = "setting_changes", class = "Option<bool>", description = """ True, if changes in chat settings should be returned. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEventLogFilters {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEventLogFilters.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEventLogFilters.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEventLogFilters" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEventLogFilters """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatEvents]
origin_name = "chatEvents"
clz_name = "ChatEvents"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of chat events.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "events", class = "Option<Vec<ChatEvent>>", description = """ List of events. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatEvents {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatEvents.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatEvents.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatEvents" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatEvents """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatInviteLink]
origin_name = "chatInviteLink"
clz_name = "ChatInviteLink"
is_private = false
clz_is_trait = false
clz_description = """ Contains a chat invite link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invite_link", class = "Option<String>", description = """ Chat invite link. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatInviteLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatInviteLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatInviteLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatInviteLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatInviteLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatInviteLinkInfo]
origin_name = "chatInviteLinkInfo"
clz_name = "ChatInviteLinkInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a chat invite link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the invite link; 0 if the user is not a member of this chat. """, tags = [  ] },
  { name = "type_", class = "Option<Box<ChatType>>", description = """ Contains information about the type of the chat. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Title of the chat. """, tags = [  ] },
  { name = "photo", class = "Option<ChatPhoto>", description = """ Chat photo; may be null. """, tags = [  ] },
  { name = "member_count", class = "Option<i32>", description = """ Number of members. """, tags = [  ] },
  { name = "member_user_ids", class = "Option<Vec<i32>>", description = """ User identifiers of some chat members that may be known to the current user. """, tags = [  ] },
  { name = "is_public", class = "Option<bool>", description = """ True, if the chat is a public supergroup or channel with a username. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatInviteLinkInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatInviteLinkInfo {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatInviteLinkInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatInviteLinkInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatInviteLinkInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatInviteLinkInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatMember]
origin_name = "chatMember"
clz_name = "ChatMember"
is_private = false
clz_is_trait = false
clz_description = """ A user with information about joining/leaving a chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier of the chat member. """, tags = [  ] },
  { name = "inviter_user_id", class = "Option<i32>", description = """ Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown. """, tags = [  ] },
  { name = "joined_chat_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user joined a chat. """, tags = [  ] },
  { name = "status", class = "Option<Box<ChatMemberStatus>>", description = """ Status of the member in the chat. """, tags = [  ] },
  { name = "bot_info", class = "Option<BotInfo>", description = """ If the user is a bot, information about the bot; may be null. Can be null even for a bot if the bot is not a chat member. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ChatMember {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatMemberStatus]
origin_name = "ChatMemberStatus"
clz_name = "ChatMemberStatus"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Provides information about the status of a member in a chat.  """
has_subclasses = true
sub_classes = [
  { name = "ChatMemberStatusAdministrator", is_trait = false },
  { name = "ChatMemberStatusBanned", is_trait = false },
  { name = "ChatMemberStatusCreator", is_trait = false },
  { name = "ChatMemberStatusLeft", is_trait = false },
  { name = "ChatMemberStatusMember", is_trait = false },
  { name = "ChatMemberStatusRestricted", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatMemberStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatMemberStatus> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatMemberStatus.supers]]
name = "Object"

[[rtd.ChatMemberStatus.supers]]
name = "RObject"
[[rtd.ChatMemberStatus.supers]]
name = "Debug"







[rtd.RTDChatMemberStatusType]
clz_name = "RTDChatMemberStatusType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatMemberStatusAdministrator", is_trait = false },
  { name = "ChatMemberStatusBanned", is_trait = false },
  { name = "ChatMemberStatusCreator", is_trait = false },
  { name = "ChatMemberStatusLeft", is_trait = false },
  { name = "ChatMemberStatusMember", is_trait = false },
  { name = "ChatMemberStatusRestricted", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatMemberStatusType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatMemberStatusType)(text.as_ref()) }
}
""",
]




[rtd.ChatMemberStatusCreator]
origin_name = "chatMemberStatusCreator"
clz_name = "ChatMemberStatusCreator"
is_private = false
clz_is_trait = false
clz_description = """ The user is the creator of a chat and has all the administrator privileges.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_member", class = "Option<bool>", description = """ True, if the user is a member of the chat. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusCreator {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusCreator.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusCreator.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusCreator" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusCreator """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusCreator.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMemberStatusAdministrator]
origin_name = "chatMemberStatusAdministrator"
clz_name = "ChatMemberStatusAdministrator"
is_private = false
clz_is_trait = false
clz_description = """ The user is a member of a chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, and ban unprivileged members. In supergroups and channels, there are more detailed options for administrator privileges.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "can_be_edited", class = "Option<bool>", description = """ True, if the current user can edit the administrator privileges for the called user. """, tags = [  ] },
  { name = "can_change_info", class = "Option<bool>", description = """ True, if the administrator can change the chat title, photo, and other settings. """, tags = [  ] },
  { name = "can_post_messages", class = "Option<bool>", description = """ True, if the administrator can create channel posts; applicable to channels only. """, tags = [  ] },
  { name = "can_edit_messages", class = "Option<bool>", description = """ True, if the administrator can edit messages of other users and pin messages; applicable to channels only. """, tags = [  ] },
  { name = "can_delete_messages", class = "Option<bool>", description = """ True, if the administrator can delete messages of other users. """, tags = [  ] },
  { name = "can_invite_users", class = "Option<bool>", description = """ True, if the administrator can invite new users to the chat. """, tags = [  ] },
  { name = "can_restrict_members", class = "Option<bool>", description = """ True, if the administrator can restrict, ban, or unban chat members. """, tags = [  ] },
  { name = "can_pin_messages", class = "Option<bool>", description = """ True, if the administrator can pin messages; applicable to groups only. """, tags = [  ] },
  { name = "can_promote_members", class = "Option<bool>", description = """ True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that were directly or indirectly promoted by him. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusAdministrator {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusAdministrator.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusAdministrator.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusAdministrator" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusAdministrator """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusAdministrator.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMemberStatusMember]
origin_name = "chatMemberStatusMember"
clz_name = "ChatMemberStatusMember"
is_private = false
clz_is_trait = false
clz_description = """ The user is a member of a chat, without any additional privileges or restrictions.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusMember.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMemberStatusRestricted]
origin_name = "chatMemberStatusRestricted"
clz_name = "ChatMemberStatusRestricted"
is_private = false
clz_is_trait = false
clz_description = """ The user is under certain restrictions in the chat. Not supported in basic groups and channels.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_member", class = "Option<bool>", description = """ True, if the user is a member of the chat. """, tags = [  ] },
  { name = "restricted_until_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever. """, tags = [  ] },
  { name = "can_send_messages", class = "Option<bool>", description = """ True, if the user can send text messages, contacts, locations, and venues. """, tags = [  ] },
  { name = "can_send_media_messages", class = "Option<bool>", description = """ True, if the user can send audio files, documents, photos, videos, video notes, and voice notes. Implies can_send_messages permissions. """, tags = [  ] },
  { name = "can_send_other_messages", class = "Option<bool>", description = """ True, if the user can send animations, games, and stickers and use inline bots. Implies can_send_media_messages permissions. """, tags = [  ] },
  { name = "can_add_web_page_previews", class = "Option<bool>", description = """ True, if the user may add a web page preview to his messages. Implies can_send_messages permissions. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusRestricted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusRestricted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusRestricted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusRestricted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusRestricted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusRestricted.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMemberStatusLeft]
origin_name = "chatMemberStatusLeft"
clz_name = "ChatMemberStatusLeft"
is_private = false
clz_is_trait = false
clz_description = """ The user is not a chat member.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusLeft {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusLeft.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusLeft.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusLeft" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusLeft """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusLeft.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMemberStatusBanned]
origin_name = "chatMemberStatusBanned"
clz_name = "ChatMemberStatusBanned"
is_private = false
clz_is_trait = false
clz_description = """ The user was banned (and hence is not a member of the chat). Implies the user can't return to the chat or view messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "banned_until_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMemberStatusBanned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMemberStatusBanned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMemberStatusBanned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMemberStatusBanned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMemberStatusBanned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMemberStatusBanned.supers]]
name = "ChatMemberStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMembers]
origin_name = "chatMembers"
clz_name = "ChatMembers"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of chat members.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Approximate total count of chat members found. """, tags = [  ] },
  { name = "members", class = "Option<Vec<ChatMember>>", description = """ A list of chat members. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatMembersFilter]
origin_name = "ChatMembersFilter"
clz_name = "ChatMembersFilter"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Specifies the kind of chat members to return in  """
has_subclasses = true
sub_classes = [
  { name = "ChatMembersFilterAdministrators", is_trait = false },
  { name = "ChatMembersFilterBanned", is_trait = false },
  { name = "ChatMembersFilterBots", is_trait = false },
  { name = "ChatMembersFilterMembers", is_trait = false },
  { name = "ChatMembersFilterRestricted", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatMembersFilter {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatMembersFilter> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatMembersFilter.supers]]
name = "Object"

[[rtd.ChatMembersFilter.supers]]
name = "RObject"
[[rtd.ChatMembersFilter.supers]]
name = "Debug"







[rtd.RTDChatMembersFilterType]
clz_name = "RTDChatMembersFilterType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatMembersFilterAdministrators", is_trait = false },
  { name = "ChatMembersFilterBanned", is_trait = false },
  { name = "ChatMembersFilterBots", is_trait = false },
  { name = "ChatMembersFilterMembers", is_trait = false },
  { name = "ChatMembersFilterRestricted", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatMembersFilterType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatMembersFilterType)(text.as_ref()) }
}
""",
]




[rtd.ChatMembersFilterAdministrators]
origin_name = "chatMembersFilterAdministrators"
clz_name = "ChatMembersFilterAdministrators"
is_private = false
clz_is_trait = false
clz_description = """ Returns the creator and administrators.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembersFilterAdministrators {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembersFilterAdministrators.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembersFilterAdministrators.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembersFilterAdministrators" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembersFilterAdministrators """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMembersFilterAdministrators.supers]]
name = "ChatMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMembersFilterMembers]
origin_name = "chatMembersFilterMembers"
clz_name = "ChatMembersFilterMembers"
is_private = false
clz_is_trait = false
clz_description = """ Returns all chat members, including restricted chat members.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembersFilterMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembersFilterMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembersFilterMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembersFilterMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembersFilterMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMembersFilterMembers.supers]]
name = "ChatMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMembersFilterRestricted]
origin_name = "chatMembersFilterRestricted"
clz_name = "ChatMembersFilterRestricted"
is_private = false
clz_is_trait = false
clz_description = """ Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembersFilterRestricted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembersFilterRestricted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembersFilterRestricted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembersFilterRestricted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembersFilterRestricted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMembersFilterRestricted.supers]]
name = "ChatMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMembersFilterBanned]
origin_name = "chatMembersFilterBanned"
clz_name = "ChatMembersFilterBanned"
is_private = false
clz_is_trait = false
clz_description = """ Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembersFilterBanned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembersFilterBanned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembersFilterBanned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembersFilterBanned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembersFilterBanned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMembersFilterBanned.supers]]
name = "ChatMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatMembersFilterBots]
origin_name = "chatMembersFilterBots"
clz_name = "ChatMembersFilterBots"
is_private = false
clz_is_trait = false
clz_description = """ Returns bot members of the chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatMembersFilterBots {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatMembersFilterBots.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatMembersFilterBots.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatMembersFilterBots" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatMembersFilterBots """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatMembersFilterBots.supers]]
name = "ChatMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatNotificationSettings]
origin_name = "chatNotificationSettings"
clz_name = "ChatNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about notification settings for a chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "use_default_mute_for", class = "Option<bool>", description = """ If true, mute_for is ignored and the value for the relevant type of chat is used instead. """, tags = [  ] },
  { name = "mute_for", class = "Option<i32>", description = """ Time left before notifications will be unmuted, in seconds. """, tags = [  ] },
  { name = "use_default_sound", class = "Option<bool>", description = """ If true, sound is ignored and the value for the relevant type of chat is used instead. """, tags = [  ] },
  { name = "sound", class = "Option<String>", description = """ The name of an audio file to be used for notification sounds; only applies to iOS applications. """, tags = [  ] },
  { name = "use_default_show_preview", class = "Option<bool>", description = """ If true, show_preview is ignored and the value for the relevant type of chat is used instead. """, tags = [  ] },
  { name = "show_preview", class = "Option<bool>", description = """ True, if message content should be displayed in notifications. """, tags = [  ] },
  { name = "use_default_disable_pinned_message_notifications", class = "Option<bool>", description = """ If true, disable_pinned_message_notifications is ignored and the value for the relevant type of chat is used instead. """, tags = [  ] },
  { name = "disable_pinned_message_notifications", class = "Option<bool>", description = """ If true, notifications for incoming pinned messages will be created as for an ordinary unread message. """, tags = [  ] },
  { name = "use_default_disable_mention_notifications", class = "Option<bool>", description = """ If true, disable_mention_notifications is ignored and the value for the relevant type of chat is used instead. """, tags = [  ] },
  { name = "disable_mention_notifications", class = "Option<bool>", description = """ If true, notifications for messages with mentions will be created as for an ordinary unread message. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatPhoto]
origin_name = "chatPhoto"
clz_name = "ChatPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Describes the photo of a chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "small", class = "Option<File>", description = """ A small (160x160) chat photo. """, tags = [  ] },
  { name = "big", class = "Option<File>", description = """ A big (640x640) chat photo. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatReportReason]
origin_name = "ChatReportReason"
clz_name = "ChatReportReason"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the reason why a chat is reported.  """
has_subclasses = true
sub_classes = [
  { name = "ChatReportReasonChildAbuse", is_trait = false },
  { name = "ChatReportReasonCopyright", is_trait = false },
  { name = "ChatReportReasonCustom", is_trait = false },
  { name = "ChatReportReasonPornography", is_trait = false },
  { name = "ChatReportReasonSpam", is_trait = false },
  { name = "ChatReportReasonViolence", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatReportReason {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatReportReason> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatReportReason.supers]]
name = "Object"

[[rtd.ChatReportReason.supers]]
name = "RObject"
[[rtd.ChatReportReason.supers]]
name = "Debug"







[rtd.RTDChatReportReasonType]
clz_name = "RTDChatReportReasonType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatReportReasonChildAbuse", is_trait = false },
  { name = "ChatReportReasonCopyright", is_trait = false },
  { name = "ChatReportReasonCustom", is_trait = false },
  { name = "ChatReportReasonPornography", is_trait = false },
  { name = "ChatReportReasonSpam", is_trait = false },
  { name = "ChatReportReasonViolence", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatReportReasonType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatReportReasonType)(text.as_ref()) }
}
""",
]




[rtd.ChatReportReasonSpam]
origin_name = "chatReportReasonSpam"
clz_name = "ChatReportReasonSpam"
is_private = false
clz_is_trait = false
clz_description = """ The chat contains spam messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonSpam {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonSpam.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonSpam.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonSpam" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonSpam """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonSpam.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportReasonViolence]
origin_name = "chatReportReasonViolence"
clz_name = "ChatReportReasonViolence"
is_private = false
clz_is_trait = false
clz_description = """ The chat promotes violence.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonViolence {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonViolence.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonViolence.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonViolence" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonViolence """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonViolence.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportReasonPornography]
origin_name = "chatReportReasonPornography"
clz_name = "ChatReportReasonPornography"
is_private = false
clz_is_trait = false
clz_description = """ The chat contains pornographic messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonPornography {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonPornography.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonPornography.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonPornography" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonPornography """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonPornography.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportReasonChildAbuse]
origin_name = "chatReportReasonChildAbuse"
clz_name = "ChatReportReasonChildAbuse"
is_private = false
clz_is_trait = false
clz_description = """ The chat has child abuse related content.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonChildAbuse {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonChildAbuse.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonChildAbuse.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonChildAbuse" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonChildAbuse """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonChildAbuse.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportReasonCopyright]
origin_name = "chatReportReasonCopyright"
clz_name = "ChatReportReasonCopyright"
is_private = false
clz_is_trait = false
clz_description = """ The chat contains copyrighted content.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonCopyright {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonCopyright.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonCopyright.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonCopyright" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonCopyright """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonCopyright.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportReasonCustom]
origin_name = "chatReportReasonCustom"
clz_name = "ChatReportReasonCustom"
is_private = false
clz_is_trait = false
clz_description = """ A custom reason provided by the user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Report text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportReasonCustom {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportReasonCustom.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportReasonCustom.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportReasonCustom" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportReasonCustom """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatReportReasonCustom.supers]]
name = "ChatReportReason"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatReportSpamState]
origin_name = "chatReportSpamState"
clz_name = "ChatReportSpamState"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the availability of the "Report spam" action for a chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "can_report_spam", class = "Option<bool>", description = """ True, if a prompt with the "Report spam" action should be shown to the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatReportSpamState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatReportSpamState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatReportSpamState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatReportSpamState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatReportSpamState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ChatType]
origin_name = "ChatType"
clz_name = "ChatType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the type of a chat.  """
has_subclasses = true
sub_classes = [
  { name = "ChatTypeBasicGroup", is_trait = false },
  { name = "ChatTypePrivate", is_trait = false },
  { name = "ChatTypeSecret", is_trait = false },
  { name = "ChatTypeSupergroup", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ChatType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ChatType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ChatType.supers]]
name = "Object"

[[rtd.ChatType.supers]]
name = "RObject"
[[rtd.ChatType.supers]]
name = "Debug"







[rtd.RTDChatTypeType]
clz_name = "RTDChatTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ChatTypeBasicGroup", is_trait = false },
  { name = "ChatTypePrivate", is_trait = false },
  { name = "ChatTypeSecret", is_trait = false },
  { name = "ChatTypeSupergroup", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDChatTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDChatTypeType)(text.as_ref()) }
}
""",
]




[rtd.ChatTypePrivate]
origin_name = "chatTypePrivate"
clz_name = "ChatTypePrivate"
is_private = false
clz_is_trait = false
clz_description = """ An ordinary chat with a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatTypePrivate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatTypePrivate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatTypePrivate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatTypePrivate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatTypePrivate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatTypePrivate.supers]]
name = "ChatType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatTypeBasicGroup]
origin_name = "chatTypeBasicGroup"
clz_name = "ChatTypeBasicGroup"
is_private = false
clz_is_trait = false
clz_description = """ A basic group (i.e., a chat with 0-200 other users).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Basic group identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatTypeBasicGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatTypeBasicGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatTypeBasicGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatTypeBasicGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatTypeBasicGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatTypeBasicGroup.supers]]
name = "ChatType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatTypeSupergroup]
origin_name = "chatTypeSupergroup"
clz_name = "ChatTypeSupergroup"
is_private = false
clz_is_trait = false
clz_description = """ A supergroup (i.e. a chat with up to GetOption("supergroup_max_size") other users), or channel (with unlimited members).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Supergroup or channel identifier. """, tags = [  ] },
  { name = "is_channel", class = "Option<bool>", description = """ True, if the supergroup is a channel. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatTypeSupergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatTypeSupergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatTypeSupergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatTypeSupergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatTypeSupergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatTypeSupergroup.supers]]
name = "ChatType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ChatTypeSecret]
origin_name = "chatTypeSecret"
clz_name = "ChatTypeSecret"
is_private = false
clz_is_trait = false
clz_description = """ A secret chat with a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret_chat_id", class = "Option<i32>", description = """ Secret chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier of the secret chat peer. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChatTypeSecret {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChatTypeSecret.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChatTypeSecret.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chatTypeSecret" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChatTypeSecret """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChatTypeSecret.supers]]
name = "ChatType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Chats]
origin_name = "chats"
clz_name = "Chats"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_ids", class = "Option<Vec<i64>>", description = """ List of chat identifiers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Chats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Chats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Chats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "chats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Chats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CheckChatUsernameResult]
origin_name = "CheckChatUsernameResult"
clz_name = "CheckChatUsernameResult"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents result of checking whether a username can be set for a chat.  """
has_subclasses = true
sub_classes = [
  { name = "CheckChatUsernameResultOk", is_trait = false },
  { name = "CheckChatUsernameResultPublicChatsTooMuch", is_trait = false },
  { name = "CheckChatUsernameResultPublicGroupsUnavailable", is_trait = false },
  { name = "CheckChatUsernameResultUsernameInvalid", is_trait = false },
  { name = "CheckChatUsernameResultUsernameOccupied", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl CheckChatUsernameResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<CheckChatUsernameResult> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.CheckChatUsernameResult.supers]]
name = "Object"

[[rtd.CheckChatUsernameResult.supers]]
name = "RObject"
[[rtd.CheckChatUsernameResult.supers]]
name = "Debug"







[rtd.RTDCheckChatUsernameResultType]
clz_name = "RTDCheckChatUsernameResultType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "CheckChatUsernameResultOk", is_trait = false },
  { name = "CheckChatUsernameResultPublicChatsTooMuch", is_trait = false },
  { name = "CheckChatUsernameResultPublicGroupsUnavailable", is_trait = false },
  { name = "CheckChatUsernameResultUsernameInvalid", is_trait = false },
  { name = "CheckChatUsernameResultUsernameOccupied", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDCheckChatUsernameResultType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDCheckChatUsernameResultType)(text.as_ref()) }
}
""",
]




[rtd.CheckChatUsernameResultOk]
origin_name = "checkChatUsernameResultOk"
clz_name = "CheckChatUsernameResultOk"
is_private = false
clz_is_trait = false
clz_description = """ The username can be set.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsernameResultOk {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsernameResultOk.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsernameResultOk.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsernameResultOk" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsernameResultOk """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsernameResultOk.supers]]
name = "CheckChatUsernameResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CheckChatUsernameResultUsernameInvalid]
origin_name = "checkChatUsernameResultUsernameInvalid"
clz_name = "CheckChatUsernameResultUsernameInvalid"
is_private = false
clz_is_trait = false
clz_description = """ The username is invalid.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsernameResultUsernameInvalid {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsernameResultUsernameInvalid.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsernameResultUsernameInvalid.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsernameResultUsernameInvalid" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsernameResultUsernameInvalid """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsernameResultUsernameInvalid.supers]]
name = "CheckChatUsernameResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CheckChatUsernameResultUsernameOccupied]
origin_name = "checkChatUsernameResultUsernameOccupied"
clz_name = "CheckChatUsernameResultUsernameOccupied"
is_private = false
clz_is_trait = false
clz_description = """ The username is occupied.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsernameResultUsernameOccupied {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsernameResultUsernameOccupied.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsernameResultUsernameOccupied.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsernameResultUsernameOccupied" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsernameResultUsernameOccupied """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsernameResultUsernameOccupied.supers]]
name = "CheckChatUsernameResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CheckChatUsernameResultPublicChatsTooMuch]
origin_name = "checkChatUsernameResultPublicChatsTooMuch"
clz_name = "CheckChatUsernameResultPublicChatsTooMuch"
is_private = false
clz_is_trait = false
clz_description = """ The user has too much public chats, one of them should be made private first.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsernameResultPublicChatsTooMuch {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsernameResultPublicChatsTooMuch.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsernameResultPublicChatsTooMuch.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsernameResultPublicChatsTooMuch" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsernameResultPublicChatsTooMuch """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsernameResultPublicChatsTooMuch.supers]]
name = "CheckChatUsernameResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.CheckChatUsernameResultPublicGroupsUnavailable]
origin_name = "checkChatUsernameResultPublicGroupsUnavailable"
clz_name = "CheckChatUsernameResultPublicGroupsUnavailable"
is_private = false
clz_is_trait = false
clz_description = """ The user can't be a member of a public supergroup.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsernameResultPublicGroupsUnavailable {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsernameResultPublicGroupsUnavailable.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsernameResultPublicGroupsUnavailable.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsernameResultPublicGroupsUnavailable" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsernameResultPublicGroupsUnavailable """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsernameResultPublicGroupsUnavailable.supers]]
name = "CheckChatUsernameResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ConnectedWebsite]
origin_name = "connectedWebsite"
clz_name = "ConnectedWebsite"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about one website the current user is logged in with Telegram.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Website identifier. """, tags = [  ] },
  { name = "domain_name", class = "Option<String>", description = """ The domain name of the website. """, tags = [  ] },
  { name = "bot_user_id", class = "Option<i32>", description = """ User identifier of a bot linked with the website. """, tags = [  ] },
  { name = "browser", class = "Option<String>", description = """ The version of a browser used to log in. """, tags = [  ] },
  { name = "platform", class = "Option<String>", description = """ Operating system the browser is running on. """, tags = [  ] },
  { name = "log_in_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user was logged in. """, tags = [  ] },
  { name = "last_active_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when obtained authorization was last used. """, tags = [  ] },
  { name = "ip", class = "Option<String>", description = """ IP address from which the user was logged in, in human-readable format. """, tags = [  ] },
  { name = "location", class = "Option<String>", description = """ Human-readable description of a country and a region, from which the user was logged in, based on the IP address. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectedWebsite {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectedWebsite.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectedWebsite.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectedWebsite" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectedWebsite """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ConnectedWebsites]
origin_name = "connectedWebsites"
clz_name = "ConnectedWebsites"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of websites the current user is logged in with Telegram.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "websites", class = "Option<Vec<ConnectedWebsite>>", description = """ List of connected websites. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectedWebsites {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectedWebsites.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectedWebsites.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectedWebsites" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectedWebsites """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ConnectionState]
origin_name = "ConnectionState"
clz_name = "ConnectionState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the current state of the connection to Telegram servers.  """
has_subclasses = true
sub_classes = [
  { name = "ConnectionStateConnecting", is_trait = false },
  { name = "ConnectionStateConnectingToProxy", is_trait = false },
  { name = "ConnectionStateReady", is_trait = false },
  { name = "ConnectionStateUpdating", is_trait = false },
  { name = "ConnectionStateWaitingForNetwork", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ConnectionState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ConnectionState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ConnectionState.supers]]
name = "Object"

[[rtd.ConnectionState.supers]]
name = "RObject"
[[rtd.ConnectionState.supers]]
name = "Debug"







[rtd.RTDConnectionStateType]
clz_name = "RTDConnectionStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ConnectionStateConnecting", is_trait = false },
  { name = "ConnectionStateConnectingToProxy", is_trait = false },
  { name = "ConnectionStateReady", is_trait = false },
  { name = "ConnectionStateUpdating", is_trait = false },
  { name = "ConnectionStateWaitingForNetwork", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDConnectionStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDConnectionStateType)(text.as_ref()) }
}
""",
]




[rtd.ConnectionStateWaitingForNetwork]
origin_name = "connectionStateWaitingForNetwork"
clz_name = "ConnectionStateWaitingForNetwork"
is_private = false
clz_is_trait = false
clz_description = """ Currently waiting for the network to become available. Use SetNetworkType to change the available network type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectionStateWaitingForNetwork {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectionStateWaitingForNetwork.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectionStateWaitingForNetwork.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectionStateWaitingForNetwork" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectionStateWaitingForNetwork """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ConnectionStateWaitingForNetwork.supers]]
name = "ConnectionState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ConnectionStateConnectingToProxy]
origin_name = "connectionStateConnectingToProxy"
clz_name = "ConnectionStateConnectingToProxy"
is_private = false
clz_is_trait = false
clz_description = """ Currently establishing a connection with a proxy server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectionStateConnectingToProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectionStateConnectingToProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectionStateConnectingToProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectionStateConnectingToProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectionStateConnectingToProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ConnectionStateConnectingToProxy.supers]]
name = "ConnectionState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ConnectionStateConnecting]
origin_name = "connectionStateConnecting"
clz_name = "ConnectionStateConnecting"
is_private = false
clz_is_trait = false
clz_description = """ Currently establishing a connection to the Telegram servers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectionStateConnecting {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectionStateConnecting.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectionStateConnecting.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectionStateConnecting" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectionStateConnecting """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ConnectionStateConnecting.supers]]
name = "ConnectionState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ConnectionStateUpdating]
origin_name = "connectionStateUpdating"
clz_name = "ConnectionStateUpdating"
is_private = false
clz_is_trait = false
clz_description = """ Downloading data received while the client was offline.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectionStateUpdating {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectionStateUpdating.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectionStateUpdating.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectionStateUpdating" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectionStateUpdating """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ConnectionStateUpdating.supers]]
name = "ConnectionState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ConnectionStateReady]
origin_name = "connectionStateReady"
clz_name = "ConnectionStateReady"
is_private = false
clz_is_trait = false
clz_description = """ There is a working connection to the Telegram servers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ConnectionStateReady {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ConnectionStateReady.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ConnectionStateReady.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "connectionStateReady" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ConnectionStateReady """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ConnectionStateReady.supers]]
name = "ConnectionState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Contact]
origin_name = "contact"
clz_name = "Contact"
is_private = false
clz_is_trait = false
clz_description = """ Describes a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ Phone number of the user. """, tags = [  ] },
  { name = "first_name", class = "Option<String>", description = """ First name of the user; 1-255 characters in length. """, tags = [  ] },
  { name = "last_name", class = "Option<String>", description = """ Last name of the user. """, tags = [  ] },
  { name = "vcard", class = "Option<String>", description = """ Additional data about the user in a form of vCard; 0-2048 bytes in length. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the user, if known; otherwise 0. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Contact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Contact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Contact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "contact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Contact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Count]
origin_name = "count"
clz_name = "Count"
is_private = false
clz_is_trait = false
clz_description = """ Contains a counter.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "count", class = "Option<i32>", description = """ Count. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Count {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Count.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Count.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "count" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Count """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.CustomRequestResult]
origin_name = "customRequestResult"
clz_name = "CustomRequestResult"
is_private = false
clz_is_trait = false
clz_description = """ Contains the result of a custom request.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "result", class = "Option<String>", description = """ A JSON-serialized result. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CustomRequestResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CustomRequestResult.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CustomRequestResult.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "customRequestResult" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CustomRequestResult """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.DatabaseStatistics]
origin_name = "databaseStatistics"
clz_name = "DatabaseStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Contains database statistics.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "statistics", class = "Option<String>", description = """ Database statistics in an unspecified human-readable format. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DatabaseStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DatabaseStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DatabaseStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "databaseStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DatabaseStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Date]
origin_name = "date"
clz_name = "Date"
is_private = false
clz_is_trait = false
clz_description = """ Represents a date according to the Gregorian calendar.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "day", class = "Option<i32>", description = """ Day of the month, 1-31. """, tags = [  ] },
  { name = "month", class = "Option<i32>", description = """ Month, 1-12. """, tags = [  ] },
  { name = "year", class = "Option<i32>", description = """ Year, 1-9999. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Date {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Date.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Date.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "date" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Date """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.DatedFile]
origin_name = "datedFile"
clz_name = "DatedFile"
is_private = false
clz_is_trait = false
clz_description = """ File with the date it was uploaded.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file", class = "Option<File>", description = """ The file. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the file was uploaded. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DatedFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DatedFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DatedFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "datedFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DatedFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.DeepLinkInfo]
origin_name = "deepLinkInfo"
clz_name = "DeepLinkInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a tg:// deep link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<FormattedText>", description = """ Text to be shown to the user. """, tags = [  ] },
  { name = "need_update_application", class = "Option<bool>", description = """ True, if user should be asked to update the application. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeepLinkInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeepLinkInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeepLinkInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deepLinkInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeepLinkInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.DeviceToken]
origin_name = "DeviceToken"
clz_name = "DeviceToken"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a data needed to subscribe for push notifications through  """
has_subclasses = true
sub_classes = [
  { name = "DeviceTokenApplePush", is_trait = false },
  { name = "DeviceTokenApplePushVoIP", is_trait = false },
  { name = "DeviceTokenBlackBerryPush", is_trait = false },
  { name = "DeviceTokenFirebaseCloudMessaging", is_trait = false },
  { name = "DeviceTokenMicrosoftPush", is_trait = false },
  { name = "DeviceTokenMicrosoftPushVoIP", is_trait = false },
  { name = "DeviceTokenSimplePush", is_trait = false },
  { name = "DeviceTokenTizenPush", is_trait = false },
  { name = "DeviceTokenUbuntuPush", is_trait = false },
  { name = "DeviceTokenWebPush", is_trait = false },
  { name = "DeviceTokenWindowsPush", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl DeviceToken {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<DeviceToken> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.DeviceToken.supers]]
name = "Object"

[[rtd.DeviceToken.supers]]
name = "RObject"
[[rtd.DeviceToken.supers]]
name = "Debug"







[rtd.RTDDeviceTokenType]
clz_name = "RTDDeviceTokenType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "DeviceTokenApplePush", is_trait = false },
  { name = "DeviceTokenApplePushVoIP", is_trait = false },
  { name = "DeviceTokenBlackBerryPush", is_trait = false },
  { name = "DeviceTokenFirebaseCloudMessaging", is_trait = false },
  { name = "DeviceTokenMicrosoftPush", is_trait = false },
  { name = "DeviceTokenMicrosoftPushVoIP", is_trait = false },
  { name = "DeviceTokenSimplePush", is_trait = false },
  { name = "DeviceTokenTizenPush", is_trait = false },
  { name = "DeviceTokenUbuntuPush", is_trait = false },
  { name = "DeviceTokenWebPush", is_trait = false },
  { name = "DeviceTokenWindowsPush", is_trait = false },
  
]
fields_size = 11
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDDeviceTokenType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDDeviceTokenType)(text.as_ref()) }
}
""",
]




[rtd.DeviceTokenFirebaseCloudMessaging]
origin_name = "deviceTokenFirebaseCloudMessaging"
clz_name = "DeviceTokenFirebaseCloudMessaging"
is_private = false
clz_is_trait = false
clz_description = """ A token for Firebase Cloud Messaging.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "token", class = "Option<String>", description = """ Device registration token; may be empty to de-register a device. """, tags = [  ] },
  { name = "encrypt", class = "Option<bool>", description = """ True, if push notifications should be additionally encrypted. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenFirebaseCloudMessaging {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenFirebaseCloudMessaging.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenFirebaseCloudMessaging.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenFirebaseCloudMessaging" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenFirebaseCloudMessaging """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenFirebaseCloudMessaging.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenApplePush]
origin_name = "deviceTokenApplePush"
clz_name = "DeviceTokenApplePush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Apple Push Notification service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "device_token", class = "Option<String>", description = """ Device token; may be empty to de-register a device. """, tags = [  ] },
  { name = "is_app_sandbox", class = "Option<bool>", description = """ True, if App Sandbox is enabled. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenApplePush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenApplePush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenApplePush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenApplePush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenApplePush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenApplePush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenApplePushVoIP]
origin_name = "deviceTokenApplePushVoIP"
clz_name = "DeviceTokenApplePushVoIP"
is_private = false
clz_is_trait = false
clz_description = """ A token for Apple Push Notification service VoIP notifications.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "device_token", class = "Option<String>", description = """ Device token; may be empty to de-register a device. """, tags = [  ] },
  { name = "is_app_sandbox", class = "Option<bool>", description = """ True, if App Sandbox is enabled. """, tags = [  ] },
  { name = "encrypt", class = "Option<bool>", description = """ True, if push notifications should be additionally encrypted. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenApplePushVoIP {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenApplePushVoIP.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenApplePushVoIP.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenApplePushVoIP" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenApplePushVoIP """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenApplePushVoIP.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenWindowsPush]
origin_name = "deviceTokenWindowsPush"
clz_name = "DeviceTokenWindowsPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Windows Push Notification Services.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "access_token", class = "Option<String>", description = """ The access token that will be used to send notifications; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenWindowsPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenWindowsPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenWindowsPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenWindowsPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenWindowsPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenWindowsPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenMicrosoftPush]
origin_name = "deviceTokenMicrosoftPush"
clz_name = "DeviceTokenMicrosoftPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Microsoft Push Notification Service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "channel_uri", class = "Option<String>", description = """ Push notification channel URI; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenMicrosoftPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenMicrosoftPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenMicrosoftPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenMicrosoftPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenMicrosoftPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenMicrosoftPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenMicrosoftPushVoIP]
origin_name = "deviceTokenMicrosoftPushVoIP"
clz_name = "DeviceTokenMicrosoftPushVoIP"
is_private = false
clz_is_trait = false
clz_description = """ A token for Microsoft Push Notification Service VoIP channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "channel_uri", class = "Option<String>", description = """ Push notification channel URI; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenMicrosoftPushVoIP {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenMicrosoftPushVoIP.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenMicrosoftPushVoIP.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenMicrosoftPushVoIP" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenMicrosoftPushVoIP """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenMicrosoftPushVoIP.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenWebPush]
origin_name = "deviceTokenWebPush"
clz_name = "DeviceTokenWebPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for web Push API.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "endpoint", class = "Option<String>", description = """ Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device. """, tags = [  ] },
  { name = "p256dh_base64url", class = "Option<String>", description = """ Base64url-encoded P-256 elliptic curve Diffie-Hellman public key. """, tags = [  ] },
  { name = "auth_base64url", class = "Option<String>", description = """ Base64url-encoded authentication secret. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenWebPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenWebPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenWebPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenWebPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenWebPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenWebPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenSimplePush]
origin_name = "deviceTokenSimplePush"
clz_name = "DeviceTokenSimplePush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Simple Push API for Firefox OS.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "endpoint", class = "Option<String>", description = """ Absolute URL exposed by the push service where the application server can send push messages; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenSimplePush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenSimplePush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenSimplePush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenSimplePush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenSimplePush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenSimplePush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenUbuntuPush]
origin_name = "deviceTokenUbuntuPush"
clz_name = "DeviceTokenUbuntuPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Ubuntu Push  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "token", class = "Option<String>", description = """ Token; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenUbuntuPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenUbuntuPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenUbuntuPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenUbuntuPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenUbuntuPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenUbuntuPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenBlackBerryPush]
origin_name = "deviceTokenBlackBerryPush"
clz_name = "DeviceTokenBlackBerryPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for BlackBerry Push Service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "token", class = "Option<String>", description = """ Token; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenBlackBerryPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenBlackBerryPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenBlackBerryPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenBlackBerryPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenBlackBerryPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenBlackBerryPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.DeviceTokenTizenPush]
origin_name = "deviceTokenTizenPush"
clz_name = "DeviceTokenTizenPush"
is_private = false
clz_is_trait = false
clz_description = """ A token for Tizen Push Service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "reg_id", class = "Option<String>", description = """ Push service registration identifier; may be empty to de-register a device. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeviceTokenTizenPush {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeviceTokenTizenPush.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeviceTokenTizenPush.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deviceTokenTizenPush" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeviceTokenTizenPush """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeviceTokenTizenPush.supers]]
name = "DeviceToken"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Document]
origin_name = "document"
clz_name = "Document"
is_private = false
clz_is_trait = false
clz_description = """ Describes a document of any type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_name", class = "Option<String>", description = """ Original name of the file; as defined by the sender. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the file; as defined by the sender. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Document thumbnail; as defined by the sender; may be null. """, tags = [  ] },
  { name = "document", class = "Option<File>", description = """ File containing the document. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Document {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Document.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Document.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "document" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Document """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.DraftMessage]
origin_name = "draftMessage"
clz_name = "DraftMessage"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a message draft.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ Identifier of the message to reply to; 0 if none. """, tags = [  ] },
  { name = "input_message_text", class = "Option<Box<InputMessageContent>>", description = """ Content of the message draft; this should always be of type inputMessageText. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DraftMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for DraftMessage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.DraftMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DraftMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "draftMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DraftMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.EmailAddressAuthenticationCodeInfo]
origin_name = "emailAddressAuthenticationCodeInfo"
clz_name = "EmailAddressAuthenticationCodeInfo"
is_private = false
clz_is_trait = false
clz_description = """ Information about the email address authentication code that was sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "email_address_pattern", class = "Option<String>", description = """ Pattern of the email address to which an authentication code was sent. """, tags = [  ] },
  { name = "length", class = "Option<i32>", description = """ Length of the code; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EmailAddressAuthenticationCodeInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.EmailAddressAuthenticationCodeInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EmailAddressAuthenticationCodeInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "emailAddressAuthenticationCodeInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EmailAddressAuthenticationCodeInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.EncryptedCredentials]
origin_name = "encryptedCredentials"
clz_name = "EncryptedCredentials"
is_private = false
clz_is_trait = false
clz_description = """ Contains encrypted Telegram Passport data credentials.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ The encrypted credentials. """, tags = [  ] },
  { name = "hash", class = "Option<String>", description = """ The decrypted data hash. """, tags = [  ] },
  { name = "secret", class = "Option<String>", description = """ Secret for data decryption, encrypted with the service's public key. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EncryptedCredentials {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.EncryptedCredentials.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EncryptedCredentials.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "encryptedCredentials" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EncryptedCredentials """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.EncryptedPassportElement]
origin_name = "encryptedPassportElement"
clz_name = "EncryptedPassportElement"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about an encrypted Telegram Passport element; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Type of Telegram Passport element. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ Encrypted JSON-encoded data about the user. """, tags = [  ] },
  { name = "front_side", class = "Option<DatedFile>", description = """ The front side of an identity document. """, tags = [  ] },
  { name = "reverse_side", class = "Option<DatedFile>", description = """ The reverse side of an identity document; may be null. """, tags = [  ] },
  { name = "selfie", class = "Option<DatedFile>", description = """ Selfie with the document; may be null. """, tags = [  ] },
  { name = "translation", class = "Option<Vec<DatedFile>>", description = """ List of files containing a certified English translation of the document. """, tags = [  ] },
  { name = "files", class = "Option<Vec<DatedFile>>", description = """ List of attached files. """, tags = [  ] },
  { name = "value", class = "Option<String>", description = """ Unencrypted data, phone number or email address. """, tags = [  ] },
  { name = "hash", class = "Option<String>", description = """ Hash of the entire element. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EncryptedPassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EncryptedPassportElement {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EncryptedPassportElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EncryptedPassportElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "encryptedPassportElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EncryptedPassportElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Error]
origin_name = "error"
clz_name = "Error"
is_private = false
clz_is_trait = false
clz_description = """ An object of this type can be returned on every function call, in case of an error.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<i32>", description = """ Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user. """, tags = [  ] },
  { name = "message", class = "Option<String>", description = """ Error message; subject to future changes. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Error {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Error.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Error.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "error" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Error """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.File]
origin_name = "file"
clz_name = "File"
is_private = false
clz_is_trait = false
clz_description = """ Represents a file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique file identifier. """, tags = [  ] },
  { name = "size", class = "Option<i32>", description = """ File size; 0 if unknown. """, tags = [  ] },
  { name = "expected_size", class = "Option<i32>", description = """ Expected file size in case the exact file size is unknown, but an approximate size is known. Can be used to show download/upload progress. """, tags = [  ] },
  { name = "local", class = "Option<LocalFile>", description = """ Information about the local copy of the file. """, tags = [  ] },
  { name = "remote", class = "Option<RemoteFile>", description = """ Information about the remote copy of the file. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl File {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.File.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.File.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "file" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::File """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.FilePart]
origin_name = "filePart"
clz_name = "FilePart"
is_private = false
clz_is_trait = false
clz_description = """ Contains a part of a file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ File bytes. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FilePart {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FilePart.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FilePart.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "filePart" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FilePart """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.FileType]
origin_name = "FileType"
clz_name = "FileType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the type of a file.  """
has_subclasses = true
sub_classes = [
  { name = "FileTypeAnimation", is_trait = false },
  { name = "FileTypeAudio", is_trait = false },
  { name = "FileTypeDocument", is_trait = false },
  { name = "FileTypeNone", is_trait = false },
  { name = "FileTypePhoto", is_trait = false },
  { name = "FileTypeProfilePhoto", is_trait = false },
  { name = "FileTypeSecret", is_trait = false },
  { name = "FileTypeSecretThumbnail", is_trait = false },
  { name = "FileTypeSecure", is_trait = false },
  { name = "FileTypeSticker", is_trait = false },
  { name = "FileTypeThumbnail", is_trait = false },
  { name = "FileTypeUnknown", is_trait = false },
  { name = "FileTypeVideo", is_trait = false },
  { name = "FileTypeVideoNote", is_trait = false },
  { name = "FileTypeVoiceNote", is_trait = false },
  { name = "FileTypeWallpaper", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl FileType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<FileType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.FileType.supers]]
name = "Object"

[[rtd.FileType.supers]]
name = "RObject"
[[rtd.FileType.supers]]
name = "Debug"







[rtd.RTDFileTypeType]
clz_name = "RTDFileTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "FileTypeAnimation", is_trait = false },
  { name = "FileTypeAudio", is_trait = false },
  { name = "FileTypeDocument", is_trait = false },
  { name = "FileTypeNone", is_trait = false },
  { name = "FileTypePhoto", is_trait = false },
  { name = "FileTypeProfilePhoto", is_trait = false },
  { name = "FileTypeSecret", is_trait = false },
  { name = "FileTypeSecretThumbnail", is_trait = false },
  { name = "FileTypeSecure", is_trait = false },
  { name = "FileTypeSticker", is_trait = false },
  { name = "FileTypeThumbnail", is_trait = false },
  { name = "FileTypeUnknown", is_trait = false },
  { name = "FileTypeVideo", is_trait = false },
  { name = "FileTypeVideoNote", is_trait = false },
  { name = "FileTypeVoiceNote", is_trait = false },
  { name = "FileTypeWallpaper", is_trait = false },
  
]
fields_size = 16
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDFileTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDFileTypeType)(text.as_ref()) }
}
""",
]




[rtd.FileTypeNone]
origin_name = "fileTypeNone"
clz_name = "FileTypeNone"
is_private = false
clz_is_trait = false
clz_description = """ The data is not a file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeNone {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeNone.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeNone.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeNone" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeNone """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeNone.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeAnimation]
origin_name = "fileTypeAnimation"
clz_name = "FileTypeAnimation"
is_private = false
clz_is_trait = false
clz_description = """ The file is an animation.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeAnimation.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeAudio]
origin_name = "fileTypeAudio"
clz_name = "FileTypeAudio"
is_private = false
clz_is_trait = false
clz_description = """ The file is an audio file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeAudio.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeDocument]
origin_name = "fileTypeDocument"
clz_name = "FileTypeDocument"
is_private = false
clz_is_trait = false
clz_description = """ The file is a document.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeDocument.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypePhoto]
origin_name = "fileTypePhoto"
clz_name = "FileTypePhoto"
is_private = false
clz_is_trait = false
clz_description = """ The file is a photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypePhoto.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeProfilePhoto]
origin_name = "fileTypeProfilePhoto"
clz_name = "FileTypeProfilePhoto"
is_private = false
clz_is_trait = false
clz_description = """ The file is a profile photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeProfilePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeProfilePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeProfilePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeProfilePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeProfilePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeProfilePhoto.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeSecret]
origin_name = "fileTypeSecret"
clz_name = "FileTypeSecret"
is_private = false
clz_is_trait = false
clz_description = """ The file was sent to a secret chat (the file type is not known to the server).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeSecret {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeSecret.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeSecret.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeSecret" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeSecret """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeSecret.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeSecretThumbnail]
origin_name = "fileTypeSecretThumbnail"
clz_name = "FileTypeSecretThumbnail"
is_private = false
clz_is_trait = false
clz_description = """ The file is a thumbnail of a file from a secret chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeSecretThumbnail {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeSecretThumbnail.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeSecretThumbnail.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeSecretThumbnail" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeSecretThumbnail """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeSecretThumbnail.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeSecure]
origin_name = "fileTypeSecure"
clz_name = "FileTypeSecure"
is_private = false
clz_is_trait = false
clz_description = """ The file is a file from Secure storage used for storing Telegram Passport files.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeSecure {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeSecure.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeSecure.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeSecure" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeSecure """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeSecure.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeSticker]
origin_name = "fileTypeSticker"
clz_name = "FileTypeSticker"
is_private = false
clz_is_trait = false
clz_description = """ The file is a sticker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeSticker.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeThumbnail]
origin_name = "fileTypeThumbnail"
clz_name = "FileTypeThumbnail"
is_private = false
clz_is_trait = false
clz_description = """ The file is a thumbnail of another file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeThumbnail {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeThumbnail.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeThumbnail.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeThumbnail" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeThumbnail """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeThumbnail.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeUnknown]
origin_name = "fileTypeUnknown"
clz_name = "FileTypeUnknown"
is_private = false
clz_is_trait = false
clz_description = """ The file type is not yet known.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeUnknown {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeUnknown.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeUnknown.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeUnknown" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeUnknown """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeUnknown.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeVideo]
origin_name = "fileTypeVideo"
clz_name = "FileTypeVideo"
is_private = false
clz_is_trait = false
clz_description = """ The file is a video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeVideo.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeVideoNote]
origin_name = "fileTypeVideoNote"
clz_name = "FileTypeVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ The file is a video note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeVideoNote.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeVoiceNote]
origin_name = "fileTypeVoiceNote"
clz_name = "FileTypeVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ The file is a voice note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeVoiceNote.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FileTypeWallpaper]
origin_name = "fileTypeWallpaper"
clz_name = "FileTypeWallpaper"
is_private = false
clz_is_trait = false
clz_description = """ The file is a wallpaper.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FileTypeWallpaper {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FileTypeWallpaper.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FileTypeWallpaper.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "fileTypeWallpaper" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FileTypeWallpaper """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FileTypeWallpaper.supers]]
name = "FileType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.FormattedText]
origin_name = "formattedText"
clz_name = "FormattedText"
is_private = false
clz_is_trait = false
clz_description = """ A text with some entities.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ The text. """, tags = [  ] },
  { name = "entities", class = "Option<Vec<TextEntity>>", description = """ Entities contained in the text. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FormattedText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FormattedText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FormattedText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "formattedText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FormattedText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.FoundMessages]
origin_name = "foundMessages"
clz_name = "FoundMessages"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of messages found by a search.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "messages", class = "Option<Vec<Message>>", description = """ List of messages. """, tags = [  ] },
  { name = "next_from_search_id", class = "Option<i64>", description = """ Value to pass as from_search_id to get more results. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FoundMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FoundMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FoundMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "foundMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FoundMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Game]
origin_name = "game"
clz_name = "Game"
is_private = false
clz_is_trait = false
clz_description = """ Describes a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Game ID. """, tags = [  ] },
  { name = "short_name", class = "Option<String>", description = """ Game short name. To share a game use the URL https://t.me/{bot_username}?game={game_short_name}. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Game title. """, tags = [  ] },
  { name = "text", class = "Option<FormattedText>", description = """ Game text, usually containing scoreboards for a game. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Game description. """, tags = [  ] },
  { name = "photo", class = "Option<Photo>", description = """ Game photo. """, tags = [  ] },
  { name = "animation", class = "Option<Animation>", description = """ Game animation; may be null. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Game {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Game.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Game.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "game" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Game """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.GameHighScore]
origin_name = "gameHighScore"
clz_name = "GameHighScore"
is_private = false
clz_is_trait = false
clz_description = """ Contains one row of the game high score table.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "position", class = "Option<i32>", description = """ Position in the high score table. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "score", class = "Option<i32>", description = """ User score. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GameHighScore {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GameHighScore.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GameHighScore.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "gameHighScore" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GameHighScore """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.GameHighScores]
origin_name = "gameHighScores"
clz_name = "GameHighScores"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of game high scores.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "scores", class = "Option<Vec<GameHighScore>>", description = """ A list of game high scores. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GameHighScores {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GameHighScores.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GameHighScores.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "gameHighScores" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GameHighScores """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Hashtags]
origin_name = "hashtags"
clz_name = "Hashtags"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of hashtags.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "hashtags", class = "Option<Vec<String>>", description = """ A list of hashtags. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Hashtags {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Hashtags.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Hashtags.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "hashtags" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Hashtags """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.HttpUrl]
origin_name = "httpUrl"
clz_name = "HttpUrl"
is_private = false
clz_is_trait = false
clz_description = """ Contains an HTTP URL.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ The URL. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl HttpUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.HttpUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.HttpUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "httpUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::HttpUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.IdentityDocument]
origin_name = "identityDocument"
clz_name = "IdentityDocument"
is_private = false
clz_is_trait = false
clz_description = """ An identity document.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "number", class = "Option<String>", description = """ Document number; 1-24 characters. """, tags = [  ] },
  { name = "expiry_date", class = "Option<Date>", description = """ Document expiry date; may be null. """, tags = [  ] },
  { name = "front_side", class = "Option<DatedFile>", description = """ Front side of the document. """, tags = [  ] },
  { name = "reverse_side", class = "Option<DatedFile>", description = """ Reverse side of the document; only for driver license and identity card. """, tags = [  ] },
  { name = "selfie", class = "Option<DatedFile>", description = """ Selfie with the document; may be null. """, tags = [  ] },
  { name = "translation", class = "Option<Vec<DatedFile>>", description = """ List of files containing a certified English translation of the document. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl IdentityDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.IdentityDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.IdentityDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "identityDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::IdentityDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ImportedContacts]
origin_name = "importedContacts"
clz_name = "ImportedContacts"
is_private = false
clz_is_trait = false
clz_description = """ Represents the result of an ImportContacts request.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user. """, tags = [  ] },
  { name = "importer_count", class = "Option<Vec<i32>>", description = """ The number of users that imported the corresponding contact; 0 for already registered users or if unavailable. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ImportedContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ImportedContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ImportedContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "importedContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ImportedContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InlineKeyboardButton]
origin_name = "inlineKeyboardButton"
clz_name = "InlineKeyboardButton"
is_private = false
clz_is_trait = false
clz_description = """ Represents a single button in an inline keyboard.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Text of the button. """, tags = [  ] },
  { name = "type_", class = "Option<Box<InlineKeyboardButtonType>>", description = """ Type of the button. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButton {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InlineKeyboardButton {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InlineKeyboardButton.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButton.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButton" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButton """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InlineKeyboardButtonType]
origin_name = "InlineKeyboardButtonType"
clz_name = "InlineKeyboardButtonType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the type of an inline keyboard button.  """
has_subclasses = true
sub_classes = [
  { name = "InlineKeyboardButtonTypeBuy", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallback", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallbackGame", is_trait = false },
  { name = "InlineKeyboardButtonTypeSwitchInline", is_trait = false },
  { name = "InlineKeyboardButtonTypeUrl", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InlineKeyboardButtonType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InlineKeyboardButtonType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InlineKeyboardButtonType.supers]]
name = "Object"

[[rtd.InlineKeyboardButtonType.supers]]
name = "RObject"
[[rtd.InlineKeyboardButtonType.supers]]
name = "Debug"







[rtd.RTDInlineKeyboardButtonTypeType]
clz_name = "RTDInlineKeyboardButtonTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InlineKeyboardButtonTypeBuy", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallback", is_trait = false },
  { name = "InlineKeyboardButtonTypeCallbackGame", is_trait = false },
  { name = "InlineKeyboardButtonTypeSwitchInline", is_trait = false },
  { name = "InlineKeyboardButtonTypeUrl", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInlineKeyboardButtonTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInlineKeyboardButtonTypeType)(text.as_ref()) }
}
""",
]




[rtd.InlineKeyboardButtonTypeUrl]
origin_name = "inlineKeyboardButtonTypeUrl"
clz_name = "InlineKeyboardButtonTypeUrl"
is_private = false
clz_is_trait = false
clz_description = """ A button that opens a specified URL.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ HTTP or tg:// URL to open. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButtonTypeUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineKeyboardButtonTypeUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButtonTypeUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButtonTypeUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButtonTypeUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineKeyboardButtonTypeUrl.supers]]
name = "InlineKeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineKeyboardButtonTypeCallback]
origin_name = "inlineKeyboardButtonTypeCallback"
clz_name = "InlineKeyboardButtonTypeCallback"
is_private = false
clz_is_trait = false
clz_description = """ A button that sends a special callback query to a bot.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ Data to be sent to the bot via a callback query. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButtonTypeCallback {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineKeyboardButtonTypeCallback.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButtonTypeCallback.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButtonTypeCallback" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButtonTypeCallback """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineKeyboardButtonTypeCallback.supers]]
name = "InlineKeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineKeyboardButtonTypeCallbackGame]
origin_name = "inlineKeyboardButtonTypeCallbackGame"
clz_name = "InlineKeyboardButtonTypeCallbackGame"
is_private = false
clz_is_trait = false
clz_description = """ A button with a game that sends a special callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButtonTypeCallbackGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineKeyboardButtonTypeCallbackGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButtonTypeCallbackGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButtonTypeCallbackGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButtonTypeCallbackGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineKeyboardButtonTypeCallbackGame.supers]]
name = "InlineKeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineKeyboardButtonTypeSwitchInline]
origin_name = "inlineKeyboardButtonTypeSwitchInline"
clz_name = "InlineKeyboardButtonTypeSwitchInline"
is_private = false
clz_is_trait = false
clz_description = """ A button that forces an inline query to the bot to be inserted in the input field.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Inline query to be sent to the bot. """, tags = [  ] },
  { name = "in_current_chat", class = "Option<bool>", description = """ True, if the inline query should be sent from the current chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButtonTypeSwitchInline {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineKeyboardButtonTypeSwitchInline.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButtonTypeSwitchInline.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButtonTypeSwitchInline" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButtonTypeSwitchInline """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineKeyboardButtonTypeSwitchInline.supers]]
name = "InlineKeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineKeyboardButtonTypeBuy]
origin_name = "inlineKeyboardButtonTypeBuy"
clz_name = "InlineKeyboardButtonTypeBuy"
is_private = false
clz_is_trait = false
clz_description = """ A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineKeyboardButtonTypeBuy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineKeyboardButtonTypeBuy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineKeyboardButtonTypeBuy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineKeyboardButtonTypeBuy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineKeyboardButtonTypeBuy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineKeyboardButtonTypeBuy.supers]]
name = "InlineKeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResult]
origin_name = "InlineQueryResult"
clz_name = "InlineQueryResult"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a single result of an inline query.  """
has_subclasses = true
sub_classes = [
  { name = "InlineQueryResultAnimation", is_trait = false },
  { name = "InlineQueryResultArticle", is_trait = false },
  { name = "InlineQueryResultAudio", is_trait = false },
  { name = "InlineQueryResultContact", is_trait = false },
  { name = "InlineQueryResultDocument", is_trait = false },
  { name = "InlineQueryResultGame", is_trait = false },
  { name = "InlineQueryResultLocation", is_trait = false },
  { name = "InlineQueryResultPhoto", is_trait = false },
  { name = "InlineQueryResultSticker", is_trait = false },
  { name = "InlineQueryResultVenue", is_trait = false },
  { name = "InlineQueryResultVideo", is_trait = false },
  { name = "InlineQueryResultVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InlineQueryResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InlineQueryResult> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InlineQueryResult.supers]]
name = "Object"

[[rtd.InlineQueryResult.supers]]
name = "RObject"
[[rtd.InlineQueryResult.supers]]
name = "Debug"







[rtd.RTDInlineQueryResultType]
clz_name = "RTDInlineQueryResultType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InlineQueryResultAnimation", is_trait = false },
  { name = "InlineQueryResultArticle", is_trait = false },
  { name = "InlineQueryResultAudio", is_trait = false },
  { name = "InlineQueryResultContact", is_trait = false },
  { name = "InlineQueryResultDocument", is_trait = false },
  { name = "InlineQueryResultGame", is_trait = false },
  { name = "InlineQueryResultLocation", is_trait = false },
  { name = "InlineQueryResultPhoto", is_trait = false },
  { name = "InlineQueryResultSticker", is_trait = false },
  { name = "InlineQueryResultVenue", is_trait = false },
  { name = "InlineQueryResultVideo", is_trait = false },
  { name = "InlineQueryResultVoiceNote", is_trait = false },
  
]
fields_size = 12
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInlineQueryResultType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInlineQueryResultType)(text.as_ref()) }
}
""",
]




[rtd.InlineQueryResultArticle]
origin_name = "inlineQueryResultArticle"
clz_name = "InlineQueryResultArticle"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an article or web page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL of the result, if it exists. """, tags = [  ] },
  { name = "hide_url", class = "Option<bool>", description = """ True, if the URL must be not shown. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ A short description of the result. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Result thumbnail; may be null. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultArticle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultArticle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultArticle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultArticle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultArticle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultArticle.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultContact]
origin_name = "inlineQueryResultContact"
clz_name = "InlineQueryResultContact"
is_private = false
clz_is_trait = false
clz_description = """ Represents a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "contact", class = "Option<Contact>", description = """ A user contact. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Result thumbnail; may be null. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultContact.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultLocation]
origin_name = "inlineQueryResultLocation"
clz_name = "InlineQueryResultLocation"
is_private = false
clz_is_trait = false
clz_description = """ Represents a point on the map.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "location", class = "Option<Location>", description = """ Location result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Result thumbnail; may be null. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultLocation.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultVenue]
origin_name = "inlineQueryResultVenue"
clz_name = "InlineQueryResultVenue"
is_private = false
clz_is_trait = false
clz_description = """ Represents information about a venue.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "venue", class = "Option<Venue>", description = """ Venue result. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Result thumbnail; may be null. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultVenue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultVenue.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultVenue.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultVenue" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultVenue """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultVenue.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultGame]
origin_name = "inlineQueryResultGame"
clz_name = "InlineQueryResultGame"
is_private = false
clz_is_trait = false
clz_description = """ Represents information about a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "game", class = "Option<Game>", description = """ Game result. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultGame.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultAnimation]
origin_name = "inlineQueryResultAnimation"
clz_name = "InlineQueryResultAnimation"
is_private = false
clz_is_trait = false
clz_description = """ Represents an animation file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "animation", class = "Option<Animation>", description = """ Animation file. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Animation title. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultAnimation.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultAudio]
origin_name = "inlineQueryResultAudio"
clz_name = "InlineQueryResultAudio"
is_private = false
clz_is_trait = false
clz_description = """ Represents an audio file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "audio", class = "Option<Audio>", description = """ Audio file. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultAudio.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultDocument]
origin_name = "inlineQueryResultDocument"
clz_name = "InlineQueryResultDocument"
is_private = false
clz_is_trait = false
clz_description = """ Represents a document.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "document", class = "Option<Document>", description = """ Document. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Document title. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Document description. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultDocument.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultPhoto]
origin_name = "inlineQueryResultPhoto"
clz_name = "InlineQueryResultPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Represents a photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "photo", class = "Option<Photo>", description = """ Photo. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result, if known. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ A short description of the result, if known. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultPhoto.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultSticker]
origin_name = "inlineQueryResultSticker"
clz_name = "InlineQueryResultSticker"
is_private = false
clz_is_trait = false
clz_description = """ Represents a sticker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "sticker", class = "Option<Sticker>", description = """ Sticker. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultSticker.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultVideo]
origin_name = "inlineQueryResultVideo"
clz_name = "InlineQueryResultVideo"
is_private = false
clz_is_trait = false
clz_description = """ Represents a video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "video", class = "Option<Video>", description = """ Video. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the video. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Description of the video. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultVideo.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResultVoiceNote]
origin_name = "inlineQueryResultVoiceNote"
clz_name = "InlineQueryResultVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ Represents a voice note.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "voice_note", class = "Option<VoiceNote>", description = """ Voice note. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the voice note. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResultVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InlineQueryResultVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResultVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResultVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResultVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InlineQueryResultVoiceNote.supers]]
name = "InlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InlineQueryResults]
origin_name = "inlineQueryResults"
clz_name = "InlineQueryResults"
is_private = false
clz_is_trait = false
clz_description = """ Represents the results of the inline query. Use  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_query_id", class = "Option<i64>", description = """ Unique identifier of the inline query. """, tags = [  ] },
  { name = "next_offset", class = "Option<String>", description = """ The offset for the next request. If empty, there are no more results. """, tags = [  ] },
  { name = "results", class = "Option<Vec<Box<InlineQueryResult>>>", description = """ Results of the query. """, tags = [  ] },
  { name = "switch_pm_text", class = "Option<String>", description = """ If non-empty, this text should be shown on the button, which opens a private chat with the bot and sends the bot a start message with the switch_pm_parameter. """, tags = [  ] },
  { name = "switch_pm_parameter", class = "Option<String>", description = """ Parameter for the bot start message. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InlineQueryResults {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InlineQueryResults {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InlineQueryResults.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InlineQueryResults.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inlineQueryResults" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InlineQueryResults """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InputCredentials]
origin_name = "InputCredentials"
clz_name = "InputCredentials"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains information about the payment method chosen by the user.  """
has_subclasses = true
sub_classes = [
  { name = "InputCredentialsAndroidPay", is_trait = false },
  { name = "InputCredentialsApplePay", is_trait = false },
  { name = "InputCredentialsNew", is_trait = false },
  { name = "InputCredentialsSaved", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputCredentials {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputCredentials> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputCredentials.supers]]
name = "Object"

[[rtd.InputCredentials.supers]]
name = "RObject"
[[rtd.InputCredentials.supers]]
name = "Debug"







[rtd.RTDInputCredentialsType]
clz_name = "RTDInputCredentialsType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputCredentialsAndroidPay", is_trait = false },
  { name = "InputCredentialsApplePay", is_trait = false },
  { name = "InputCredentialsNew", is_trait = false },
  { name = "InputCredentialsSaved", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputCredentialsType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputCredentialsType)(text.as_ref()) }
}
""",
]




[rtd.InputCredentialsSaved]
origin_name = "inputCredentialsSaved"
clz_name = "InputCredentialsSaved"
is_private = false
clz_is_trait = false
clz_description = """ Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "saved_credentials_id", class = "Option<String>", description = """ Identifier of the saved credentials. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputCredentialsSaved {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputCredentialsSaved.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputCredentialsSaved.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputCredentialsSaved" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputCredentialsSaved """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputCredentialsSaved.supers]]
name = "InputCredentials"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputCredentialsNew]
origin_name = "inputCredentialsNew"
clz_name = "InputCredentialsNew"
is_private = false
clz_is_trait = false
clz_description = """ Applies if a user enters new credentials on a payment provider website.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ Contains JSON-encoded data with a credential identifier from the payment provider. """, tags = [  ] },
  { name = "allow_save", class = "Option<bool>", description = """ True, if the credential identifier can be saved on the server side. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputCredentialsNew {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputCredentialsNew.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputCredentialsNew.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputCredentialsNew" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputCredentialsNew """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputCredentialsNew.supers]]
name = "InputCredentials"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputCredentialsAndroidPay]
origin_name = "inputCredentialsAndroidPay"
clz_name = "InputCredentialsAndroidPay"
is_private = false
clz_is_trait = false
clz_description = """ Applies if a user enters new credentials using Android Pay.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ JSON-encoded data with the credential identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputCredentialsAndroidPay {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputCredentialsAndroidPay.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputCredentialsAndroidPay.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputCredentialsAndroidPay" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputCredentialsAndroidPay """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputCredentialsAndroidPay.supers]]
name = "InputCredentials"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputCredentialsApplePay]
origin_name = "inputCredentialsApplePay"
clz_name = "InputCredentialsApplePay"
is_private = false
clz_is_trait = false
clz_description = """ Applies if a user enters new credentials using Apple Pay.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "data", class = "Option<String>", description = """ JSON-encoded data with the credential identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputCredentialsApplePay {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputCredentialsApplePay.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputCredentialsApplePay.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputCredentialsApplePay" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputCredentialsApplePay """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputCredentialsApplePay.supers]]
name = "InputCredentials"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputFile]
origin_name = "InputFile"
clz_name = "InputFile"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Points to a file.  """
has_subclasses = true
sub_classes = [
  { name = "InputFileGenerated", is_trait = false },
  { name = "InputFileId", is_trait = false },
  { name = "InputFileLocal", is_trait = false },
  { name = "InputFileRemote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputFile> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputFile.supers]]
name = "Object"

[[rtd.InputFile.supers]]
name = "RObject"
[[rtd.InputFile.supers]]
name = "Debug"







[rtd.RTDInputFileType]
clz_name = "RTDInputFileType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputFileGenerated", is_trait = false },
  { name = "InputFileId", is_trait = false },
  { name = "InputFileLocal", is_trait = false },
  { name = "InputFileRemote", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputFileType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputFileType)(text.as_ref()) }
}
""",
]




[rtd.InputFileId]
origin_name = "inputFileId"
clz_name = "InputFileId"
is_private = false
clz_is_trait = false
clz_description = """ A file defined by its unique ID.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique file identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputFileId {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputFileId.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputFileId.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputFileId" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputFileId """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputFileId.supers]]
name = "InputFile"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputFileRemote]
origin_name = "inputFileRemote"
clz_name = "InputFileRemote"
is_private = false
clz_is_trait = false
clz_description = """ A file defined by its remote ID.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Remote file identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputFileRemote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputFileRemote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputFileRemote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputFileRemote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputFileRemote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputFileRemote.supers]]
name = "InputFile"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputFileLocal]
origin_name = "inputFileLocal"
clz_name = "InputFileLocal"
is_private = false
clz_is_trait = false
clz_description = """ A file defined by a local path.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "path", class = "Option<String>", description = """ Local path to the file. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputFileLocal {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputFileLocal.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputFileLocal.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputFileLocal" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputFileLocal """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputFileLocal.supers]]
name = "InputFile"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputFileGenerated]
origin_name = "inputFileGenerated"
clz_name = "InputFileGenerated"
is_private = false
clz_is_trait = false
clz_description = """ A file generated by the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "original_path", class = "Option<String>", description = """ Local path to a file from which the file is generated; may be empty if there is no such file. """, tags = [  ] },
  { name = "conversion", class = "Option<String>", description = """ String specifying the conversion applied to the original file; should be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage. """, tags = [  ] },
  { name = "expected_size", class = "Option<i32>", description = """ Expected size of the generated file; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputFileGenerated {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputFileGenerated.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputFileGenerated.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputFileGenerated" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputFileGenerated """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputFileGenerated.supers]]
name = "InputFile"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputIdentityDocument]
origin_name = "inputIdentityDocument"
clz_name = "InputIdentityDocument"
is_private = false
clz_is_trait = false
clz_description = """ An identity document to be saved to Telegram Passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "number", class = "Option<String>", description = """ Document number; 1-24 characters. """, tags = [  ] },
  { name = "expiry_date", class = "Option<Date>", description = """ Document expiry date, if available. """, tags = [  ] },
  { name = "front_side", class = "Option<Box<InputFile>>", description = """ Front side of the document. """, tags = [  ] },
  { name = "reverse_side", class = "Option<Box<InputFile>>", description = """ Reverse side of the document; only for driver license and identity card. """, tags = [  ] },
  { name = "selfie", class = "Option<Box<InputFile>>", description = """ Selfie with the document, if available. """, tags = [  ] },
  { name = "translation", class = "Option<Vec<Box<InputFile>>>", description = """ List of files containing a certified English translation of the document. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputIdentityDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputIdentityDocument {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputIdentityDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputIdentityDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputIdentityDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputIdentityDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InputInlineQueryResult]
origin_name = "InputInlineQueryResult"
clz_name = "InputInlineQueryResult"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a single result of an inline query; for bots only.  """
has_subclasses = true
sub_classes = [
  { name = "InputInlineQueryResultAnimatedGif", is_trait = false },
  { name = "InputInlineQueryResultAnimatedMpeg4", is_trait = false },
  { name = "InputInlineQueryResultArticle", is_trait = false },
  { name = "InputInlineQueryResultAudio", is_trait = false },
  { name = "InputInlineQueryResultContact", is_trait = false },
  { name = "InputInlineQueryResultDocument", is_trait = false },
  { name = "InputInlineQueryResultGame", is_trait = false },
  { name = "InputInlineQueryResultLocation", is_trait = false },
  { name = "InputInlineQueryResultPhoto", is_trait = false },
  { name = "InputInlineQueryResultSticker", is_trait = false },
  { name = "InputInlineQueryResultVenue", is_trait = false },
  { name = "InputInlineQueryResultVideo", is_trait = false },
  { name = "InputInlineQueryResultVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputInlineQueryResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputInlineQueryResult> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResult.supers]]
name = "Object"

[[rtd.InputInlineQueryResult.supers]]
name = "RObject"
[[rtd.InputInlineQueryResult.supers]]
name = "Debug"







[rtd.RTDInputInlineQueryResultType]
clz_name = "RTDInputInlineQueryResultType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputInlineQueryResultAnimatedGif", is_trait = false },
  { name = "InputInlineQueryResultAnimatedMpeg4", is_trait = false },
  { name = "InputInlineQueryResultArticle", is_trait = false },
  { name = "InputInlineQueryResultAudio", is_trait = false },
  { name = "InputInlineQueryResultContact", is_trait = false },
  { name = "InputInlineQueryResultDocument", is_trait = false },
  { name = "InputInlineQueryResultGame", is_trait = false },
  { name = "InputInlineQueryResultLocation", is_trait = false },
  { name = "InputInlineQueryResultPhoto", is_trait = false },
  { name = "InputInlineQueryResultSticker", is_trait = false },
  { name = "InputInlineQueryResultVenue", is_trait = false },
  { name = "InputInlineQueryResultVideo", is_trait = false },
  { name = "InputInlineQueryResultVoiceNote", is_trait = false },
  
]
fields_size = 13
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputInlineQueryResultType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputInlineQueryResultType)(text.as_ref()) }
}
""",
]




[rtd.InputInlineQueryResultAnimatedGif]
origin_name = "inputInlineQueryResultAnimatedGif"
clz_name = "InputInlineQueryResultAnimatedGif"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an animated GIF.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the query result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the static result thumbnail (JPEG or GIF), if it exists. """, tags = [  ] },
  { name = "gif_url", class = "Option<String>", description = """ The URL of the GIF-file (file size must not exceed 1MB). """, tags = [  ] },
  { name = "gif_duration", class = "Option<i32>", description = """ Duration of the GIF, in seconds. """, tags = [  ] },
  { name = "gif_width", class = "Option<i32>", description = """ Width of the GIF. """, tags = [  ] },
  { name = "gif_height", class = "Option<i32>", description = """ Height of the GIF. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultAnimatedGif {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultAnimatedGif {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultAnimatedGif.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultAnimatedGif.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultAnimatedGif" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultAnimatedGif """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultAnimatedGif.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultAnimatedMpeg4]
origin_name = "inputInlineQueryResultAnimatedMpeg4"
clz_name = "InputInlineQueryResultAnimatedMpeg4"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an animated (i.e. without sound) H.264/MPEG-4 AVC video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the static result thumbnail (JPEG or GIF), if it exists. """, tags = [  ] },
  { name = "mpeg4_url", class = "Option<String>", description = """ The URL of the MPEG4-file (file size must not exceed 1MB). """, tags = [  ] },
  { name = "mpeg4_duration", class = "Option<i32>", description = """ Duration of the video, in seconds. """, tags = [  ] },
  { name = "mpeg4_width", class = "Option<i32>", description = """ Width of the video. """, tags = [  ] },
  { name = "mpeg4_height", class = "Option<i32>", description = """ Height of the video. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAnimation, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultAnimatedMpeg4 {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultAnimatedMpeg4 {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultAnimatedMpeg4.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultAnimatedMpeg4.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultAnimatedMpeg4" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultAnimatedMpeg4 """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultAnimatedMpeg4.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultArticle]
origin_name = "inputInlineQueryResultArticle"
clz_name = "InputInlineQueryResultArticle"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an article or web page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL of the result, if it exists. """, tags = [  ] },
  { name = "hide_url", class = "Option<bool>", description = """ True, if the URL must be not shown. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ A short description of the result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the result thumbnail, if it exists. """, tags = [  ] },
  { name = "thumbnail_width", class = "Option<i32>", description = """ Thumbnail width, if known. """, tags = [  ] },
  { name = "thumbnail_height", class = "Option<i32>", description = """ Thumbnail height, if known. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultArticle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultArticle {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultArticle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultArticle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultArticle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultArticle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultArticle.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultAudio]
origin_name = "inputInlineQueryResultAudio"
clz_name = "InputInlineQueryResultAudio"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an MP3 audio file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the audio file. """, tags = [  ] },
  { name = "performer", class = "Option<String>", description = """ Performer of the audio file. """, tags = [  ] },
  { name = "audio_url", class = "Option<String>", description = """ The URL of the audio file. """, tags = [  ] },
  { name = "audio_duration", class = "Option<i32>", description = """ Audio file duration, in seconds. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageAudio, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultAudio {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultAudio.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultContact]
origin_name = "inputInlineQueryResultContact"
clz_name = "InputInlineQueryResultContact"
is_private = false
clz_is_trait = false
clz_description = """ Represents a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "contact", class = "Option<Contact>", description = """ User contact. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the result thumbnail, if it exists. """, tags = [  ] },
  { name = "thumbnail_width", class = "Option<i32>", description = """ Thumbnail width, if known. """, tags = [  ] },
  { name = "thumbnail_height", class = "Option<i32>", description = """ Thumbnail height, if known. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultContact {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultContact.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultDocument]
origin_name = "inputInlineQueryResultDocument"
clz_name = "InputInlineQueryResultDocument"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to a file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the resulting file. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Short description of the result, if known. """, tags = [  ] },
  { name = "document_url", class = "Option<String>", description = """ URL of the file. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the file content; only "application/pdf" and "application/zip" are currently allowed. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ The URL of the file thumbnail, if it exists. """, tags = [  ] },
  { name = "thumbnail_width", class = "Option<i32>", description = """ Width of the thumbnail. """, tags = [  ] },
  { name = "thumbnail_height", class = "Option<i32>", description = """ Height of the thumbnail. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageDocument, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultDocument {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultDocument.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultGame]
origin_name = "inputInlineQueryResultGame"
clz_name = "InputInlineQueryResultGame"
is_private = false
clz_is_trait = false
clz_description = """ Represents a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "game_short_name", class = "Option<String>", description = """ Short name of the game. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ Message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultGame {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultGame.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultLocation]
origin_name = "inputInlineQueryResultLocation"
clz_name = "InputInlineQueryResultLocation"
is_private = false
clz_is_trait = false
clz_description = """ Represents a point on the map.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "location", class = "Option<Location>", description = """ Location result. """, tags = [  ] },
  { name = "live_period", class = "Option<i32>", description = """ Amount of time relative to the message sent time until the location can be updated, in seconds. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the result thumbnail, if it exists. """, tags = [  ] },
  { name = "thumbnail_width", class = "Option<i32>", description = """ Thumbnail width, if known. """, tags = [  ] },
  { name = "thumbnail_height", class = "Option<i32>", description = """ Thumbnail height, if known. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultLocation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultLocation.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultPhoto]
origin_name = "inputInlineQueryResultPhoto"
clz_name = "InputInlineQueryResultPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Represents link to a JPEG image.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result, if known. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ A short description of the result, if known. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the photo thumbnail, if it exists. """, tags = [  ] },
  { name = "photo_url", class = "Option<String>", description = """ The URL of the JPEG photo (photo size must not exceed 5MB). """, tags = [  ] },
  { name = "photo_width", class = "Option<i32>", description = """ Width of the photo. """, tags = [  ] },
  { name = "photo_height", class = "Option<i32>", description = """ Height of the photo. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessagePhoto, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultPhoto {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultPhoto.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultSticker]
origin_name = "inputInlineQueryResultSticker"
clz_name = "InputInlineQueryResultSticker"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to a WEBP sticker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the sticker thumbnail, if it exists. """, tags = [  ] },
  { name = "sticker_url", class = "Option<String>", description = """ The URL of the WEBP sticker (sticker file size must not exceed 5MB). """, tags = [  ] },
  { name = "sticker_width", class = "Option<i32>", description = """ Width of the sticker. """, tags = [  ] },
  { name = "sticker_height", class = "Option<i32>", description = """ Height of the sticker. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, inputMessageSticker, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultSticker.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultVenue]
origin_name = "inputInlineQueryResultVenue"
clz_name = "InputInlineQueryResultVenue"
is_private = false
clz_is_trait = false
clz_description = """ Represents information about a venue.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "venue", class = "Option<Venue>", description = """ Venue result. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ URL of the result thumbnail, if it exists. """, tags = [  ] },
  { name = "thumbnail_width", class = "Option<i32>", description = """ Thumbnail width, if known. """, tags = [  ] },
  { name = "thumbnail_height", class = "Option<i32>", description = """ Thumbnail height, if known. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultVenue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultVenue {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultVenue.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultVenue.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultVenue" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultVenue """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultVenue.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultVideo]
origin_name = "inputInlineQueryResultVideo"
clz_name = "InputInlineQueryResultVideo"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to a page containing an embedded video player or a video file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the result. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ A short description of the result, if known. """, tags = [  ] },
  { name = "thumbnail_url", class = "Option<String>", description = """ The URL of the video thumbnail (JPEG), if it exists. """, tags = [  ] },
  { name = "video_url", class = "Option<String>", description = """ URL of the embedded video player or video file. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the content of the video URL, only "text/html" or "video/mp4" are currently supported. """, tags = [  ] },
  { name = "video_width", class = "Option<i32>", description = """ Width of the video. """, tags = [  ] },
  { name = "video_height", class = "Option<i32>", description = """ Height of the video. """, tags = [  ] },
  { name = "video_duration", class = "Option<i32>", description = """ Video duration, in seconds. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVideo, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 12
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultVideo {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultVideo.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputInlineQueryResultVoiceNote]
origin_name = "inputInlineQueryResultVoiceNote"
clz_name = "InputInlineQueryResultVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ Represents a link to an opus-encoded audio file within an OGG container, single channel audio.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the query result. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the voice note. """, tags = [  ] },
  { name = "voice_note_url", class = "Option<String>", description = """ The URL of the voice note file. """, tags = [  ] },
  { name = "voice_note_duration", class = "Option<i32>", description = """ Duration of the voice note, in seconds. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The message reply markup. Must be of type replyMarkupInlineKeyboard or null. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageVoiceNote, InputMessageLocation, InputMessageVenue or InputMessageContact. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputInlineQueryResultVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputInlineQueryResultVoiceNote {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputInlineQueryResultVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputInlineQueryResultVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputInlineQueryResultVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputInlineQueryResultVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputInlineQueryResultVoiceNote.supers]]
name = "InputInlineQueryResult"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageContent]
origin_name = "InputMessageContent"
clz_name = "InputMessageContent"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. The content of a message to send.  """
has_subclasses = true
sub_classes = [
  { name = "InputMessageAnimation", is_trait = false },
  { name = "InputMessageAudio", is_trait = false },
  { name = "InputMessageContact", is_trait = false },
  { name = "InputMessageDocument", is_trait = false },
  { name = "InputMessageForwarded", is_trait = false },
  { name = "InputMessageGame", is_trait = false },
  { name = "InputMessageInvoice", is_trait = false },
  { name = "InputMessageLocation", is_trait = false },
  { name = "InputMessagePhoto", is_trait = false },
  { name = "InputMessagePoll", is_trait = false },
  { name = "InputMessageSticker", is_trait = false },
  { name = "InputMessageText", is_trait = false },
  { name = "InputMessageVenue", is_trait = false },
  { name = "InputMessageVideo", is_trait = false },
  { name = "InputMessageVideoNote", is_trait = false },
  { name = "InputMessageVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputMessageContent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputMessageContent> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageContent.supers]]
name = "Object"

[[rtd.InputMessageContent.supers]]
name = "RObject"
[[rtd.InputMessageContent.supers]]
name = "Debug"







[rtd.RTDInputMessageContentType]
clz_name = "RTDInputMessageContentType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputMessageAnimation", is_trait = false },
  { name = "InputMessageAudio", is_trait = false },
  { name = "InputMessageContact", is_trait = false },
  { name = "InputMessageDocument", is_trait = false },
  { name = "InputMessageForwarded", is_trait = false },
  { name = "InputMessageGame", is_trait = false },
  { name = "InputMessageInvoice", is_trait = false },
  { name = "InputMessageLocation", is_trait = false },
  { name = "InputMessagePhoto", is_trait = false },
  { name = "InputMessagePoll", is_trait = false },
  { name = "InputMessageSticker", is_trait = false },
  { name = "InputMessageText", is_trait = false },
  { name = "InputMessageVenue", is_trait = false },
  { name = "InputMessageVideo", is_trait = false },
  { name = "InputMessageVideoNote", is_trait = false },
  { name = "InputMessageVoiceNote", is_trait = false },
  
]
fields_size = 16
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputMessageContentType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputMessageContentType)(text.as_ref()) }
}
""",
]




[rtd.InputMessageText]
origin_name = "inputMessageText"
clz_name = "InputMessageText"
is_private = false
clz_is_trait = false
clz_description = """ A text message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<FormattedText>", description = """ Formatted text to be sent; 1-GetOption("message_text_length_max") characters. Only Bold, Italic, Code, Pre, PreCode and TextUrl entities are allowed to be specified manually. """, tags = [  ] },
  { name = "disable_web_page_preview", class = "Option<bool>", description = """ True, if rich web page previews for URLs in the message text should be disabled. """, tags = [  ] },
  { name = "clear_draft", class = "Option<bool>", description = """ True, if a chat message draft should be deleted. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageText.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageAnimation]
origin_name = "inputMessageAnimation"
clz_name = "InputMessageAnimation"
is_private = false
clz_is_trait = false
clz_description = """ An animation message (GIF-style).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Box<InputFile>>", description = """ Animation file to be sent. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Animation thumbnail, if available. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the animation, in seconds. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Width of the animation; may be replaced by the server. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Height of the animation; may be replaced by the server. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Animation caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageAnimation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageAnimation.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageAudio]
origin_name = "inputMessageAudio"
clz_name = "InputMessageAudio"
is_private = false
clz_is_trait = false
clz_description = """ An audio message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "audio", class = "Option<Box<InputFile>>", description = """ Audio file to be sent. """, tags = [  ] },
  { name = "album_cover_thumbnail", class = "Option<InputThumbnail>", description = """ Thumbnail of the cover for the album, if available. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the audio, in seconds; may be replaced by the server. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the audio; 0-64 characters; may be replaced by the server. """, tags = [  ] },
  { name = "performer", class = "Option<String>", description = """ Performer of the audio; 0-64 characters, may be replaced by the server. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Audio caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageAudio {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageAudio.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageDocument]
origin_name = "inputMessageDocument"
clz_name = "InputMessageDocument"
is_private = false
clz_is_trait = false
clz_description = """ A document message (general file).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "document", class = "Option<Box<InputFile>>", description = """ Document to be sent. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Document thumbnail, if available. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Document caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageDocument {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageDocument.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessagePhoto]
origin_name = "inputMessagePhoto"
clz_name = "InputMessagePhoto"
is_private = false
clz_is_trait = false
clz_description = """ A photo message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Box<InputFile>>", description = """ Photo to send. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Photo thumbnail to be sent, this is sent to the other party in secret chats only. """, tags = [  ] },
  { name = "added_sticker_file_ids", class = "Option<Vec<i32>>", description = """ File identifiers of the stickers added to the photo, if applicable. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Photo width. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Photo height. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Photo caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ Photo TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessagePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessagePhoto {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessagePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessagePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessagePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessagePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessagePhoto.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageSticker]
origin_name = "inputMessageSticker"
clz_name = "InputMessageSticker"
is_private = false
clz_is_trait = false
clz_description = """ A sticker message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker to be sent. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Sticker thumbnail, if available. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Sticker width. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Sticker height. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageSticker.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageVideo]
origin_name = "inputMessageVideo"
clz_name = "InputMessageVideo"
is_private = false
clz_is_trait = false
clz_description = """ A video message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video", class = "Option<Box<InputFile>>", description = """ Video to be sent. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Video thumbnail, if available. """, tags = [  ] },
  { name = "added_sticker_file_ids", class = "Option<Vec<i32>>", description = """ File identifiers of the stickers added to the video, if applicable. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the video, in seconds. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Video width. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Video height. """, tags = [  ] },
  { name = "supports_streaming", class = "Option<bool>", description = """ True, if the video should be tried to be streamed. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Video caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ Video TTL (Time To Live), in seconds (0-60). A non-zero TTL can be specified only in private chats. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageVideo {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageVideo.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageVideoNote]
origin_name = "inputMessageVideoNote"
clz_name = "InputMessageVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ A video note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video_note", class = "Option<Box<InputFile>>", description = """ Video note to be sent. """, tags = [  ] },
  { name = "thumbnail", class = "Option<InputThumbnail>", description = """ Video thumbnail, if available. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the video, in seconds. """, tags = [  ] },
  { name = "length", class = "Option<i32>", description = """ Video width and height; must be positive and not greater than 640. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageVideoNote {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageVideoNote.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageVoiceNote]
origin_name = "inputMessageVoiceNote"
clz_name = "InputMessageVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ A voice note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "voice_note", class = "Option<Box<InputFile>>", description = """ Voice note to be sent. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the voice note, in seconds. """, tags = [  ] },
  { name = "waveform", class = "Option<String>", description = """ Waveform representation of the voice note, in 5-bit format. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Voice note caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputMessageVoiceNote {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputMessageVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageVoiceNote.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageLocation]
origin_name = "inputMessageLocation"
clz_name = "InputMessageLocation"
is_private = false
clz_is_trait = false
clz_description = """ A message with a location.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "location", class = "Option<Location>", description = """ Location to be sent. """, tags = [  ] },
  { name = "live_period", class = "Option<i32>", description = """ Period for which the location can be updated, in seconds; should bebetween 60 and 86400 for a live location and 0 otherwise. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageLocation.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageVenue]
origin_name = "inputMessageVenue"
clz_name = "InputMessageVenue"
is_private = false
clz_is_trait = false
clz_description = """ A message with information about a venue.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "venue", class = "Option<Venue>", description = """ Venue to send. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageVenue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageVenue.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageVenue.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageVenue" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageVenue """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageVenue.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageContact]
origin_name = "inputMessageContact"
clz_name = "InputMessageContact"
is_private = false
clz_is_trait = false
clz_description = """ A message containing a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "contact", class = "Option<Contact>", description = """ Contact to send. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageContact.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageGame]
origin_name = "inputMessageGame"
clz_name = "InputMessageGame"
is_private = false
clz_is_trait = false
clz_description = """ A message with a game; not supported for channels or secret chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bot_user_id", class = "Option<i32>", description = """ User identifier of the bot that owns the game. """, tags = [  ] },
  { name = "game_short_name", class = "Option<String>", description = """ Short name of the game. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageGame.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageInvoice]
origin_name = "inputMessageInvoice"
clz_name = "InputMessageInvoice"
is_private = false
clz_is_trait = false
clz_description = """ A message with an invoice; can be used only by bots and only in private chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invoice", class = "Option<Invoice>", description = """ Invoice. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Product title; 1-32 characters. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Product description; 0-255 characters. """, tags = [  ] },
  { name = "photo_url", class = "Option<String>", description = """ Product photo URL; optional. """, tags = [  ] },
  { name = "photo_size", class = "Option<i32>", description = """ Product photo size. """, tags = [  ] },
  { name = "photo_width", class = "Option<i32>", description = """ Product photo width. """, tags = [  ] },
  { name = "photo_height", class = "Option<i32>", description = """ Product photo height. """, tags = [  ] },
  { name = "payload", class = "Option<String>", description = """ The invoice payload. """, tags = [  ] },
  { name = "provider_token", class = "Option<String>", description = """ Payment provider token. """, tags = [  ] },
  { name = "provider_data", class = "Option<String>", description = """ JSON-encoded data about the invoice, which will be shared with the payment provider. """, tags = [  ] },
  { name = "start_parameter", class = "Option<String>", description = """ Unique invoice bot start_parameter for the generation of this invoice. """, tags = [  ] },
  
]
fields_size = 12
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageInvoice {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageInvoice.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageInvoice.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageInvoice" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageInvoice """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageInvoice.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessagePoll]
origin_name = "inputMessagePoll"
clz_name = "InputMessagePoll"
is_private = false
clz_is_trait = false
clz_description = """ A message with a poll. Polls can't be sent to private or secret chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "question", class = "Option<String>", description = """ Poll question, 1-255 characters. """, tags = [  ] },
  { name = "options", class = "Option<Vec<String>>", description = """ List of poll answer options, 2-10 strings 1-100 characters each. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessagePoll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessagePoll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessagePoll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessagePoll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessagePoll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessagePoll.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputMessageForwarded]
origin_name = "inputMessageForwarded"
clz_name = "InputMessageForwarded"
is_private = false
clz_is_trait = false
clz_description = """ A forwarded message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "from_chat_id", class = "Option<i64>", description = """ Identifier for the chat this forwarded message came from. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message to forward. """, tags = [  ] },
  { name = "in_game_share", class = "Option<bool>", description = """ True, if a game message should be shared within a launched game; applies only to game messages. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputMessageForwarded {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputMessageForwarded.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputMessageForwarded.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputMessageForwarded" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputMessageForwarded """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputMessageForwarded.supers]]
name = "InputMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElement]
origin_name = "InputPassportElement"
clz_name = "InputPassportElement"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains information about a Telegram Passport element to be saved.  """
has_subclasses = true
sub_classes = [
  { name = "InputPassportElementAddress", is_trait = false },
  { name = "InputPassportElementBankStatement", is_trait = false },
  { name = "InputPassportElementDriverLicense", is_trait = false },
  { name = "InputPassportElementEmailAddress", is_trait = false },
  { name = "InputPassportElementIdentityCard", is_trait = false },
  { name = "InputPassportElementInternalPassport", is_trait = false },
  { name = "InputPassportElementPassport", is_trait = false },
  { name = "InputPassportElementPassportRegistration", is_trait = false },
  { name = "InputPassportElementPersonalDetails", is_trait = false },
  { name = "InputPassportElementPhoneNumber", is_trait = false },
  { name = "InputPassportElementRentalAgreement", is_trait = false },
  { name = "InputPassportElementTemporaryRegistration", is_trait = false },
  { name = "InputPassportElementUtilityBill", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputPassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputPassportElement> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputPassportElement.supers]]
name = "Object"

[[rtd.InputPassportElement.supers]]
name = "RObject"
[[rtd.InputPassportElement.supers]]
name = "Debug"







[rtd.RTDInputPassportElementType]
clz_name = "RTDInputPassportElementType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputPassportElementAddress", is_trait = false },
  { name = "InputPassportElementBankStatement", is_trait = false },
  { name = "InputPassportElementDriverLicense", is_trait = false },
  { name = "InputPassportElementEmailAddress", is_trait = false },
  { name = "InputPassportElementIdentityCard", is_trait = false },
  { name = "InputPassportElementInternalPassport", is_trait = false },
  { name = "InputPassportElementPassport", is_trait = false },
  { name = "InputPassportElementPassportRegistration", is_trait = false },
  { name = "InputPassportElementPersonalDetails", is_trait = false },
  { name = "InputPassportElementPhoneNumber", is_trait = false },
  { name = "InputPassportElementRentalAgreement", is_trait = false },
  { name = "InputPassportElementTemporaryRegistration", is_trait = false },
  { name = "InputPassportElementUtilityBill", is_trait = false },
  
]
fields_size = 13
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputPassportElementType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputPassportElementType)(text.as_ref()) }
}
""",
]




[rtd.InputPassportElementPersonalDetails]
origin_name = "inputPassportElementPersonalDetails"
clz_name = "InputPassportElementPersonalDetails"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's personal details.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "personal_details", class = "Option<PersonalDetails>", description = """ Personal details of the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementPersonalDetails {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementPersonalDetails.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementPersonalDetails.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementPersonalDetails" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementPersonalDetails """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementPersonalDetails.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementPassport]
origin_name = "inputPassportElementPassport"
clz_name = "InputPassportElementPassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "passport", class = "Option<InputIdentityDocument>", description = """ The passport to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementPassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementPassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementPassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementPassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementPassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementPassport.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementDriverLicense]
origin_name = "inputPassportElementDriverLicense"
clz_name = "InputPassportElementDriverLicense"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's driver license.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "driver_license", class = "Option<InputIdentityDocument>", description = """ The driver license to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementDriverLicense {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementDriverLicense.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementDriverLicense.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementDriverLicense" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementDriverLicense """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementDriverLicense.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementIdentityCard]
origin_name = "inputPassportElementIdentityCard"
clz_name = "InputPassportElementIdentityCard"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's identity card.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "identity_card", class = "Option<InputIdentityDocument>", description = """ The identity card to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementIdentityCard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementIdentityCard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementIdentityCard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementIdentityCard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementIdentityCard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementIdentityCard.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementInternalPassport]
origin_name = "inputPassportElementInternalPassport"
clz_name = "InputPassportElementInternalPassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's internal passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "internal_passport", class = "Option<InputIdentityDocument>", description = """ The internal passport to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementInternalPassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementInternalPassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementInternalPassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementInternalPassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementInternalPassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementInternalPassport.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementAddress]
origin_name = "inputPassportElementAddress"
clz_name = "InputPassportElementAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "address", class = "Option<Address>", description = """ The address to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementAddress.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementUtilityBill]
origin_name = "inputPassportElementUtilityBill"
clz_name = "InputPassportElementUtilityBill"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's utility bill.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "utility_bill", class = "Option<InputPersonalDocument>", description = """ The utility bill to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementUtilityBill {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementUtilityBill.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementUtilityBill.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementUtilityBill" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementUtilityBill """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementUtilityBill.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementBankStatement]
origin_name = "inputPassportElementBankStatement"
clz_name = "InputPassportElementBankStatement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's bank statement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bank_statement", class = "Option<InputPersonalDocument>", description = """ The bank statement to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementBankStatement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementBankStatement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementBankStatement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementBankStatement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementBankStatement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementBankStatement.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementRentalAgreement]
origin_name = "inputPassportElementRentalAgreement"
clz_name = "InputPassportElementRentalAgreement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's rental agreement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "rental_agreement", class = "Option<InputPersonalDocument>", description = """ The rental agreement to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementRentalAgreement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementRentalAgreement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementRentalAgreement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementRentalAgreement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementRentalAgreement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementRentalAgreement.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementPassportRegistration]
origin_name = "inputPassportElementPassportRegistration"
clz_name = "InputPassportElementPassportRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's passport registration.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "passport_registration", class = "Option<InputPersonalDocument>", description = """ The passport registration page to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementPassportRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementPassportRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementPassportRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementPassportRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementPassportRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementPassportRegistration.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementTemporaryRegistration]
origin_name = "inputPassportElementTemporaryRegistration"
clz_name = "InputPassportElementTemporaryRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's temporary registration.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "temporary_registration", class = "Option<InputPersonalDocument>", description = """ The temporary registration document to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementTemporaryRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementTemporaryRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementTemporaryRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementTemporaryRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementTemporaryRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementTemporaryRegistration.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementPhoneNumber]
origin_name = "inputPassportElementPhoneNumber"
clz_name = "InputPassportElementPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ The phone number to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementPhoneNumber.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementEmailAddress]
origin_name = "inputPassportElementEmailAddress"
clz_name = "InputPassportElementEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element to be saved containing the user's email address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "email_address", class = "Option<String>", description = """ The email address to be saved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementEmailAddress.supers]]
name = "InputPassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementError]
origin_name = "inputPassportElementError"
clz_name = "InputPassportElementError"
is_private = false
clz_is_trait = false
clz_description = """ Contains the description of an error in a Telegram Passport element; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Type of Telegram Passport element that has the error. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "message", class = "Option<String>", description = """ Error message. """, tags = [  ] },
  { name = "source", class = "Option<Box<InputPassportElementErrorSource>>", description = """ Error source. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementError {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputPassportElementError {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputPassportElementError.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementError.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementError" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementError """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InputPassportElementErrorSource]
origin_name = "InputPassportElementErrorSource"
clz_name = "InputPassportElementErrorSource"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains the description of an error in a Telegram Passport element; for bots only.  """
has_subclasses = true
sub_classes = [
  { name = "InputPassportElementErrorSourceDataField", is_trait = false },
  { name = "InputPassportElementErrorSourceFile", is_trait = false },
  { name = "InputPassportElementErrorSourceFiles", is_trait = false },
  { name = "InputPassportElementErrorSourceFrontSide", is_trait = false },
  { name = "InputPassportElementErrorSourceReverseSide", is_trait = false },
  { name = "InputPassportElementErrorSourceSelfie", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "InputPassportElementErrorSourceUnspecified", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl InputPassportElementErrorSource {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<InputPassportElementErrorSource> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputPassportElementErrorSource.supers]]
name = "Object"

[[rtd.InputPassportElementErrorSource.supers]]
name = "RObject"
[[rtd.InputPassportElementErrorSource.supers]]
name = "Debug"







[rtd.RTDInputPassportElementErrorSourceType]
clz_name = "RTDInputPassportElementErrorSourceType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "InputPassportElementErrorSourceDataField", is_trait = false },
  { name = "InputPassportElementErrorSourceFile", is_trait = false },
  { name = "InputPassportElementErrorSourceFiles", is_trait = false },
  { name = "InputPassportElementErrorSourceFrontSide", is_trait = false },
  { name = "InputPassportElementErrorSourceReverseSide", is_trait = false },
  { name = "InputPassportElementErrorSourceSelfie", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "InputPassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "InputPassportElementErrorSourceUnspecified", is_trait = false },
  
]
fields_size = 9
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDInputPassportElementErrorSourceType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDInputPassportElementErrorSourceType)(text.as_ref()) }
}
""",
]




[rtd.InputPassportElementErrorSourceUnspecified]
origin_name = "inputPassportElementErrorSourceUnspecified"
clz_name = "InputPassportElementErrorSourceUnspecified"
is_private = false
clz_is_trait = false
clz_description = """ The element contains an error in an unspecified place. The error will be considered resolved when new data is added.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "element_hash", class = "Option<String>", description = """ Current hash of the entire element. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceUnspecified {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceUnspecified.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceUnspecified.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceUnspecified" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceUnspecified """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceUnspecified.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceDataField]
origin_name = "inputPassportElementErrorSourceDataField"
clz_name = "InputPassportElementErrorSourceDataField"
is_private = false
clz_is_trait = false
clz_description = """ A data field contains an error. The error is considered resolved when the field's value changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "field_name", class = "Option<String>", description = """ Field name. """, tags = [  ] },
  { name = "data_hash", class = "Option<String>", description = """ Current data hash. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceDataField {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceDataField.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceDataField.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceDataField" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceDataField """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceDataField.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceFrontSide]
origin_name = "inputPassportElementErrorSourceFrontSide"
clz_name = "InputPassportElementErrorSourceFrontSide"
is_private = false
clz_is_trait = false
clz_description = """ The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hash", class = "Option<String>", description = """ Current hash of the file containing the front side. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceFrontSide {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceFrontSide.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceFrontSide.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceFrontSide" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceFrontSide """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceFrontSide.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceReverseSide]
origin_name = "inputPassportElementErrorSourceReverseSide"
clz_name = "InputPassportElementErrorSourceReverseSide"
is_private = false
clz_is_trait = false
clz_description = """ The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hash", class = "Option<String>", description = """ Current hash of the file containing the reverse side. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceReverseSide {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceReverseSide.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceReverseSide.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceReverseSide" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceReverseSide """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceReverseSide.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceSelfie]
origin_name = "inputPassportElementErrorSourceSelfie"
clz_name = "InputPassportElementErrorSourceSelfie"
is_private = false
clz_is_trait = false
clz_description = """ The selfie contains an error. The error is considered resolved when the file with the selfie changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hash", class = "Option<String>", description = """ Current hash of the file containing the selfie. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceSelfie {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceSelfie.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceSelfie.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceSelfie" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceSelfie """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceSelfie.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceTranslationFile]
origin_name = "inputPassportElementErrorSourceTranslationFile"
clz_name = "InputPassportElementErrorSourceTranslationFile"
is_private = false
clz_is_trait = false
clz_description = """ One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hash", class = "Option<String>", description = """ Current hash of the file containing the translation. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceTranslationFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceTranslationFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceTranslationFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceTranslationFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceTranslationFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceTranslationFile.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceTranslationFiles]
origin_name = "inputPassportElementErrorSourceTranslationFiles"
clz_name = "InputPassportElementErrorSourceTranslationFiles"
is_private = false
clz_is_trait = false
clz_description = """ The translation of the document contains an error. The error is considered resolved when the list of files changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hashes", class = "Option<Vec<String>>", description = """ Current hashes of all files with the translation. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceTranslationFiles {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceTranslationFiles.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceTranslationFiles.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceTranslationFiles" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceTranslationFiles """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceTranslationFiles.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceFile]
origin_name = "inputPassportElementErrorSourceFile"
clz_name = "InputPassportElementErrorSourceFile"
is_private = false
clz_is_trait = false
clz_description = """ The file contains an error. The error is considered resolved when the file changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hash", class = "Option<String>", description = """ Current hash of the file which has the error. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceFile.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPassportElementErrorSourceFiles]
origin_name = "inputPassportElementErrorSourceFiles"
clz_name = "InputPassportElementErrorSourceFiles"
is_private = false
clz_is_trait = false
clz_description = """ The list of attached files contains an error. The error is considered resolved when the file list changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_hashes", class = "Option<Vec<String>>", description = """ Current hashes of all attached files. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPassportElementErrorSourceFiles {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.InputPassportElementErrorSourceFiles.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPassportElementErrorSourceFiles.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPassportElementErrorSourceFiles" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPassportElementErrorSourceFiles """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.InputPassportElementErrorSourceFiles.supers]]
name = "InputPassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.InputPersonalDocument]
origin_name = "inputPersonalDocument"
clz_name = "InputPersonalDocument"
is_private = false
clz_is_trait = false
clz_description = """ A personal document to be saved to Telegram Passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "files", class = "Option<Vec<Box<InputFile>>>", description = """ List of files containing the pages of the document. """, tags = [  ] },
  { name = "translation", class = "Option<Vec<Box<InputFile>>>", description = """ List of files containing a certified English translation of the document. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputPersonalDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputPersonalDocument {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputPersonalDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputPersonalDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputPersonalDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputPersonalDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InputSticker]
origin_name = "inputSticker"
clz_name = "InputSticker"
is_private = false
clz_is_trait = false
clz_description = """ Describes a sticker that should be added to a sticker set.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "png_sticker", class = "Option<Box<InputFile>>", description = """ PNG image with the sticker; must be up to 512 kB in size and fit in a 512x512 square. """, tags = [  ] },
  { name = "emojis", class = "Option<String>", description = """ Emoji corresponding to the sticker. """, tags = [  ] },
  { name = "mask_position", class = "Option<MaskPosition>", description = """ For masks, position where the mask should be placed; may be null. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.InputThumbnail]
origin_name = "inputThumbnail"
clz_name = "InputThumbnail"
is_private = false
clz_is_trait = false
clz_description = """ A thumbnail to be sent along with a file; should be in JPEG or WEBP format for stickers, and less than 200 kB in size.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "thumbnail", class = "Option<Box<InputFile>>", description = """ Thumbnail file to send. Sending thumbnails by file_id is currently not supported. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl InputThumbnail {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for InputThumbnail {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.InputThumbnail.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.InputThumbnail.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "inputThumbnail" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::InputThumbnail """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Invoice]
origin_name = "invoice"
clz_name = "Invoice"
is_private = false
clz_is_trait = false
clz_description = """ Product invoice.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "currency", class = "Option<String>", description = """ ISO 4217 currency code. """, tags = [  ] },
  { name = "price_parts", class = "Option<Vec<LabeledPricePart>>", description = """ A list of objects used to calculate the total price of the product. """, tags = [  ] },
  { name = "is_test", class = "Option<bool>", description = """ True, if the payment is a test payment. """, tags = [  ] },
  { name = "need_name", class = "Option<bool>", description = """ True, if the user's name is needed for payment. """, tags = [  ] },
  { name = "need_phone_number", class = "Option<bool>", description = """ True, if the user's phone number is needed for payment. """, tags = [  ] },
  { name = "need_email_address", class = "Option<bool>", description = """ True, if the user's email address is needed for payment. """, tags = [  ] },
  { name = "need_shipping_address", class = "Option<bool>", description = """ True, if the user's shipping address is needed for payment. """, tags = [  ] },
  { name = "send_phone_number_to_provider", class = "Option<bool>", description = """ True, if the user's phone number will be sent to the provider. """, tags = [  ] },
  { name = "send_email_address_to_provider", class = "Option<bool>", description = """ True, if the user's email address will be sent to the provider. """, tags = [  ] },
  { name = "is_flexible", class = "Option<bool>", description = """ True, if the total price depends on the shipping method. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Invoice {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Invoice.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Invoice.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "invoice" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Invoice """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.KeyboardButton]
origin_name = "keyboardButton"
clz_name = "KeyboardButton"
is_private = false
clz_is_trait = false
clz_description = """ Represents a single button in a bot keyboard.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Text of the button. """, tags = [  ] },
  { name = "type_", class = "Option<Box<KeyboardButtonType>>", description = """ Type of the button. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl KeyboardButton {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for KeyboardButton {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.KeyboardButton.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.KeyboardButton.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "keyboardButton" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::KeyboardButton """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.KeyboardButtonType]
origin_name = "KeyboardButtonType"
clz_name = "KeyboardButtonType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a keyboard button type.  """
has_subclasses = true
sub_classes = [
  { name = "KeyboardButtonTypeRequestLocation", is_trait = false },
  { name = "KeyboardButtonTypeRequestPhoneNumber", is_trait = false },
  { name = "KeyboardButtonTypeText", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl KeyboardButtonType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<KeyboardButtonType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.KeyboardButtonType.supers]]
name = "Object"

[[rtd.KeyboardButtonType.supers]]
name = "RObject"
[[rtd.KeyboardButtonType.supers]]
name = "Debug"







[rtd.RTDKeyboardButtonTypeType]
clz_name = "RTDKeyboardButtonTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "KeyboardButtonTypeRequestLocation", is_trait = false },
  { name = "KeyboardButtonTypeRequestPhoneNumber", is_trait = false },
  { name = "KeyboardButtonTypeText", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDKeyboardButtonTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDKeyboardButtonTypeType)(text.as_ref()) }
}
""",
]




[rtd.KeyboardButtonTypeText]
origin_name = "keyboardButtonTypeText"
clz_name = "KeyboardButtonTypeText"
is_private = false
clz_is_trait = false
clz_description = """ A simple button, with text that should be sent when the button is pressed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl KeyboardButtonTypeText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.KeyboardButtonTypeText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.KeyboardButtonTypeText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "keyboardButtonTypeText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::KeyboardButtonTypeText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.KeyboardButtonTypeText.supers]]
name = "KeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.KeyboardButtonTypeRequestPhoneNumber]
origin_name = "keyboardButtonTypeRequestPhoneNumber"
clz_name = "KeyboardButtonTypeRequestPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A button that sends the user's phone number when pressed; available only in private chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl KeyboardButtonTypeRequestPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.KeyboardButtonTypeRequestPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.KeyboardButtonTypeRequestPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "keyboardButtonTypeRequestPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::KeyboardButtonTypeRequestPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.KeyboardButtonTypeRequestPhoneNumber.supers]]
name = "KeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.KeyboardButtonTypeRequestLocation]
origin_name = "keyboardButtonTypeRequestLocation"
clz_name = "KeyboardButtonTypeRequestLocation"
is_private = false
clz_is_trait = false
clz_description = """ A button that sends the user's location when pressed; available only in private chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl KeyboardButtonTypeRequestLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.KeyboardButtonTypeRequestLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.KeyboardButtonTypeRequestLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "keyboardButtonTypeRequestLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::KeyboardButtonTypeRequestLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.KeyboardButtonTypeRequestLocation.supers]]
name = "KeyboardButtonType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LabeledPricePart]
origin_name = "labeledPricePart"
clz_name = "LabeledPricePart"
is_private = false
clz_is_trait = false
clz_description = """ Portion of the price of a product (e.g., "delivery cost", "tax amount").  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "label", class = "Option<String>", description = """ Label for this portion of the product price. """, tags = [  ] },
  { name = "amount", class = "Option<i64>", description = """ Currency amount in minimal quantity of the currency. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LabeledPricePart {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LabeledPricePart.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LabeledPricePart.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "labeledPricePart" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LabeledPricePart """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LanguagePackInfo]
origin_name = "languagePackInfo"
clz_name = "LanguagePackInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a language pack.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique language pack identifier. """, tags = [  ] },
  { name = "base_language_pack_id", class = "Option<String>", description = """ Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Language name. """, tags = [  ] },
  { name = "native_name", class = "Option<String>", description = """ Name of the language in that language. """, tags = [  ] },
  { name = "plural_code", class = "Option<String>", description = """ A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info. """, tags = [  ] },
  { name = "is_official", class = "Option<bool>", description = """ True, if the language pack is official. """, tags = [  ] },
  { name = "is_rtl", class = "Option<bool>", description = """ True, if the language pack strings are RTL. """, tags = [  ] },
  { name = "is_beta", class = "Option<bool>", description = """ True, if the language pack is a beta language pack. """, tags = [  ] },
  { name = "is_installed", class = "Option<bool>", description = """ True, if the language pack is installed by the current user. """, tags = [  ] },
  { name = "total_string_count", class = "Option<i32>", description = """ Total number of non-deleted strings from the language pack. """, tags = [  ] },
  { name = "translated_string_count", class = "Option<i32>", description = """ Total number of translated strings from the language pack. """, tags = [  ] },
  { name = "local_string_count", class = "Option<i32>", description = """ Total number of non-deleted strings from the language pack available locally. """, tags = [  ] },
  { name = "translation_url", class = "Option<String>", description = """ Link to language translation interface; empty for custom local language packs. """, tags = [  ] },
  
]
fields_size = 14
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LanguagePackInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LanguagePackString]
origin_name = "languagePackString"
clz_name = "LanguagePackString"
is_private = false
clz_is_trait = false
clz_description = """ Represents one language pack string.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "key", class = "Option<String>", description = """ String key. """, tags = [  ] },
  { name = "value", class = "Option<Box<LanguagePackStringValue>>", description = """ String value. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for LanguagePackString {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.LanguagePackString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LanguagePackStringValue]
origin_name = "LanguagePackStringValue"
clz_name = "LanguagePackStringValue"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the value of a string in a language pack.  """
has_subclasses = true
sub_classes = [
  { name = "LanguagePackStringValueDeleted", is_trait = false },
  { name = "LanguagePackStringValueOrdinary", is_trait = false },
  { name = "LanguagePackStringValuePluralized", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl LanguagePackStringValue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<LanguagePackStringValue> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.LanguagePackStringValue.supers]]
name = "Object"

[[rtd.LanguagePackStringValue.supers]]
name = "RObject"
[[rtd.LanguagePackStringValue.supers]]
name = "Debug"







[rtd.RTDLanguagePackStringValueType]
clz_name = "RTDLanguagePackStringValueType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "LanguagePackStringValueDeleted", is_trait = false },
  { name = "LanguagePackStringValueOrdinary", is_trait = false },
  { name = "LanguagePackStringValuePluralized", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDLanguagePackStringValueType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDLanguagePackStringValueType)(text.as_ref()) }
}
""",
]




[rtd.LanguagePackStringValueOrdinary]
origin_name = "languagePackStringValueOrdinary"
clz_name = "LanguagePackStringValueOrdinary"
is_private = false
clz_is_trait = false
clz_description = """ An ordinary language pack string.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<String>", description = """ String value. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackStringValueOrdinary {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LanguagePackStringValueOrdinary.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackStringValueOrdinary.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackStringValueOrdinary" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackStringValueOrdinary """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LanguagePackStringValueOrdinary.supers]]
name = "LanguagePackStringValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LanguagePackStringValuePluralized]
origin_name = "languagePackStringValuePluralized"
clz_name = "LanguagePackStringValuePluralized"
is_private = false
clz_is_trait = false
clz_description = """ A language pack string which has different forms based on the number of some object it mentions. See  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "zero_value", class = "Option<String>", description = """ Value for zero objects. """, tags = [  ] },
  { name = "one_value", class = "Option<String>", description = """ Value for one object. """, tags = [  ] },
  { name = "two_value", class = "Option<String>", description = """ Value for two objects. """, tags = [  ] },
  { name = "few_value", class = "Option<String>", description = """ Value for few objects. """, tags = [  ] },
  { name = "many_value", class = "Option<String>", description = """ Value for many objects. """, tags = [  ] },
  { name = "other_value", class = "Option<String>", description = """ Default value. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackStringValuePluralized {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LanguagePackStringValuePluralized.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackStringValuePluralized.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackStringValuePluralized" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackStringValuePluralized """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LanguagePackStringValuePluralized.supers]]
name = "LanguagePackStringValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LanguagePackStringValueDeleted]
origin_name = "languagePackStringValueDeleted"
clz_name = "LanguagePackStringValueDeleted"
is_private = false
clz_is_trait = false
clz_description = """ A deleted language pack string, the value should be taken from the built-in english language pack.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackStringValueDeleted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LanguagePackStringValueDeleted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackStringValueDeleted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackStringValueDeleted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackStringValueDeleted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LanguagePackStringValueDeleted.supers]]
name = "LanguagePackStringValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LanguagePackStrings]
origin_name = "languagePackStrings"
clz_name = "LanguagePackStrings"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of language pack strings.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "strings", class = "Option<Vec<LanguagePackString>>", description = """ A list of language pack strings. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LanguagePackStrings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LanguagePackStrings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LanguagePackStrings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "languagePackStrings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LanguagePackStrings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LinkState]
origin_name = "LinkState"
clz_name = "LinkState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the relationship between user A and user B. For incoming_link, user A is the current user; for outgoing_link, user B is the current user.  """
has_subclasses = true
sub_classes = [
  { name = "LinkStateIsContact", is_trait = false },
  { name = "LinkStateKnowsPhoneNumber", is_trait = false },
  { name = "LinkStateNone", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl LinkState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<LinkState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.LinkState.supers]]
name = "Object"

[[rtd.LinkState.supers]]
name = "RObject"
[[rtd.LinkState.supers]]
name = "Debug"







[rtd.RTDLinkStateType]
clz_name = "RTDLinkStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "LinkStateIsContact", is_trait = false },
  { name = "LinkStateKnowsPhoneNumber", is_trait = false },
  { name = "LinkStateNone", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDLinkStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDLinkStateType)(text.as_ref()) }
}
""",
]




[rtd.LinkStateNone]
origin_name = "linkStateNone"
clz_name = "LinkStateNone"
is_private = false
clz_is_trait = false
clz_description = """ The phone number of user A is not known to user B.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LinkStateNone {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LinkStateNone.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LinkStateNone.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "linkStateNone" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LinkStateNone """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LinkStateNone.supers]]
name = "LinkState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LinkStateKnowsPhoneNumber]
origin_name = "linkStateKnowsPhoneNumber"
clz_name = "LinkStateKnowsPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ The phone number of user A is known but that number has not been saved to the contact list of user B.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LinkStateKnowsPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LinkStateKnowsPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LinkStateKnowsPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "linkStateKnowsPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LinkStateKnowsPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LinkStateKnowsPhoneNumber.supers]]
name = "LinkState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LinkStateIsContact]
origin_name = "linkStateIsContact"
clz_name = "LinkStateIsContact"
is_private = false
clz_is_trait = false
clz_description = """ The phone number of user A has been saved to the contact list of user B.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LinkStateIsContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LinkStateIsContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LinkStateIsContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "linkStateIsContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LinkStateIsContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LinkStateIsContact.supers]]
name = "LinkState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LocalFile]
origin_name = "localFile"
clz_name = "LocalFile"
is_private = false
clz_is_trait = false
clz_description = """ Represents a local file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "path", class = "Option<String>", description = """ Local path to the locally available file part; may be empty. """, tags = [  ] },
  { name = "can_be_downloaded", class = "Option<bool>", description = """ True, if it is possible to try to download or generate the file. """, tags = [  ] },
  { name = "can_be_deleted", class = "Option<bool>", description = """ True, if the file can be deleted. """, tags = [  ] },
  { name = "is_downloading_active", class = "Option<bool>", description = """ True, if the file is currently being downloaded (or a local copy is being generated by some other means). """, tags = [  ] },
  { name = "is_downloading_completed", class = "Option<bool>", description = """ True, if the local copy is fully available. """, tags = [  ] },
  { name = "download_offset", class = "Option<i32>", description = """ Download will be started from this offset. downloaded_prefix_size is calculated from this offset. """, tags = [  ] },
  { name = "downloaded_prefix_size", class = "Option<i32>", description = """ If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix. """, tags = [  ] },
  { name = "downloaded_size", class = "Option<i32>", description = """ Total downloaded file bytes. Should be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LocalFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LocalFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LocalFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "localFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LocalFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LocalizationTargetInfo]
origin_name = "localizationTargetInfo"
clz_name = "LocalizationTargetInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the current localization target.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_packs", class = "Option<Vec<LanguagePackInfo>>", description = """ List of available language packs for this application. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LocalizationTargetInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LocalizationTargetInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LocalizationTargetInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "localizationTargetInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LocalizationTargetInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Location]
origin_name = "location"
clz_name = "Location"
is_private = false
clz_is_trait = false
clz_description = """ Describes a location on planet Earth.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "latitude", class = "Option<f64>", description = """ Latitude of the location in degrees; as defined by the sender. """, tags = [  ] },
  { name = "longitude", class = "Option<f64>", description = """ Longitude of the location, in degrees; as defined by the sender. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Location {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Location.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Location.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "location" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Location """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LogStream]
origin_name = "LogStream"
clz_name = "LogStream"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a stream to which TDLib internal log is written.  """
has_subclasses = true
sub_classes = [
  { name = "LogStreamDefault", is_trait = false },
  { name = "LogStreamEmpty", is_trait = false },
  { name = "LogStreamFile", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl LogStream {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<LogStream> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.LogStream.supers]]
name = "Object"

[[rtd.LogStream.supers]]
name = "RObject"
[[rtd.LogStream.supers]]
name = "Debug"







[rtd.RTDLogStreamType]
clz_name = "RTDLogStreamType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "LogStreamDefault", is_trait = false },
  { name = "LogStreamEmpty", is_trait = false },
  { name = "LogStreamFile", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDLogStreamType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDLogStreamType)(text.as_ref()) }
}
""",
]




[rtd.LogStreamDefault]
origin_name = "logStreamDefault"
clz_name = "LogStreamDefault"
is_private = false
clz_is_trait = false
clz_description = """ The log is written to stderr or an OS specific log.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogStreamDefault {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogStreamDefault.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogStreamDefault.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logStreamDefault" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogStreamDefault """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LogStreamDefault.supers]]
name = "LogStream"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LogStreamFile]
origin_name = "logStreamFile"
clz_name = "LogStreamFile"
is_private = false
clz_is_trait = false
clz_description = """ The log is written to a file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "path", class = "Option<String>", description = """ Path to the file to where the internal TDLib log will be written. """, tags = [  ] },
  { name = "max_file_size", class = "Option<i64>", description = """ Maximum size of the file to where the internal TDLib log is written before the file will be auto-rotated. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogStreamFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogStreamFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogStreamFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logStreamFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogStreamFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LogStreamFile.supers]]
name = "LogStream"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LogStreamEmpty]
origin_name = "logStreamEmpty"
clz_name = "LogStreamEmpty"
is_private = false
clz_is_trait = false
clz_description = """ The log is written nowhere.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogStreamEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogStreamEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogStreamEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logStreamEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogStreamEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LogStreamEmpty.supers]]
name = "LogStream"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.LogTags]
origin_name = "logTags"
clz_name = "LogTags"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of available TDLib internal log tags.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "tags", class = "Option<Vec<String>>", description = """ List of log tags. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogTags {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogTags.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogTags.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logTags" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogTags """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.LogVerbosityLevel]
origin_name = "logVerbosityLevel"
clz_name = "LogVerbosityLevel"
is_private = false
clz_is_trait = false
clz_description = """ Contains a TDLib internal log verbosity level.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "verbosity_level", class = "Option<i32>", description = """ Log verbosity level. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogVerbosityLevel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogVerbosityLevel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogVerbosityLevel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logVerbosityLevel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogVerbosityLevel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.MaskPoint]
origin_name = "MaskPoint"
clz_name = "MaskPoint"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Part of the face, relative to which a mask should be placed.  """
has_subclasses = true
sub_classes = [
  { name = "MaskPointChin", is_trait = false },
  { name = "MaskPointEyes", is_trait = false },
  { name = "MaskPointForehead", is_trait = false },
  { name = "MaskPointMouth", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl MaskPoint {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<MaskPoint> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MaskPoint.supers]]
name = "Object"

[[rtd.MaskPoint.supers]]
name = "RObject"
[[rtd.MaskPoint.supers]]
name = "Debug"







[rtd.RTDMaskPointType]
clz_name = "RTDMaskPointType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "MaskPointChin", is_trait = false },
  { name = "MaskPointEyes", is_trait = false },
  { name = "MaskPointForehead", is_trait = false },
  { name = "MaskPointMouth", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDMaskPointType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDMaskPointType)(text.as_ref()) }
}
""",
]




[rtd.MaskPointForehead]
origin_name = "maskPointForehead"
clz_name = "MaskPointForehead"
is_private = false
clz_is_trait = false
clz_description = """ A mask should be placed relatively to the forehead.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MaskPointForehead {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MaskPointForehead.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MaskPointForehead.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "maskPointForehead" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MaskPointForehead """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MaskPointForehead.supers]]
name = "MaskPoint"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MaskPointEyes]
origin_name = "maskPointEyes"
clz_name = "MaskPointEyes"
is_private = false
clz_is_trait = false
clz_description = """ A mask should be placed relatively to the eyes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MaskPointEyes {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MaskPointEyes.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MaskPointEyes.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "maskPointEyes" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MaskPointEyes """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MaskPointEyes.supers]]
name = "MaskPoint"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MaskPointMouth]
origin_name = "maskPointMouth"
clz_name = "MaskPointMouth"
is_private = false
clz_is_trait = false
clz_description = """ A mask should be placed relatively to the mouth.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MaskPointMouth {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MaskPointMouth.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MaskPointMouth.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "maskPointMouth" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MaskPointMouth """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MaskPointMouth.supers]]
name = "MaskPoint"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MaskPointChin]
origin_name = "maskPointChin"
clz_name = "MaskPointChin"
is_private = false
clz_is_trait = false
clz_description = """ A mask should be placed relatively to the chin.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MaskPointChin {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MaskPointChin.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MaskPointChin.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "maskPointChin" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MaskPointChin """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MaskPointChin.supers]]
name = "MaskPoint"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MaskPosition]
origin_name = "maskPosition"
clz_name = "MaskPosition"
is_private = false
clz_is_trait = false
clz_description = """ Position on a photo where a mask should be placed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "point", class = "Option<Box<MaskPoint>>", description = """ Part of the face, relative to which the mask should be placed. """, tags = [  ] },
  { name = "x_shift", class = "Option<f64>", description = """ Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position.) """, tags = [  ] },
  { name = "y_shift", class = "Option<f64>", description = """ Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position.) """, tags = [  ] },
  { name = "scale", class = "Option<f64>", description = """ Mask scaling coefficient. (For example, 2.0 means a doubled size.) """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MaskPosition {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for MaskPosition {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MaskPosition.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MaskPosition.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "maskPosition" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MaskPosition """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Message]
origin_name = "message"
clz_name = "Message"
is_private = false
clz_is_trait = false
clz_description = """ Describes a message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Message identifier, unique for the chat to which the message belongs. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the message; 0 if unknown. It is unknown for channel posts. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "sending_state", class = "Option<Box<MessageSendingState>>", description = """ Information about the sending state of the message; may be null. """, tags = [  ] },
  { name = "is_outgoing", class = "Option<bool>", description = """ True, if the message is outgoing. """, tags = [  ] },
  { name = "can_be_edited", class = "Option<bool>", description = """ True, if the message can be edited. For live location and poll messages this fields shows, whether editMessageLiveLocation or stopPoll can be used with this message by the client. """, tags = [  ] },
  { name = "can_be_forwarded", class = "Option<bool>", description = """ True, if the message can be forwarded. """, tags = [  ] },
  { name = "can_be_deleted_only_for_self", class = "Option<bool>", description = """ True, if the message can be deleted only for the current user while other users will continue to see it. """, tags = [  ] },
  { name = "can_be_deleted_for_all_users", class = "Option<bool>", description = """ True, if the message can be deleted for all users. """, tags = [  ] },
  { name = "is_channel_post", class = "Option<bool>", description = """ True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts. """, tags = [  ] },
  { name = "contains_unread_mention", class = "Option<bool>", description = """ True, if the message contains an unread mention for the current user. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the message was sent. """, tags = [  ] },
  { name = "edit_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the message was last edited. """, tags = [  ] },
  { name = "forward_info", class = "Option<MessageForwardInfo>", description = """ Information about the initial message sender; may be null. """, tags = [  ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ If non-zero, the identifier of the message this message is replying to; can be the identifier of a deleted message. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none. TDLib will send updateDeleteMessages or updateMessageContent once the TTL expires. """, tags = [  ] },
  { name = "ttl_expires_in", class = "Option<f64>", description = """ Time left before the message expires, in seconds. """, tags = [  ] },
  { name = "via_bot_user_id", class = "Option<i32>", description = """ If non-zero, the user identifier of the bot through which this message was sent. """, tags = [  ] },
  { name = "author_signature", class = "Option<String>", description = """ For channel posts, optional author signature. """, tags = [  ] },
  { name = "views", class = "Option<i32>", description = """ Number of times this message was viewed. """, tags = [  ] },
  { name = "media_album_id", class = "Option<String>", description = """ Unique identifier of an album this message belongs to. Only photos and videos can be grouped together in albums. """, tags = [  ] },
  { name = "content", class = "Option<Box<MessageContent>>", description = """ Content of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ Reply markup for the message; may be null. """, tags = [  ] },
  
]
fields_size = 24
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Message {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Message {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Message.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Message.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "message" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Message """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.MessageContent]
origin_name = "MessageContent"
clz_name = "MessageContent"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains the content of a message.  """
has_subclasses = true
sub_classes = [
  { name = "MessageAnimation", is_trait = false },
  { name = "MessageAudio", is_trait = false },
  { name = "MessageBasicGroupChatCreate", is_trait = false },
  { name = "MessageCall", is_trait = false },
  { name = "MessageChatAddMembers", is_trait = false },
  { name = "MessageChatChangePhoto", is_trait = false },
  { name = "MessageChatChangeTitle", is_trait = false },
  { name = "MessageChatDeleteMember", is_trait = false },
  { name = "MessageChatDeletePhoto", is_trait = false },
  { name = "MessageChatJoinByLink", is_trait = false },
  { name = "MessageChatSetTtl", is_trait = false },
  { name = "MessageChatUpgradeFrom", is_trait = false },
  { name = "MessageChatUpgradeTo", is_trait = false },
  { name = "MessageContact", is_trait = false },
  { name = "MessageContactRegistered", is_trait = false },
  { name = "MessageCustomServiceAction", is_trait = false },
  { name = "MessageDocument", is_trait = false },
  { name = "MessageExpiredPhoto", is_trait = false },
  { name = "MessageExpiredVideo", is_trait = false },
  { name = "MessageGame", is_trait = false },
  { name = "MessageGameScore", is_trait = false },
  { name = "MessageInvoice", is_trait = false },
  { name = "MessageLocation", is_trait = false },
  { name = "MessagePassportDataReceived", is_trait = false },
  { name = "MessagePassportDataSent", is_trait = false },
  { name = "MessagePaymentSuccessful", is_trait = false },
  { name = "MessagePaymentSuccessfulBot", is_trait = false },
  { name = "MessagePhoto", is_trait = false },
  { name = "MessagePinMessage", is_trait = false },
  { name = "MessagePoll", is_trait = false },
  { name = "MessageScreenshotTaken", is_trait = false },
  { name = "MessageSticker", is_trait = false },
  { name = "MessageSupergroupChatCreate", is_trait = false },
  { name = "MessageText", is_trait = false },
  { name = "MessageUnsupported", is_trait = false },
  { name = "MessageVenue", is_trait = false },
  { name = "MessageVideo", is_trait = false },
  { name = "MessageVideoNote", is_trait = false },
  { name = "MessageVoiceNote", is_trait = false },
  { name = "MessageWebsiteConnected", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl MessageContent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<MessageContent> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessageContent.supers]]
name = "Object"

[[rtd.MessageContent.supers]]
name = "RObject"
[[rtd.MessageContent.supers]]
name = "Debug"







[rtd.RTDMessageContentType]
clz_name = "RTDMessageContentType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "MessageAnimation", is_trait = false },
  { name = "MessageAudio", is_trait = false },
  { name = "MessageBasicGroupChatCreate", is_trait = false },
  { name = "MessageCall", is_trait = false },
  { name = "MessageChatAddMembers", is_trait = false },
  { name = "MessageChatChangePhoto", is_trait = false },
  { name = "MessageChatChangeTitle", is_trait = false },
  { name = "MessageChatDeleteMember", is_trait = false },
  { name = "MessageChatDeletePhoto", is_trait = false },
  { name = "MessageChatJoinByLink", is_trait = false },
  { name = "MessageChatSetTtl", is_trait = false },
  { name = "MessageChatUpgradeFrom", is_trait = false },
  { name = "MessageChatUpgradeTo", is_trait = false },
  { name = "MessageContact", is_trait = false },
  { name = "MessageContactRegistered", is_trait = false },
  { name = "MessageCustomServiceAction", is_trait = false },
  { name = "MessageDocument", is_trait = false },
  { name = "MessageExpiredPhoto", is_trait = false },
  { name = "MessageExpiredVideo", is_trait = false },
  { name = "MessageGame", is_trait = false },
  { name = "MessageGameScore", is_trait = false },
  { name = "MessageInvoice", is_trait = false },
  { name = "MessageLocation", is_trait = false },
  { name = "MessagePassportDataReceived", is_trait = false },
  { name = "MessagePassportDataSent", is_trait = false },
  { name = "MessagePaymentSuccessful", is_trait = false },
  { name = "MessagePaymentSuccessfulBot", is_trait = false },
  { name = "MessagePhoto", is_trait = false },
  { name = "MessagePinMessage", is_trait = false },
  { name = "MessagePoll", is_trait = false },
  { name = "MessageScreenshotTaken", is_trait = false },
  { name = "MessageSticker", is_trait = false },
  { name = "MessageSupergroupChatCreate", is_trait = false },
  { name = "MessageText", is_trait = false },
  { name = "MessageUnsupported", is_trait = false },
  { name = "MessageVenue", is_trait = false },
  { name = "MessageVideo", is_trait = false },
  { name = "MessageVideoNote", is_trait = false },
  { name = "MessageVoiceNote", is_trait = false },
  { name = "MessageWebsiteConnected", is_trait = false },
  
]
fields_size = 40
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDMessageContentType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDMessageContentType)(text.as_ref()) }
}
""",
]




[rtd.MessageText]
origin_name = "messageText"
clz_name = "MessageText"
is_private = false
clz_is_trait = false
clz_description = """ A text message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<FormattedText>", description = """ Text of the message. """, tags = [  ] },
  { name = "web_page", class = "Option<WebPage>", description = """ A preview of the web page that's mentioned in the text; may be null. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageText.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageAnimation]
origin_name = "messageAnimation"
clz_name = "MessageAnimation"
is_private = false
clz_is_trait = false
clz_description = """ An animation message (GIF-style).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Animation>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Animation caption. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the animation thumbnail must be blurred and the animation must be shown only while tapped. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageAnimation.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageAudio]
origin_name = "messageAudio"
clz_name = "MessageAudio"
is_private = false
clz_is_trait = false
clz_description = """ An audio message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "audio", class = "Option<Audio>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Audio caption. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageAudio.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageDocument]
origin_name = "messageDocument"
clz_name = "MessageDocument"
is_private = false
clz_is_trait = false
clz_description = """ A document message (general file).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "document", class = "Option<Document>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Document caption. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageDocument.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePhoto]
origin_name = "messagePhoto"
clz_name = "MessagePhoto"
is_private = false
clz_is_trait = false
clz_description = """ A photo message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Photo>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Photo caption. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the photo must be blurred and must be shown only while tapped. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePhoto.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageExpiredPhoto]
origin_name = "messageExpiredPhoto"
clz_name = "MessageExpiredPhoto"
is_private = false
clz_is_trait = false
clz_description = """ An expired photo message (self-destructed after TTL has elapsed).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageExpiredPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageExpiredPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageExpiredPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageExpiredPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageExpiredPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageExpiredPhoto.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageSticker]
origin_name = "messageSticker"
clz_name = "MessageSticker"
is_private = false
clz_is_trait = false
clz_description = """ A sticker message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Sticker>", description = """ Message content. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageSticker.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageVideo]
origin_name = "messageVideo"
clz_name = "MessageVideo"
is_private = false
clz_is_trait = false
clz_description = """ A video message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video", class = "Option<Video>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Video caption. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the video thumbnail must be blurred and the video must be shown only while tapped. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageVideo.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageExpiredVideo]
origin_name = "messageExpiredVideo"
clz_name = "MessageExpiredVideo"
is_private = false
clz_is_trait = false
clz_description = """ An expired video message (self-destructed after TTL has elapsed).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageExpiredVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageExpiredVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageExpiredVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageExpiredVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageExpiredVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageExpiredVideo.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageVideoNote]
origin_name = "messageVideoNote"
clz_name = "MessageVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ A video note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video_note", class = "Option<VideoNote>", description = """ Message content. """, tags = [  ] },
  { name = "is_viewed", class = "Option<bool>", description = """ True, if at least one of the recipients has viewed the video note. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the video note thumbnail must be blurred and the video note must be shown only while tapped. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageVideoNote.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageVoiceNote]
origin_name = "messageVoiceNote"
clz_name = "MessageVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ A voice note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "voice_note", class = "Option<VoiceNote>", description = """ Message content. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ Voice note caption. """, tags = [  ] },
  { name = "is_listened", class = "Option<bool>", description = """ True, if at least one of the recipients has listened to the voice note. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageVoiceNote.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageLocation]
origin_name = "messageLocation"
clz_name = "MessageLocation"
is_private = false
clz_is_trait = false
clz_description = """ A message with a location.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "location", class = "Option<Location>", description = """ Message content. """, tags = [  ] },
  { name = "live_period", class = "Option<i32>", description = """ Time relative to the message sent date until which the location can be updated, in seconds. """, tags = [  ] },
  { name = "expires_in", class = "Option<i32>", description = """ Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageLocation.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageVenue]
origin_name = "messageVenue"
clz_name = "MessageVenue"
is_private = false
clz_is_trait = false
clz_description = """ A message with information about a venue.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "venue", class = "Option<Venue>", description = """ Message content. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageVenue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageVenue.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageVenue.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageVenue" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageVenue """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageVenue.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageContact]
origin_name = "messageContact"
clz_name = "MessageContact"
is_private = false
clz_is_trait = false
clz_description = """ A message with a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "contact", class = "Option<Contact>", description = """ Message content. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageContact.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageGame]
origin_name = "messageGame"
clz_name = "MessageGame"
is_private = false
clz_is_trait = false
clz_description = """ A message with a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "game", class = "Option<Game>", description = """ Game. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageGame.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePoll]
origin_name = "messagePoll"
clz_name = "MessagePoll"
is_private = false
clz_is_trait = false
clz_description = """ A message with a poll.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "poll", class = "Option<Poll>", description = """ Poll. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePoll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePoll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePoll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePoll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePoll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePoll.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageInvoice]
origin_name = "messageInvoice"
clz_name = "MessageInvoice"
is_private = false
clz_is_trait = false
clz_description = """ A message with an invoice from a bot.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Product title. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Product description. """, tags = [  ] },
  { name = "photo", class = "Option<Photo>", description = """ Product photo; may be null. """, tags = [  ] },
  { name = "currency", class = "Option<String>", description = """ Currency for the product price. """, tags = [  ] },
  { name = "total_amount", class = "Option<i64>", description = """ Product total price in the minimal quantity of the currency. """, tags = [  ] },
  { name = "start_parameter", class = "Option<String>", description = """ Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}. """, tags = [  ] },
  { name = "is_test", class = "Option<bool>", description = """ True, if the invoice is a test invoice. """, tags = [  ] },
  { name = "need_shipping_address", class = "Option<bool>", description = """ True, if the shipping address should be specified. """, tags = [  ] },
  { name = "receipt_message_id", class = "Option<i64>", description = """ The identifier of the message with the receipt, after the product has been purchased. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageInvoice {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageInvoice.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageInvoice.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageInvoice" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageInvoice """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageInvoice.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageCall]
origin_name = "messageCall"
clz_name = "MessageCall"
is_private = false
clz_is_trait = false
clz_description = """ A message with information about an ended call.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "discard_reason", class = "Option<Box<CallDiscardReason>>", description = """ Reason why the call was discarded. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Call duration, in seconds. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for MessageCall {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessageCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageCall.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageBasicGroupChatCreate]
origin_name = "messageBasicGroupChatCreate"
clz_name = "MessageBasicGroupChatCreate"
is_private = false
clz_is_trait = false
clz_description = """ A newly created basic group.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Title of the basic group. """, tags = [  ] },
  { name = "member_user_ids", class = "Option<Vec<i32>>", description = """ User identifiers of members in the basic group. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageBasicGroupChatCreate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageBasicGroupChatCreate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageBasicGroupChatCreate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageBasicGroupChatCreate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageBasicGroupChatCreate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageBasicGroupChatCreate.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageSupergroupChatCreate]
origin_name = "messageSupergroupChatCreate"
clz_name = "MessageSupergroupChatCreate"
is_private = false
clz_is_trait = false
clz_description = """ A newly created supergroup or channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Title of the supergroup or channel. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageSupergroupChatCreate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageSupergroupChatCreate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageSupergroupChatCreate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageSupergroupChatCreate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageSupergroupChatCreate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageSupergroupChatCreate.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatChangeTitle]
origin_name = "messageChatChangeTitle"
clz_name = "MessageChatChangeTitle"
is_private = false
clz_is_trait = false
clz_description = """ An updated chat title.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ New chat title. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatChangeTitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatChangeTitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatChangeTitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatChangeTitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatChangeTitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatChangeTitle.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatChangePhoto]
origin_name = "messageChatChangePhoto"
clz_name = "MessageChatChangePhoto"
is_private = false
clz_is_trait = false
clz_description = """ An updated chat photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Photo>", description = """ New chat photo. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatChangePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatChangePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatChangePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatChangePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatChangePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatChangePhoto.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatDeletePhoto]
origin_name = "messageChatDeletePhoto"
clz_name = "MessageChatDeletePhoto"
is_private = false
clz_is_trait = false
clz_description = """ A deleted chat photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatDeletePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatDeletePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatDeletePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatDeletePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatDeletePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatDeletePhoto.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatAddMembers]
origin_name = "messageChatAddMembers"
clz_name = "MessageChatAddMembers"
is_private = false
clz_is_trait = false
clz_description = """ New chat members were added.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "member_user_ids", class = "Option<Vec<i32>>", description = """ User identifiers of the new members. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatAddMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatAddMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatAddMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatAddMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatAddMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatAddMembers.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatJoinByLink]
origin_name = "messageChatJoinByLink"
clz_name = "MessageChatJoinByLink"
is_private = false
clz_is_trait = false
clz_description = """ A new member joined the chat by invite link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatJoinByLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatJoinByLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatJoinByLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatJoinByLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatJoinByLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatJoinByLink.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatDeleteMember]
origin_name = "messageChatDeleteMember"
clz_name = "MessageChatDeleteMember"
is_private = false
clz_is_trait = false
clz_description = """ A chat member was deleted.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier of the deleted chat member. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatDeleteMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatDeleteMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatDeleteMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatDeleteMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatDeleteMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatDeleteMember.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatUpgradeTo]
origin_name = "messageChatUpgradeTo"
clz_name = "MessageChatUpgradeTo"
is_private = false
clz_is_trait = false
clz_description = """ A basic group was upgraded to a supergroup and was deactivated as the result.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup to which the basic group was upgraded. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatUpgradeTo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatUpgradeTo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatUpgradeTo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatUpgradeTo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatUpgradeTo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatUpgradeTo.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatUpgradeFrom]
origin_name = "messageChatUpgradeFrom"
clz_name = "MessageChatUpgradeFrom"
is_private = false
clz_is_trait = false
clz_description = """ A supergroup has been created from a basic group.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Title of the newly created supergroup. """, tags = [  ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ The identifier of the original basic group. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatUpgradeFrom {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatUpgradeFrom.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatUpgradeFrom.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatUpgradeFrom" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatUpgradeFrom """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatUpgradeFrom.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePinMessage]
origin_name = "messagePinMessage"
clz_name = "MessagePinMessage"
is_private = false
clz_is_trait = false
clz_description = """ A message has been pinned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the pinned message, can be an identifier of a deleted message or 0. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePinMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePinMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePinMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePinMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePinMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePinMessage.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageScreenshotTaken]
origin_name = "messageScreenshotTaken"
clz_name = "MessageScreenshotTaken"
is_private = false
clz_is_trait = false
clz_description = """ A screenshot of a message in the chat has been taken.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageScreenshotTaken {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageScreenshotTaken.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageScreenshotTaken.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageScreenshotTaken" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageScreenshotTaken """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageScreenshotTaken.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageChatSetTtl]
origin_name = "messageChatSetTtl"
clz_name = "MessageChatSetTtl"
is_private = false
clz_is_trait = false
clz_description = """ The TTL (Time To Live) setting messages in a secret chat has been changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "ttl", class = "Option<i32>", description = """ New TTL. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageChatSetTtl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageChatSetTtl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageChatSetTtl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageChatSetTtl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageChatSetTtl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageChatSetTtl.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageCustomServiceAction]
origin_name = "messageCustomServiceAction"
clz_name = "MessageCustomServiceAction"
is_private = false
clz_is_trait = false
clz_description = """ A non-standard action has happened in the chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Message text to be shown in the chat. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageCustomServiceAction {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageCustomServiceAction.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageCustomServiceAction.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageCustomServiceAction" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageCustomServiceAction """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageCustomServiceAction.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageGameScore]
origin_name = "messageGameScore"
clz_name = "MessageGameScore"
is_private = false
clz_is_trait = false
clz_description = """ A new high score was achieved in a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "game_message_id", class = "Option<i64>", description = """ Identifier of the message with the game, can be an identifier of a deleted message. """, tags = [  ] },
  { name = "game_id", class = "Option<i64>", description = """ Identifier of the game; may be different from the games presented in the message with the game. """, tags = [  ] },
  { name = "score", class = "Option<i32>", description = """ New score. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageGameScore {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageGameScore.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageGameScore.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageGameScore" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageGameScore """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageGameScore.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePaymentSuccessful]
origin_name = "messagePaymentSuccessful"
clz_name = "MessagePaymentSuccessful"
is_private = false
clz_is_trait = false
clz_description = """ A payment has been completed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invoice_message_id", class = "Option<i64>", description = """ Identifier of the message with the corresponding invoice; can be an identifier of a deleted message. """, tags = [  ] },
  { name = "currency", class = "Option<String>", description = """ Currency for the price of the product. """, tags = [  ] },
  { name = "total_amount", class = "Option<i64>", description = """ Total price for the product, in the minimal quantity of the currency. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePaymentSuccessful {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePaymentSuccessful.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePaymentSuccessful.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePaymentSuccessful" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePaymentSuccessful """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePaymentSuccessful.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePaymentSuccessfulBot]
origin_name = "messagePaymentSuccessfulBot"
clz_name = "MessagePaymentSuccessfulBot"
is_private = false
clz_is_trait = false
clz_description = """ A payment has been completed; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invoice_message_id", class = "Option<i64>", description = """ Identifier of the message with the corresponding invoice; can be an identifier of a deleted message. """, tags = [  ] },
  { name = "currency", class = "Option<String>", description = """ Currency for price of the product. """, tags = [  ] },
  { name = "total_amount", class = "Option<i64>", description = """ Total price for the product, in the minimal quantity of the currency. """, tags = [  ] },
  { name = "invoice_payload", class = "Option<String>", description = """ Invoice payload. """, tags = [  ] },
  { name = "shipping_option_id", class = "Option<String>", description = """ Identifier of the shipping option chosen by the user; may be empty if not applicable. """, tags = [  ] },
  { name = "order_info", class = "Option<OrderInfo>", description = """ Information about the order; may be null. """, tags = [  ] },
  { name = "telegram_payment_charge_id", class = "Option<String>", description = """ Telegram payment identifier. """, tags = [  ] },
  { name = "provider_payment_charge_id", class = "Option<String>", description = """ Provider payment identifier. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePaymentSuccessfulBot {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePaymentSuccessfulBot.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePaymentSuccessfulBot.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePaymentSuccessfulBot" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePaymentSuccessfulBot """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePaymentSuccessfulBot.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageContactRegistered]
origin_name = "messageContactRegistered"
clz_name = "MessageContactRegistered"
is_private = false
clz_is_trait = false
clz_description = """ A contact has registered with Telegram.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageContactRegistered {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageContactRegistered.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageContactRegistered.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageContactRegistered" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageContactRegistered """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageContactRegistered.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageWebsiteConnected]
origin_name = "messageWebsiteConnected"
clz_name = "MessageWebsiteConnected"
is_private = false
clz_is_trait = false
clz_description = """ The current user has connected a website by logging in using Telegram Login Widget on it.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "domain_name", class = "Option<String>", description = """ Domain name of the connected website. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageWebsiteConnected {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageWebsiteConnected.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageWebsiteConnected.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageWebsiteConnected" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageWebsiteConnected """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageWebsiteConnected.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePassportDataSent]
origin_name = "messagePassportDataSent"
clz_name = "MessagePassportDataSent"
is_private = false
clz_is_trait = false
clz_description = """ Telegram Passport data has been sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "types", class = "Option<Vec<Box<PassportElementType>>>", description = """ List of Telegram Passport element types sent. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePassportDataSent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for MessagePassportDataSent {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessagePassportDataSent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePassportDataSent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePassportDataSent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePassportDataSent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePassportDataSent.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessagePassportDataReceived]
origin_name = "messagePassportDataReceived"
clz_name = "MessagePassportDataReceived"
is_private = false
clz_is_trait = false
clz_description = """ Telegram Passport data has been received; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "elements", class = "Option<Vec<EncryptedPassportElement>>", description = """ List of received Telegram Passport elements. """, tags = [  ] },
  { name = "credentials", class = "Option<EncryptedCredentials>", description = """ Encrypted data credentials. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessagePassportDataReceived {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessagePassportDataReceived.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessagePassportDataReceived.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messagePassportDataReceived" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessagePassportDataReceived """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessagePassportDataReceived.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageUnsupported]
origin_name = "messageUnsupported"
clz_name = "MessageUnsupported"
is_private = false
clz_is_trait = false
clz_description = """ Message content that is not supported by the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageUnsupported {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageUnsupported.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageUnsupported.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageUnsupported" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageUnsupported """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageUnsupported.supers]]
name = "MessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageForwardInfo]
origin_name = "messageForwardInfo"
clz_name = "MessageForwardInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a forwarded message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "origin", class = "Option<Box<MessageForwardOrigin>>", description = """ Origin of a forwarded message. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the message was originally sent. """, tags = [  ] },
  { name = "from_chat_id", class = "Option<i64>", description = """ For messages forwarded to the chat with the current user (saved messages), the identifier of the chat from which the message was forwarded last time; 0 if unknown. """, tags = [  ] },
  { name = "from_message_id", class = "Option<i64>", description = """ For messages forwarded to the chat with the current user (saved messages), the identifier of the original message from which the new message was forwarded last time; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageForwardInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for MessageForwardInfo {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessageForwardInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageForwardInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageForwardInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageForwardInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.MessageForwardOrigin]
origin_name = "MessageForwardOrigin"
clz_name = "MessageForwardOrigin"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains information about the origin of a forwarded message.  """
has_subclasses = true
sub_classes = [
  { name = "MessageForwardOriginChannel", is_trait = false },
  { name = "MessageForwardOriginHiddenUser", is_trait = false },
  { name = "MessageForwardOriginUser", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl MessageForwardOrigin {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<MessageForwardOrigin> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessageForwardOrigin.supers]]
name = "Object"

[[rtd.MessageForwardOrigin.supers]]
name = "RObject"
[[rtd.MessageForwardOrigin.supers]]
name = "Debug"







[rtd.RTDMessageForwardOriginType]
clz_name = "RTDMessageForwardOriginType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "MessageForwardOriginChannel", is_trait = false },
  { name = "MessageForwardOriginHiddenUser", is_trait = false },
  { name = "MessageForwardOriginUser", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDMessageForwardOriginType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDMessageForwardOriginType)(text.as_ref()) }
}
""",
]




[rtd.MessageForwardOriginUser]
origin_name = "messageForwardOriginUser"
clz_name = "MessageForwardOriginUser"
is_private = false
clz_is_trait = false
clz_description = """ The message was originally written by a known user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user that originally sent the message. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageForwardOriginUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageForwardOriginUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageForwardOriginUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageForwardOriginUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageForwardOriginUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageForwardOriginUser.supers]]
name = "MessageForwardOrigin"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageForwardOriginHiddenUser]
origin_name = "messageForwardOriginHiddenUser"
clz_name = "MessageForwardOriginHiddenUser"
is_private = false
clz_is_trait = false
clz_description = """ The message was originally written by a user, which is hidden by his privacy settings.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sender_name", class = "Option<String>", description = """ Name of the sender. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageForwardOriginHiddenUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageForwardOriginHiddenUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageForwardOriginHiddenUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageForwardOriginHiddenUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageForwardOriginHiddenUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageForwardOriginHiddenUser.supers]]
name = "MessageForwardOrigin"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageForwardOriginChannel]
origin_name = "messageForwardOriginChannel"
clz_name = "MessageForwardOriginChannel"
is_private = false
clz_is_trait = false
clz_description = """ The message was originally a post in a channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat from which the message was originally forwarded. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier of the original message; 0 if unknown. """, tags = [  ] },
  { name = "author_signature", class = "Option<String>", description = """ Original post author signature. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageForwardOriginChannel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageForwardOriginChannel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageForwardOriginChannel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageForwardOriginChannel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageForwardOriginChannel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageForwardOriginChannel.supers]]
name = "MessageForwardOrigin"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageSendingState]
origin_name = "MessageSendingState"
clz_name = "MessageSendingState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains information about the sending state of the message.  """
has_subclasses = true
sub_classes = [
  { name = "MessageSendingStateFailed", is_trait = false },
  { name = "MessageSendingStatePending", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl MessageSendingState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<MessageSendingState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.MessageSendingState.supers]]
name = "Object"

[[rtd.MessageSendingState.supers]]
name = "RObject"
[[rtd.MessageSendingState.supers]]
name = "Debug"







[rtd.RTDMessageSendingStateType]
clz_name = "RTDMessageSendingStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "MessageSendingStateFailed", is_trait = false },
  { name = "MessageSendingStatePending", is_trait = false },
  
]
fields_size = 2
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDMessageSendingStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDMessageSendingStateType)(text.as_ref()) }
}
""",
]




[rtd.MessageSendingStatePending]
origin_name = "messageSendingStatePending"
clz_name = "MessageSendingStatePending"
is_private = false
clz_is_trait = false
clz_description = """ The message is being sent now, but has not yet been delivered to the server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageSendingStatePending {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageSendingStatePending.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageSendingStatePending.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageSendingStatePending" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageSendingStatePending """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageSendingStatePending.supers]]
name = "MessageSendingState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.MessageSendingStateFailed]
origin_name = "messageSendingStateFailed"
clz_name = "MessageSendingStateFailed"
is_private = false
clz_is_trait = false
clz_description = """ The message failed to be sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl MessageSendingStateFailed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.MessageSendingStateFailed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.MessageSendingStateFailed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messageSendingStateFailed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::MessageSendingStateFailed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.MessageSendingStateFailed.supers]]
name = "MessageSendingState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Messages]
origin_name = "messages"
clz_name = "Messages"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Approximate total count of messages found. """, tags = [  ] },
  { name = "messages", class = "Option<Vec<Message>>", description = """ List of messages; messages may be null. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Messages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Messages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Messages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "messages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Messages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.NetworkStatistics]
origin_name = "networkStatistics"
clz_name = "NetworkStatistics"
is_private = false
clz_is_trait = false
clz_description = """ A full list of available network statistic entries.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "since_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the app began collecting statistics. """, tags = [  ] },
  { name = "entries", class = "Option<Vec<Box<NetworkStatisticsEntry>>>", description = """ Network statistics entries. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for NetworkStatistics {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NetworkStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.NetworkStatisticsEntry]
origin_name = "NetworkStatisticsEntry"
clz_name = "NetworkStatisticsEntry"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains statistics about network usage.  """
has_subclasses = true
sub_classes = [
  { name = "NetworkStatisticsEntryCall", is_trait = false },
  { name = "NetworkStatisticsEntryFile", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl NetworkStatisticsEntry {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<NetworkStatisticsEntry> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NetworkStatisticsEntry.supers]]
name = "Object"

[[rtd.NetworkStatisticsEntry.supers]]
name = "RObject"
[[rtd.NetworkStatisticsEntry.supers]]
name = "Debug"







[rtd.RTDNetworkStatisticsEntryType]
clz_name = "RTDNetworkStatisticsEntryType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "NetworkStatisticsEntryCall", is_trait = false },
  { name = "NetworkStatisticsEntryFile", is_trait = false },
  
]
fields_size = 2
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDNetworkStatisticsEntryType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDNetworkStatisticsEntryType)(text.as_ref()) }
}
""",
]




[rtd.NetworkStatisticsEntryFile]
origin_name = "networkStatisticsEntryFile"
clz_name = "NetworkStatisticsEntryFile"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the total amount of data that was used to send and receive files.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_type", class = "Option<Box<FileType>>", description = """ Type of the file the data is part of. """, tags = [  ] },
  { name = "network_type", class = "Option<Box<NetworkType>>", description = """ Type of the network the data was sent through. Call setNetworkType to maintain the actual network type. """, tags = [  ] },
  { name = "sent_bytes", class = "Option<i64>", description = """ Total number of bytes sent. """, tags = [  ] },
  { name = "received_bytes", class = "Option<i64>", description = """ Total number of bytes received. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkStatisticsEntryFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for NetworkStatisticsEntryFile {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NetworkStatisticsEntryFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkStatisticsEntryFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkStatisticsEntryFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkStatisticsEntryFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkStatisticsEntryFile.supers]]
name = "NetworkStatisticsEntry"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkStatisticsEntryCall]
origin_name = "networkStatisticsEntryCall"
clz_name = "NetworkStatisticsEntryCall"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the total amount of data that was used for calls.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "network_type", class = "Option<Box<NetworkType>>", description = """ Type of the network the data was sent through. Call setNetworkType to maintain the actual network type. """, tags = [  ] },
  { name = "sent_bytes", class = "Option<i64>", description = """ Total number of bytes sent. """, tags = [  ] },
  { name = "received_bytes", class = "Option<i64>", description = """ Total number of bytes received. """, tags = [  ] },
  { name = "duration", class = "Option<f64>", description = """ Total call duration, in seconds. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkStatisticsEntryCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for NetworkStatisticsEntryCall {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NetworkStatisticsEntryCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkStatisticsEntryCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkStatisticsEntryCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkStatisticsEntryCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkStatisticsEntryCall.supers]]
name = "NetworkStatisticsEntry"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkType]
origin_name = "NetworkType"
clz_name = "NetworkType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the type of a network.  """
has_subclasses = true
sub_classes = [
  { name = "NetworkTypeMobile", is_trait = false },
  { name = "NetworkTypeMobileRoaming", is_trait = false },
  { name = "NetworkTypeNone", is_trait = false },
  { name = "NetworkTypeOther", is_trait = false },
  { name = "NetworkTypeWiFi", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl NetworkType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<NetworkType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NetworkType.supers]]
name = "Object"

[[rtd.NetworkType.supers]]
name = "RObject"
[[rtd.NetworkType.supers]]
name = "Debug"







[rtd.RTDNetworkTypeType]
clz_name = "RTDNetworkTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "NetworkTypeMobile", is_trait = false },
  { name = "NetworkTypeMobileRoaming", is_trait = false },
  { name = "NetworkTypeNone", is_trait = false },
  { name = "NetworkTypeOther", is_trait = false },
  { name = "NetworkTypeWiFi", is_trait = false },
  
]
fields_size = 5
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDNetworkTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDNetworkTypeType)(text.as_ref()) }
}
""",
]




[rtd.NetworkTypeNone]
origin_name = "networkTypeNone"
clz_name = "NetworkTypeNone"
is_private = false
clz_is_trait = false
clz_description = """ The network is not available.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkTypeNone {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NetworkTypeNone.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkTypeNone.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkTypeNone" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkTypeNone """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkTypeNone.supers]]
name = "NetworkType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkTypeMobile]
origin_name = "networkTypeMobile"
clz_name = "NetworkTypeMobile"
is_private = false
clz_is_trait = false
clz_description = """ A mobile network.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkTypeMobile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NetworkTypeMobile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkTypeMobile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkTypeMobile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkTypeMobile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkTypeMobile.supers]]
name = "NetworkType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkTypeMobileRoaming]
origin_name = "networkTypeMobileRoaming"
clz_name = "NetworkTypeMobileRoaming"
is_private = false
clz_is_trait = false
clz_description = """ A mobile roaming network.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkTypeMobileRoaming {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NetworkTypeMobileRoaming.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkTypeMobileRoaming.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkTypeMobileRoaming" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkTypeMobileRoaming """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkTypeMobileRoaming.supers]]
name = "NetworkType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkTypeWiFi]
origin_name = "networkTypeWiFi"
clz_name = "NetworkTypeWiFi"
is_private = false
clz_is_trait = false
clz_description = """ A Wi-Fi network.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkTypeWiFi {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NetworkTypeWiFi.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkTypeWiFi.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkTypeWiFi" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkTypeWiFi """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkTypeWiFi.supers]]
name = "NetworkType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NetworkTypeOther]
origin_name = "networkTypeOther"
clz_name = "NetworkTypeOther"
is_private = false
clz_is_trait = false
clz_description = """ A different network type (e.g., Ethernet network).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NetworkTypeOther {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NetworkTypeOther.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NetworkTypeOther.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "networkTypeOther" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NetworkTypeOther """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NetworkTypeOther.supers]]
name = "NetworkType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Notification]
origin_name = "notification"
clz_name = "Notification"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a notification.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique persistent identifier of this notification. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Notification date. """, tags = [  ] },
  { name = "type_", class = "Option<Box<NotificationType>>", description = """ Notification type. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Notification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Notification {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Notification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Notification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Notification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.NotificationGroup]
origin_name = "notificationGroup"
clz_name = "NotificationGroup"
is_private = false
clz_is_trait = false
clz_description = """ Describes a group of notifications.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique persistent auto-incremented from 1 identifier of the notification group. """, tags = [  ] },
  { name = "type_", class = "Option<Box<NotificationGroupType>>", description = """ Type of the group. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of a chat to which all notifications in the group belong. """, tags = [  ] },
  { name = "total_count", class = "Option<i32>", description = """ Total number of active notifications in the group. """, tags = [  ] },
  { name = "notifications", class = "Option<Vec<Notification>>", description = """ The list of active notifications. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for NotificationGroup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NotificationGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.NotificationGroupType]
origin_name = "NotificationGroupType"
clz_name = "NotificationGroupType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes type of notifications in the group.  """
has_subclasses = true
sub_classes = [
  { name = "NotificationGroupTypeCalls", is_trait = false },
  { name = "NotificationGroupTypeMentions", is_trait = false },
  { name = "NotificationGroupTypeMessages", is_trait = false },
  { name = "NotificationGroupTypeSecretChat", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl NotificationGroupType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<NotificationGroupType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NotificationGroupType.supers]]
name = "Object"

[[rtd.NotificationGroupType.supers]]
name = "RObject"
[[rtd.NotificationGroupType.supers]]
name = "Debug"







[rtd.RTDNotificationGroupTypeType]
clz_name = "RTDNotificationGroupTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "NotificationGroupTypeCalls", is_trait = false },
  { name = "NotificationGroupTypeMentions", is_trait = false },
  { name = "NotificationGroupTypeMessages", is_trait = false },
  { name = "NotificationGroupTypeSecretChat", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDNotificationGroupTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDNotificationGroupTypeType)(text.as_ref()) }
}
""",
]




[rtd.NotificationGroupTypeMessages]
origin_name = "notificationGroupTypeMessages"
clz_name = "NotificationGroupTypeMessages"
is_private = false
clz_is_trait = false
clz_description = """ A group containing notifications of type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationGroupTypeMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationGroupTypeMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationGroupTypeMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationGroupTypeMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationGroupTypeMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationGroupTypeMessages.supers]]
name = "NotificationGroupType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationGroupTypeMentions]
origin_name = "notificationGroupTypeMentions"
clz_name = "NotificationGroupTypeMentions"
is_private = false
clz_is_trait = false
clz_description = """ A group containing notifications of type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationGroupTypeMentions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationGroupTypeMentions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationGroupTypeMentions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationGroupTypeMentions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationGroupTypeMentions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationGroupTypeMentions.supers]]
name = "NotificationGroupType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationGroupTypeSecretChat]
origin_name = "notificationGroupTypeSecretChat"
clz_name = "NotificationGroupTypeSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ A group containing a notification of type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationGroupTypeSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationGroupTypeSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationGroupTypeSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationGroupTypeSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationGroupTypeSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationGroupTypeSecretChat.supers]]
name = "NotificationGroupType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationGroupTypeCalls]
origin_name = "notificationGroupTypeCalls"
clz_name = "NotificationGroupTypeCalls"
is_private = false
clz_is_trait = false
clz_description = """ A group containing notifications of type  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationGroupTypeCalls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationGroupTypeCalls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationGroupTypeCalls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationGroupTypeCalls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationGroupTypeCalls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationGroupTypeCalls.supers]]
name = "NotificationGroupType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationSettingsScope]
origin_name = "NotificationSettingsScope"
clz_name = "NotificationSettingsScope"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the types of chats to which notification settings are applied.  """
has_subclasses = true
sub_classes = [
  { name = "NotificationSettingsScopeChannelChats", is_trait = false },
  { name = "NotificationSettingsScopeGroupChats", is_trait = false },
  { name = "NotificationSettingsScopePrivateChats", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl NotificationSettingsScope {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<NotificationSettingsScope> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NotificationSettingsScope.supers]]
name = "Object"

[[rtd.NotificationSettingsScope.supers]]
name = "RObject"
[[rtd.NotificationSettingsScope.supers]]
name = "Debug"







[rtd.RTDNotificationSettingsScopeType]
clz_name = "RTDNotificationSettingsScopeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "NotificationSettingsScopeChannelChats", is_trait = false },
  { name = "NotificationSettingsScopeGroupChats", is_trait = false },
  { name = "NotificationSettingsScopePrivateChats", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDNotificationSettingsScopeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDNotificationSettingsScopeType)(text.as_ref()) }
}
""",
]




[rtd.NotificationSettingsScopePrivateChats]
origin_name = "notificationSettingsScopePrivateChats"
clz_name = "NotificationSettingsScopePrivateChats"
is_private = false
clz_is_trait = false
clz_description = """ Notification settings applied to all private and secret chats when the corresponding chat setting has a default value.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationSettingsScopePrivateChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationSettingsScopePrivateChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationSettingsScopePrivateChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationSettingsScopePrivateChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationSettingsScopePrivateChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationSettingsScopePrivateChats.supers]]
name = "NotificationSettingsScope"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationSettingsScopeGroupChats]
origin_name = "notificationSettingsScopeGroupChats"
clz_name = "NotificationSettingsScopeGroupChats"
is_private = false
clz_is_trait = false
clz_description = """ Notification settings applied to all basic groups and supergroups when the corresponding chat setting has a default value.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationSettingsScopeGroupChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationSettingsScopeGroupChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationSettingsScopeGroupChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationSettingsScopeGroupChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationSettingsScopeGroupChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationSettingsScopeGroupChats.supers]]
name = "NotificationSettingsScope"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationSettingsScopeChannelChats]
origin_name = "notificationSettingsScopeChannelChats"
clz_name = "NotificationSettingsScopeChannelChats"
is_private = false
clz_is_trait = false
clz_description = """ Notification settings applied to all channels when the corresponding chat setting has a default value.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationSettingsScopeChannelChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationSettingsScopeChannelChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationSettingsScopeChannelChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationSettingsScopeChannelChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationSettingsScopeChannelChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationSettingsScopeChannelChats.supers]]
name = "NotificationSettingsScope"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationType]
origin_name = "NotificationType"
clz_name = "NotificationType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains detailed information about a notification.  """
has_subclasses = true
sub_classes = [
  { name = "NotificationTypeNewCall", is_trait = false },
  { name = "NotificationTypeNewMessage", is_trait = false },
  { name = "NotificationTypeNewPushMessage", is_trait = false },
  { name = "NotificationTypeNewSecretChat", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl NotificationType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<NotificationType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NotificationType.supers]]
name = "Object"

[[rtd.NotificationType.supers]]
name = "RObject"
[[rtd.NotificationType.supers]]
name = "Debug"







[rtd.RTDNotificationTypeType]
clz_name = "RTDNotificationTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "NotificationTypeNewCall", is_trait = false },
  { name = "NotificationTypeNewMessage", is_trait = false },
  { name = "NotificationTypeNewPushMessage", is_trait = false },
  { name = "NotificationTypeNewSecretChat", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDNotificationTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDNotificationTypeType)(text.as_ref()) }
}
""",
]




[rtd.NotificationTypeNewMessage]
origin_name = "notificationTypeNewMessage"
clz_name = "NotificationTypeNewMessage"
is_private = false
clz_is_trait = false
clz_description = """ New message was received.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ The message. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationTypeNewMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationTypeNewMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationTypeNewMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationTypeNewMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationTypeNewMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationTypeNewMessage.supers]]
name = "NotificationType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationTypeNewSecretChat]
origin_name = "notificationTypeNewSecretChat"
clz_name = "NotificationTypeNewSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ New secret chat was created.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationTypeNewSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationTypeNewSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationTypeNewSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationTypeNewSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationTypeNewSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationTypeNewSecretChat.supers]]
name = "NotificationType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationTypeNewCall]
origin_name = "notificationTypeNewCall"
clz_name = "NotificationTypeNewCall"
is_private = false
clz_is_trait = false
clz_description = """ New call was received.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call_id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationTypeNewCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.NotificationTypeNewCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationTypeNewCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationTypeNewCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationTypeNewCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationTypeNewCall.supers]]
name = "NotificationType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.NotificationTypeNewPushMessage]
origin_name = "notificationTypeNewPushMessage"
clz_name = "NotificationTypeNewPushMessage"
is_private = false
clz_is_trait = false
clz_description = """ New message was received through a push notification.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message_id", class = "Option<i64>", description = """ The message identifier. The message will not be available in the chat history, but the ID can be used in viewMessages and as reply_to_message_id. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Sender of the message. Corresponding user may be inaccessible. """, tags = [  ] },
  { name = "content", class = "Option<Box<PushMessageContent>>", description = """ Push message content. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl NotificationTypeNewPushMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for NotificationTypeNewPushMessage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.NotificationTypeNewPushMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.NotificationTypeNewPushMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "notificationTypeNewPushMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::NotificationTypeNewPushMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.NotificationTypeNewPushMessage.supers]]
name = "NotificationType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Ok]
origin_name = "ok"
clz_name = "Ok"
is_private = false
clz_is_trait = false
clz_description = """ An object of this type is returned on a successful function call for certain functions.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Ok {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Ok.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Ok.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "ok" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Ok """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.OptionValue]
origin_name = "OptionValue"
clz_name = "OptionValue"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the value of an option.  """
has_subclasses = true
sub_classes = [
  { name = "OptionValueBoolean", is_trait = false },
  { name = "OptionValueEmpty", is_trait = false },
  { name = "OptionValueInteger", is_trait = false },
  { name = "OptionValueString", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl OptionValue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<OptionValue> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.OptionValue.supers]]
name = "Object"

[[rtd.OptionValue.supers]]
name = "RObject"
[[rtd.OptionValue.supers]]
name = "Debug"







[rtd.RTDOptionValueType]
clz_name = "RTDOptionValueType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "OptionValueBoolean", is_trait = false },
  { name = "OptionValueEmpty", is_trait = false },
  { name = "OptionValueInteger", is_trait = false },
  { name = "OptionValueString", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDOptionValueType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDOptionValueType)(text.as_ref()) }
}
""",
]




[rtd.OptionValueBoolean]
origin_name = "optionValueBoolean"
clz_name = "OptionValueBoolean"
is_private = false
clz_is_trait = false
clz_description = """ Represents a boolean option.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<bool>", description = """ The value of the option. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OptionValueBoolean {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OptionValueBoolean.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OptionValueBoolean.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "optionValueBoolean" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OptionValueBoolean """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OptionValueBoolean.supers]]
name = "OptionValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.OptionValueEmpty]
origin_name = "optionValueEmpty"
clz_name = "OptionValueEmpty"
is_private = false
clz_is_trait = false
clz_description = """ Represents an unknown option or an option which has a default value.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OptionValueEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OptionValueEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OptionValueEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "optionValueEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OptionValueEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OptionValueEmpty.supers]]
name = "OptionValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.OptionValueInteger]
origin_name = "optionValueInteger"
clz_name = "OptionValueInteger"
is_private = false
clz_is_trait = false
clz_description = """ Represents an integer option.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<i32>", description = """ The value of the option. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OptionValueInteger {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OptionValueInteger.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OptionValueInteger.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "optionValueInteger" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OptionValueInteger """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OptionValueInteger.supers]]
name = "OptionValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.OptionValueString]
origin_name = "optionValueString"
clz_name = "OptionValueString"
is_private = false
clz_is_trait = false
clz_description = """ Represents a string option.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<String>", description = """ The value of the option. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OptionValueString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OptionValueString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OptionValueString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "optionValueString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OptionValueString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OptionValueString.supers]]
name = "OptionValue"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.OrderInfo]
origin_name = "orderInfo"
clz_name = "OrderInfo"
is_private = false
clz_is_trait = false
clz_description = """ Order information.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ Name of the user. """, tags = [  ] },
  { name = "phone_number", class = "Option<String>", description = """ Phone number of the user. """, tags = [  ] },
  { name = "email_address", class = "Option<String>", description = """ Email address of the user. """, tags = [  ] },
  { name = "shipping_address", class = "Option<Address>", description = """ Shipping address for this order; may be null. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OrderInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OrderInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OrderInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "orderInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OrderInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PageBlock]
origin_name = "PageBlock"
clz_name = "PageBlock"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a block of an instant view web page.  """
has_subclasses = true
sub_classes = [
  { name = "PageBlockAnchor", is_trait = false },
  { name = "PageBlockAnimation", is_trait = false },
  { name = "PageBlockAudio", is_trait = false },
  { name = "PageBlockAuthorDate", is_trait = false },
  { name = "PageBlockBlockQuote", is_trait = false },
  { name = "PageBlockChatLink", is_trait = false },
  { name = "PageBlockCollage", is_trait = false },
  { name = "PageBlockCover", is_trait = false },
  { name = "PageBlockDetails", is_trait = false },
  { name = "PageBlockDivider", is_trait = false },
  { name = "PageBlockEmbedded", is_trait = false },
  { name = "PageBlockEmbeddedPost", is_trait = false },
  { name = "PageBlockFooter", is_trait = false },
  { name = "PageBlockHeader", is_trait = false },
  { name = "PageBlockKicker", is_trait = false },
  { name = "PageBlockList", is_trait = false },
  { name = "PageBlockMap", is_trait = false },
  { name = "PageBlockParagraph", is_trait = false },
  { name = "PageBlockPhoto", is_trait = false },
  { name = "PageBlockPreformatted", is_trait = false },
  { name = "PageBlockPullQuote", is_trait = false },
  { name = "PageBlockRelatedArticles", is_trait = false },
  { name = "PageBlockSlideshow", is_trait = false },
  { name = "PageBlockSubheader", is_trait = false },
  { name = "PageBlockSubtitle", is_trait = false },
  { name = "PageBlockTable", is_trait = false },
  { name = "PageBlockTitle", is_trait = false },
  { name = "PageBlockVideo", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PageBlock {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PageBlock> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlock.supers]]
name = "Object"

[[rtd.PageBlock.supers]]
name = "RObject"
[[rtd.PageBlock.supers]]
name = "Debug"







[rtd.RTDPageBlockType]
clz_name = "RTDPageBlockType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PageBlockAnchor", is_trait = false },
  { name = "PageBlockAnimation", is_trait = false },
  { name = "PageBlockAudio", is_trait = false },
  { name = "PageBlockAuthorDate", is_trait = false },
  { name = "PageBlockBlockQuote", is_trait = false },
  { name = "PageBlockChatLink", is_trait = false },
  { name = "PageBlockCollage", is_trait = false },
  { name = "PageBlockCover", is_trait = false },
  { name = "PageBlockDetails", is_trait = false },
  { name = "PageBlockDivider", is_trait = false },
  { name = "PageBlockEmbedded", is_trait = false },
  { name = "PageBlockEmbeddedPost", is_trait = false },
  { name = "PageBlockFooter", is_trait = false },
  { name = "PageBlockHeader", is_trait = false },
  { name = "PageBlockKicker", is_trait = false },
  { name = "PageBlockList", is_trait = false },
  { name = "PageBlockMap", is_trait = false },
  { name = "PageBlockParagraph", is_trait = false },
  { name = "PageBlockPhoto", is_trait = false },
  { name = "PageBlockPreformatted", is_trait = false },
  { name = "PageBlockPullQuote", is_trait = false },
  { name = "PageBlockRelatedArticles", is_trait = false },
  { name = "PageBlockSlideshow", is_trait = false },
  { name = "PageBlockSubheader", is_trait = false },
  { name = "PageBlockSubtitle", is_trait = false },
  { name = "PageBlockTable", is_trait = false },
  { name = "PageBlockTitle", is_trait = false },
  { name = "PageBlockVideo", is_trait = false },
  
]
fields_size = 28
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPageBlockType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPageBlockType)(text.as_ref()) }
}
""",
]




[rtd.PageBlockTitle]
origin_name = "pageBlockTitle"
clz_name = "PageBlockTitle"
is_private = false
clz_is_trait = false
clz_description = """ The title of a page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<Box<RichText>>", description = """ Title. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockTitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockTitle {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockTitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockTitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockTitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockTitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockTitle.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockSubtitle]
origin_name = "pageBlockSubtitle"
clz_name = "PageBlockSubtitle"
is_private = false
clz_is_trait = false
clz_description = """ The subtitle of a page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "subtitle", class = "Option<Box<RichText>>", description = """ Subtitle. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockSubtitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockSubtitle {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockSubtitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockSubtitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockSubtitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockSubtitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockSubtitle.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockAuthorDate]
origin_name = "pageBlockAuthorDate"
clz_name = "PageBlockAuthorDate"
is_private = false
clz_is_trait = false
clz_description = """ The author and publishing date of a page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "author", class = "Option<Box<RichText>>", description = """ Author. """, tags = [  ] },
  { name = "publish_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the article was published; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockAuthorDate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockAuthorDate {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockAuthorDate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockAuthorDate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockAuthorDate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockAuthorDate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockAuthorDate.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockHeader]
origin_name = "pageBlockHeader"
clz_name = "PageBlockHeader"
is_private = false
clz_is_trait = false
clz_description = """ A header.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "header", class = "Option<Box<RichText>>", description = """ Header. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockHeader {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockHeader {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockHeader.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockHeader.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockHeader" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockHeader """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockHeader.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockSubheader]
origin_name = "pageBlockSubheader"
clz_name = "PageBlockSubheader"
is_private = false
clz_is_trait = false
clz_description = """ A subheader.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "subheader", class = "Option<Box<RichText>>", description = """ Subheader. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockSubheader {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockSubheader {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockSubheader.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockSubheader.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockSubheader" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockSubheader """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockSubheader.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockKicker]
origin_name = "pageBlockKicker"
clz_name = "PageBlockKicker"
is_private = false
clz_is_trait = false
clz_description = """ A kicker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "kicker", class = "Option<Box<RichText>>", description = """ Kicker. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockKicker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockKicker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockKicker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockKicker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockKicker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockKicker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockKicker.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockParagraph]
origin_name = "pageBlockParagraph"
clz_name = "PageBlockParagraph"
is_private = false
clz_is_trait = false
clz_description = """ A text paragraph.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Paragraph text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockParagraph {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockParagraph {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockParagraph.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockParagraph.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockParagraph" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockParagraph """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockParagraph.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockPreformatted]
origin_name = "pageBlockPreformatted"
clz_name = "PageBlockPreformatted"
is_private = false
clz_is_trait = false
clz_description = """ A preformatted text paragraph.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Paragraph text. """, tags = [  ] },
  { name = "language", class = "Option<String>", description = """ Programming language for which the text should be formatted. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockPreformatted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockPreformatted {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockPreformatted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockPreformatted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockPreformatted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockPreformatted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockPreformatted.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockFooter]
origin_name = "pageBlockFooter"
clz_name = "PageBlockFooter"
is_private = false
clz_is_trait = false
clz_description = """ The footer of a page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "footer", class = "Option<Box<RichText>>", description = """ Footer. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockFooter {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockFooter {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockFooter.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockFooter.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockFooter" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockFooter """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockFooter.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockDivider]
origin_name = "pageBlockDivider"
clz_name = "PageBlockDivider"
is_private = false
clz_is_trait = false
clz_description = """ An empty block separating a page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockDivider {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockDivider.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockDivider.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockDivider" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockDivider """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockDivider.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockAnchor]
origin_name = "pageBlockAnchor"
clz_name = "PageBlockAnchor"
is_private = false
clz_is_trait = false
clz_description = """ An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ Name of the anchor. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockAnchor {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockAnchor.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockAnchor.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockAnchor" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockAnchor """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockAnchor.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockList]
origin_name = "pageBlockList"
clz_name = "PageBlockList"
is_private = false
clz_is_trait = false
clz_description = """ A list of data blocks.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "items", class = "Option<Vec<PageBlockListItem>>", description = """ The items of the list. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockList {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockList.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockList.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockList" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockList """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockList.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockBlockQuote]
origin_name = "pageBlockBlockQuote"
clz_name = "PageBlockBlockQuote"
is_private = false
clz_is_trait = false
clz_description = """ A block quote.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Quote text. """, tags = [  ] },
  { name = "credit", class = "Option<Box<RichText>>", description = """ Quote credit. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockBlockQuote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockBlockQuote {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockBlockQuote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockBlockQuote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockBlockQuote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockBlockQuote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockBlockQuote.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockPullQuote]
origin_name = "pageBlockPullQuote"
clz_name = "PageBlockPullQuote"
is_private = false
clz_is_trait = false
clz_description = """ A pull quote.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Quote text. """, tags = [  ] },
  { name = "credit", class = "Option<Box<RichText>>", description = """ Quote credit. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockPullQuote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockPullQuote {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockPullQuote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockPullQuote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockPullQuote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockPullQuote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockPullQuote.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockAnimation]
origin_name = "pageBlockAnimation"
clz_name = "PageBlockAnimation"
is_private = false
clz_is_trait = false
clz_description = """ An animation.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Animation>", description = """ Animation file; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Animation caption. """, tags = [  ] },
  { name = "need_autoplay", class = "Option<bool>", description = """ True, if the animation should be played automatically. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockAnimation.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockAudio]
origin_name = "pageBlockAudio"
clz_name = "PageBlockAudio"
is_private = false
clz_is_trait = false
clz_description = """ An audio file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "audio", class = "Option<Audio>", description = """ Audio file; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Audio file caption. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockAudio.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockPhoto]
origin_name = "pageBlockPhoto"
clz_name = "PageBlockPhoto"
is_private = false
clz_is_trait = false
clz_description = """ A photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Photo>", description = """ Photo file; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Photo caption. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL that needs to be opened when the photo is clicked. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockPhoto.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockVideo]
origin_name = "pageBlockVideo"
clz_name = "PageBlockVideo"
is_private = false
clz_is_trait = false
clz_description = """ A video.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video", class = "Option<Video>", description = """ Video file; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Video caption. """, tags = [  ] },
  { name = "need_autoplay", class = "Option<bool>", description = """ True, if the video should be played automatically. """, tags = [  ] },
  { name = "is_looped", class = "Option<bool>", description = """ True, if the video should be looped. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockVideo.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockCover]
origin_name = "pageBlockCover"
clz_name = "PageBlockCover"
is_private = false
clz_is_trait = false
clz_description = """ A page cover.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "cover", class = "Option<Box<PageBlock>>", description = """ Cover. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockCover {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockCover {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockCover.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockCover.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockCover" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockCover """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockCover.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockEmbedded]
origin_name = "pageBlockEmbedded"
clz_name = "PageBlockEmbedded"
is_private = false
clz_is_trait = false
clz_description = """ An embedded web page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ Web page URL, if available. """, tags = [  ] },
  { name = "html", class = "Option<String>", description = """ HTML-markup of the embedded page. """, tags = [  ] },
  { name = "poster_photo", class = "Option<Photo>", description = """ Poster photo, if available; may be null. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Block width, 0 if unknown. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Block height, 0 if unknown. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Block caption. """, tags = [  ] },
  { name = "is_full_width", class = "Option<bool>", description = """ True, if the block should be full width. """, tags = [  ] },
  { name = "allow_scrolling", class = "Option<bool>", description = """ True, if scrolling should be allowed. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockEmbedded {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockEmbedded.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockEmbedded.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockEmbedded" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockEmbedded """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockEmbedded.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockEmbeddedPost]
origin_name = "pageBlockEmbeddedPost"
clz_name = "PageBlockEmbeddedPost"
is_private = false
clz_is_trait = false
clz_description = """ An embedded post.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ Web page URL. """, tags = [  ] },
  { name = "author", class = "Option<String>", description = """ Post author. """, tags = [  ] },
  { name = "author_photo", class = "Option<Photo>", description = """ Post author photo. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the post was created; 0 if unknown. """, tags = [  ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Post content. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Post caption. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockEmbeddedPost {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockEmbeddedPost {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockEmbeddedPost.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockEmbeddedPost.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockEmbeddedPost" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockEmbeddedPost """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockEmbeddedPost.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockCollage]
origin_name = "pageBlockCollage"
clz_name = "PageBlockCollage"
is_private = false
clz_is_trait = false
clz_description = """ A collage.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Collage item contents. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Block caption. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockCollage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockCollage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockCollage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockCollage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockCollage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockCollage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockCollage.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockSlideshow]
origin_name = "pageBlockSlideshow"
clz_name = "PageBlockSlideshow"
is_private = false
clz_is_trait = false
clz_description = """ A slideshow.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Slideshow item contents. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Block caption. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockSlideshow {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockSlideshow {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockSlideshow.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockSlideshow.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockSlideshow" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockSlideshow """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockSlideshow.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockChatLink]
origin_name = "pageBlockChatLink"
clz_name = "PageBlockChatLink"
is_private = false
clz_is_trait = false
clz_description = """ A link to a chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Chat title. """, tags = [  ] },
  { name = "photo", class = "Option<ChatPhoto>", description = """ Chat photo; may be null. """, tags = [  ] },
  { name = "username", class = "Option<String>", description = """ Chat username, by which all other information about the chat should be resolved. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockChatLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockChatLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockChatLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockChatLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockChatLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockChatLink.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockTable]
origin_name = "pageBlockTable"
clz_name = "PageBlockTable"
is_private = false
clz_is_trait = false
clz_description = """ A table.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "caption", class = "Option<Box<RichText>>", description = """ Table caption. """, tags = [  ] },
  { name = "cells", class = "Option<Vec<Vec<PageBlockTableCell>>>", description = """ Table cells. """, tags = [  ] },
  { name = "is_bordered", class = "Option<bool>", description = """ True, if the table is bordered. """, tags = [  ] },
  { name = "is_striped", class = "Option<bool>", description = """ True, if the table is striped. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockTable {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockTable {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockTable.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockTable.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockTable" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockTable """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockTable.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockDetails]
origin_name = "pageBlockDetails"
clz_name = "PageBlockDetails"
is_private = false
clz_is_trait = false
clz_description = """ A collapsible block.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "header", class = "Option<Box<RichText>>", description = """ Always visible heading for the block. """, tags = [  ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Block contents. """, tags = [  ] },
  { name = "is_open", class = "Option<bool>", description = """ True, if the block is open by default. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockDetails {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockDetails {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockDetails.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockDetails.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockDetails" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockDetails """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockDetails.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockRelatedArticles]
origin_name = "pageBlockRelatedArticles"
clz_name = "PageBlockRelatedArticles"
is_private = false
clz_is_trait = false
clz_description = """ Related articles.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "header", class = "Option<Box<RichText>>", description = """ Block header. """, tags = [  ] },
  { name = "articles", class = "Option<Vec<PageBlockRelatedArticle>>", description = """ List of related articles. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockRelatedArticles {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockRelatedArticles {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockRelatedArticles.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockRelatedArticles.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockRelatedArticles" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockRelatedArticles """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockRelatedArticles.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockMap]
origin_name = "pageBlockMap"
clz_name = "PageBlockMap"
is_private = false
clz_is_trait = false
clz_description = """ A map.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "location", class = "Option<Location>", description = """ Location of the map center. """, tags = [  ] },
  { name = "zoom", class = "Option<i32>", description = """ Map zoom level. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Map width. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Map height. """, tags = [  ] },
  { name = "caption", class = "Option<PageBlockCaption>", description = """ Block caption. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockMap {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockMap.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockMap.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockMap" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockMap """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockMap.supers]]
name = "PageBlock"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockCaption]
origin_name = "pageBlockCaption"
clz_name = "PageBlockCaption"
is_private = false
clz_is_trait = false
clz_description = """ Contains a caption of an instant view web page block, consisting of a text and a trailing credit.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Content of the caption. """, tags = [  ] },
  { name = "credit", class = "Option<Box<RichText>>", description = """ Block credit (like HTML tag <cite>). """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockCaption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockCaption {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockCaption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockCaption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockCaption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockCaption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PageBlockHorizontalAlignment]
origin_name = "PageBlockHorizontalAlignment"
clz_name = "PageBlockHorizontalAlignment"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a horizontal alignment of a table cell content.  """
has_subclasses = true
sub_classes = [
  { name = "PageBlockHorizontalAlignmentCenter", is_trait = false },
  { name = "PageBlockHorizontalAlignmentLeft", is_trait = false },
  { name = "PageBlockHorizontalAlignmentRight", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PageBlockHorizontalAlignment {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PageBlockHorizontalAlignment> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockHorizontalAlignment.supers]]
name = "Object"

[[rtd.PageBlockHorizontalAlignment.supers]]
name = "RObject"
[[rtd.PageBlockHorizontalAlignment.supers]]
name = "Debug"







[rtd.RTDPageBlockHorizontalAlignmentType]
clz_name = "RTDPageBlockHorizontalAlignmentType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PageBlockHorizontalAlignmentCenter", is_trait = false },
  { name = "PageBlockHorizontalAlignmentLeft", is_trait = false },
  { name = "PageBlockHorizontalAlignmentRight", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPageBlockHorizontalAlignmentType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPageBlockHorizontalAlignmentType)(text.as_ref()) }
}
""",
]




[rtd.PageBlockHorizontalAlignmentLeft]
origin_name = "pageBlockHorizontalAlignmentLeft"
clz_name = "PageBlockHorizontalAlignmentLeft"
is_private = false
clz_is_trait = false
clz_description = """ The content should be left-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockHorizontalAlignmentLeft {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockHorizontalAlignmentLeft.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockHorizontalAlignmentLeft.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockHorizontalAlignmentLeft" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockHorizontalAlignmentLeft """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockHorizontalAlignmentLeft.supers]]
name = "PageBlockHorizontalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockHorizontalAlignmentCenter]
origin_name = "pageBlockHorizontalAlignmentCenter"
clz_name = "PageBlockHorizontalAlignmentCenter"
is_private = false
clz_is_trait = false
clz_description = """ The content should be center-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockHorizontalAlignmentCenter {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockHorizontalAlignmentCenter.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockHorizontalAlignmentCenter.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockHorizontalAlignmentCenter" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockHorizontalAlignmentCenter """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockHorizontalAlignmentCenter.supers]]
name = "PageBlockHorizontalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockHorizontalAlignmentRight]
origin_name = "pageBlockHorizontalAlignmentRight"
clz_name = "PageBlockHorizontalAlignmentRight"
is_private = false
clz_is_trait = false
clz_description = """ The content should be right-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockHorizontalAlignmentRight {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockHorizontalAlignmentRight.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockHorizontalAlignmentRight.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockHorizontalAlignmentRight" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockHorizontalAlignmentRight """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockHorizontalAlignmentRight.supers]]
name = "PageBlockHorizontalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockListItem]
origin_name = "pageBlockListItem"
clz_name = "PageBlockListItem"
is_private = false
clz_is_trait = false
clz_description = """ Describes an item of a list page block.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "label", class = "Option<String>", description = """ Item label. """, tags = [  ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Item blocks. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockListItem {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockListItem {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockListItem.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockListItem.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockListItem" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockListItem """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PageBlockRelatedArticle]
origin_name = "pageBlockRelatedArticle"
clz_name = "PageBlockRelatedArticle"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a related article.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ Related article URL. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Article title; may be empty. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Article description; may be empty. """, tags = [  ] },
  { name = "photo", class = "Option<Photo>", description = """ Article photo; may be null. """, tags = [  ] },
  { name = "author", class = "Option<String>", description = """ Article author; may be empty. """, tags = [  ] },
  { name = "publish_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the article was published; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockRelatedArticle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockRelatedArticle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockRelatedArticle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockRelatedArticle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockRelatedArticle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PageBlockTableCell]
origin_name = "pageBlockTableCell"
clz_name = "PageBlockTableCell"
is_private = false
clz_is_trait = false
clz_description = """ Represents a cell of a table.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Cell text. """, tags = [  ] },
  { name = "is_header", class = "Option<bool>", description = """ True, if it is a header cell. """, tags = [  ] },
  { name = "colspan", class = "Option<i32>", description = """ The number of columns the cell should span. """, tags = [  ] },
  { name = "rowspan", class = "Option<i32>", description = """ The number of rows the cell should span. """, tags = [  ] },
  { name = "align", class = "Option<Box<PageBlockHorizontalAlignment>>", description = """ Horizontal cell content alignment. """, tags = [  ] },
  { name = "valign", class = "Option<Box<PageBlockVerticalAlignment>>", description = """ Vertical cell content alignment. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockTableCell {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PageBlockTableCell {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockTableCell.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockTableCell.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockTableCell" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockTableCell """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PageBlockVerticalAlignment]
origin_name = "PageBlockVerticalAlignment"
clz_name = "PageBlockVerticalAlignment"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a Vertical alignment of a table cell content.  """
has_subclasses = true
sub_classes = [
  { name = "PageBlockVerticalAlignmentBottom", is_trait = false },
  { name = "PageBlockVerticalAlignmentMiddle", is_trait = false },
  { name = "PageBlockVerticalAlignmentTop", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PageBlockVerticalAlignment {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PageBlockVerticalAlignment> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PageBlockVerticalAlignment.supers]]
name = "Object"

[[rtd.PageBlockVerticalAlignment.supers]]
name = "RObject"
[[rtd.PageBlockVerticalAlignment.supers]]
name = "Debug"







[rtd.RTDPageBlockVerticalAlignmentType]
clz_name = "RTDPageBlockVerticalAlignmentType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PageBlockVerticalAlignmentBottom", is_trait = false },
  { name = "PageBlockVerticalAlignmentMiddle", is_trait = false },
  { name = "PageBlockVerticalAlignmentTop", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPageBlockVerticalAlignmentType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPageBlockVerticalAlignmentType)(text.as_ref()) }
}
""",
]




[rtd.PageBlockVerticalAlignmentTop]
origin_name = "pageBlockVerticalAlignmentTop"
clz_name = "PageBlockVerticalAlignmentTop"
is_private = false
clz_is_trait = false
clz_description = """ The content should be top-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockVerticalAlignmentTop {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockVerticalAlignmentTop.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockVerticalAlignmentTop.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockVerticalAlignmentTop" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockVerticalAlignmentTop """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockVerticalAlignmentTop.supers]]
name = "PageBlockVerticalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockVerticalAlignmentMiddle]
origin_name = "pageBlockVerticalAlignmentMiddle"
clz_name = "PageBlockVerticalAlignmentMiddle"
is_private = false
clz_is_trait = false
clz_description = """ The content should be middle-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockVerticalAlignmentMiddle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockVerticalAlignmentMiddle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockVerticalAlignmentMiddle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockVerticalAlignmentMiddle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockVerticalAlignmentMiddle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockVerticalAlignmentMiddle.supers]]
name = "PageBlockVerticalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PageBlockVerticalAlignmentBottom]
origin_name = "pageBlockVerticalAlignmentBottom"
clz_name = "PageBlockVerticalAlignmentBottom"
is_private = false
clz_is_trait = false
clz_description = """ The content should be bottom-aligned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PageBlockVerticalAlignmentBottom {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PageBlockVerticalAlignmentBottom.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PageBlockVerticalAlignmentBottom.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pageBlockVerticalAlignmentBottom" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PageBlockVerticalAlignmentBottom """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PageBlockVerticalAlignmentBottom.supers]]
name = "PageBlockVerticalAlignment"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportAuthorizationForm]
origin_name = "passportAuthorizationForm"
clz_name = "PassportAuthorizationForm"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a Telegram Passport authorization form that was requested.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique identifier of the authorization form. """, tags = [  ] },
  { name = "required_elements", class = "Option<Vec<PassportRequiredElement>>", description = """ Information about the Telegram Passport elements that need to be provided to complete the form. """, tags = [  ] },
  { name = "privacy_policy_url", class = "Option<String>", description = """ URL for the privacy policy of the service; may be empty. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportAuthorizationForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportAuthorizationForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportAuthorizationForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportAuthorizationForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportAuthorizationForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PassportElement]
origin_name = "PassportElement"
clz_name = "PassportElement"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains information about a Telegram Passport element.  """
has_subclasses = true
sub_classes = [
  { name = "PassportElementAddress", is_trait = false },
  { name = "PassportElementBankStatement", is_trait = false },
  { name = "PassportElementDriverLicense", is_trait = false },
  { name = "PassportElementEmailAddress", is_trait = false },
  { name = "PassportElementIdentityCard", is_trait = false },
  { name = "PassportElementInternalPassport", is_trait = false },
  { name = "PassportElementPassport", is_trait = false },
  { name = "PassportElementPassportRegistration", is_trait = false },
  { name = "PassportElementPersonalDetails", is_trait = false },
  { name = "PassportElementPhoneNumber", is_trait = false },
  { name = "PassportElementRentalAgreement", is_trait = false },
  { name = "PassportElementTemporaryRegistration", is_trait = false },
  { name = "PassportElementUtilityBill", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PassportElement> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElement.supers]]
name = "Object"

[[rtd.PassportElement.supers]]
name = "RObject"
[[rtd.PassportElement.supers]]
name = "Debug"







[rtd.RTDPassportElementType]
clz_name = "RTDPassportElementType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PassportElementAddress", is_trait = false },
  { name = "PassportElementBankStatement", is_trait = false },
  { name = "PassportElementDriverLicense", is_trait = false },
  { name = "PassportElementEmailAddress", is_trait = false },
  { name = "PassportElementIdentityCard", is_trait = false },
  { name = "PassportElementInternalPassport", is_trait = false },
  { name = "PassportElementPassport", is_trait = false },
  { name = "PassportElementPassportRegistration", is_trait = false },
  { name = "PassportElementPersonalDetails", is_trait = false },
  { name = "PassportElementPhoneNumber", is_trait = false },
  { name = "PassportElementRentalAgreement", is_trait = false },
  { name = "PassportElementTemporaryRegistration", is_trait = false },
  { name = "PassportElementUtilityBill", is_trait = false },
  
]
fields_size = 13
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPassportElementType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPassportElementType)(text.as_ref()) }
}
""",
]




[rtd.PassportElementPersonalDetails]
origin_name = "passportElementPersonalDetails"
clz_name = "PassportElementPersonalDetails"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's personal details.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "personal_details", class = "Option<PersonalDetails>", description = """ Personal details of the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementPersonalDetails {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementPersonalDetails.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementPersonalDetails.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementPersonalDetails" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementPersonalDetails """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementPersonalDetails.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementPassport]
origin_name = "passportElementPassport"
clz_name = "PassportElementPassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "passport", class = "Option<IdentityDocument>", description = """ Passport. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementPassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementPassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementPassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementPassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementPassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementPassport.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementDriverLicense]
origin_name = "passportElementDriverLicense"
clz_name = "PassportElementDriverLicense"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's driver license.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "driver_license", class = "Option<IdentityDocument>", description = """ Driver license. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementDriverLicense {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementDriverLicense.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementDriverLicense.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementDriverLicense" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementDriverLicense """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementDriverLicense.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementIdentityCard]
origin_name = "passportElementIdentityCard"
clz_name = "PassportElementIdentityCard"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's identity card.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "identity_card", class = "Option<IdentityDocument>", description = """ Identity card. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementIdentityCard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementIdentityCard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementIdentityCard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementIdentityCard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementIdentityCard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementIdentityCard.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementInternalPassport]
origin_name = "passportElementInternalPassport"
clz_name = "PassportElementInternalPassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's internal passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "internal_passport", class = "Option<IdentityDocument>", description = """ Internal passport. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementInternalPassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementInternalPassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementInternalPassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementInternalPassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementInternalPassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementInternalPassport.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementAddress]
origin_name = "passportElementAddress"
clz_name = "PassportElementAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "address", class = "Option<Address>", description = """ Address. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementAddress.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementUtilityBill]
origin_name = "passportElementUtilityBill"
clz_name = "PassportElementUtilityBill"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's utility bill.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "utility_bill", class = "Option<PersonalDocument>", description = """ Utility bill. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementUtilityBill {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementUtilityBill.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementUtilityBill.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementUtilityBill" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementUtilityBill """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementUtilityBill.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementBankStatement]
origin_name = "passportElementBankStatement"
clz_name = "PassportElementBankStatement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's bank statement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bank_statement", class = "Option<PersonalDocument>", description = """ Bank statement. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementBankStatement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementBankStatement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementBankStatement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementBankStatement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementBankStatement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementBankStatement.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementRentalAgreement]
origin_name = "passportElementRentalAgreement"
clz_name = "PassportElementRentalAgreement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's rental agreement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "rental_agreement", class = "Option<PersonalDocument>", description = """ Rental agreement. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementRentalAgreement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementRentalAgreement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementRentalAgreement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementRentalAgreement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementRentalAgreement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementRentalAgreement.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementPassportRegistration]
origin_name = "passportElementPassportRegistration"
clz_name = "PassportElementPassportRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's passport registration pages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "passport_registration", class = "Option<PersonalDocument>", description = """ Passport registration pages. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementPassportRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementPassportRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementPassportRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementPassportRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementPassportRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementPassportRegistration.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTemporaryRegistration]
origin_name = "passportElementTemporaryRegistration"
clz_name = "PassportElementTemporaryRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's temporary registration.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "temporary_registration", class = "Option<PersonalDocument>", description = """ Temporary registration. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTemporaryRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTemporaryRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTemporaryRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTemporaryRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTemporaryRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTemporaryRegistration.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementPhoneNumber]
origin_name = "passportElementPhoneNumber"
clz_name = "PassportElementPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ Phone number. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementPhoneNumber.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementEmailAddress]
origin_name = "passportElementEmailAddress"
clz_name = "PassportElementEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's email address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "email_address", class = "Option<String>", description = """ Email address. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementEmailAddress.supers]]
name = "PassportElement"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementError]
origin_name = "passportElementError"
clz_name = "PassportElementError"
is_private = false
clz_is_trait = false
clz_description = """ Contains the description of an error in a Telegram Passport element.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Type of the Telegram Passport element which has the error. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "message", class = "Option<String>", description = """ Error message. """, tags = [  ] },
  { name = "source", class = "Option<Box<PassportElementErrorSource>>", description = """ Error source. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementError {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PassportElementError {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElementError.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementError.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementError" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementError """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PassportElementErrorSource]
origin_name = "PassportElementErrorSource"
clz_name = "PassportElementErrorSource"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains the description of an error in a Telegram Passport element.  """
has_subclasses = true
sub_classes = [
  { name = "PassportElementErrorSourceDataField", is_trait = false },
  { name = "PassportElementErrorSourceFile", is_trait = false },
  { name = "PassportElementErrorSourceFiles", is_trait = false },
  { name = "PassportElementErrorSourceFrontSide", is_trait = false },
  { name = "PassportElementErrorSourceReverseSide", is_trait = false },
  { name = "PassportElementErrorSourceSelfie", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "PassportElementErrorSourceUnspecified", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PassportElementErrorSource {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PassportElementErrorSource> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElementErrorSource.supers]]
name = "Object"

[[rtd.PassportElementErrorSource.supers]]
name = "RObject"
[[rtd.PassportElementErrorSource.supers]]
name = "Debug"







[rtd.RTDPassportElementErrorSourceType]
clz_name = "RTDPassportElementErrorSourceType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PassportElementErrorSourceDataField", is_trait = false },
  { name = "PassportElementErrorSourceFile", is_trait = false },
  { name = "PassportElementErrorSourceFiles", is_trait = false },
  { name = "PassportElementErrorSourceFrontSide", is_trait = false },
  { name = "PassportElementErrorSourceReverseSide", is_trait = false },
  { name = "PassportElementErrorSourceSelfie", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFile", is_trait = false },
  { name = "PassportElementErrorSourceTranslationFiles", is_trait = false },
  { name = "PassportElementErrorSourceUnspecified", is_trait = false },
  
]
fields_size = 9
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPassportElementErrorSourceType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPassportElementErrorSourceType)(text.as_ref()) }
}
""",
]




[rtd.PassportElementErrorSourceUnspecified]
origin_name = "passportElementErrorSourceUnspecified"
clz_name = "PassportElementErrorSourceUnspecified"
is_private = false
clz_is_trait = false
clz_description = """ The element contains an error in an unspecified place. The error will be considered resolved when new data is added.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceUnspecified {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceUnspecified.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceUnspecified.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceUnspecified" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceUnspecified """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceUnspecified.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceDataField]
origin_name = "passportElementErrorSourceDataField"
clz_name = "PassportElementErrorSourceDataField"
is_private = false
clz_is_trait = false
clz_description = """ One of the data fields contains an error. The error will be considered resolved when the value of the field changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "field_name", class = "Option<String>", description = """ Field name. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceDataField {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceDataField.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceDataField.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceDataField" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceDataField """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceDataField.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceFrontSide]
origin_name = "passportElementErrorSourceFrontSide"
clz_name = "PassportElementErrorSourceFrontSide"
is_private = false
clz_is_trait = false
clz_description = """ The front side of the document contains an error. The error will be considered resolved when the file with the front side changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceFrontSide {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceFrontSide.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceFrontSide.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceFrontSide" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceFrontSide """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceFrontSide.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceReverseSide]
origin_name = "passportElementErrorSourceReverseSide"
clz_name = "PassportElementErrorSourceReverseSide"
is_private = false
clz_is_trait = false
clz_description = """ The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceReverseSide {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceReverseSide.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceReverseSide.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceReverseSide" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceReverseSide """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceReverseSide.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceSelfie]
origin_name = "passportElementErrorSourceSelfie"
clz_name = "PassportElementErrorSourceSelfie"
is_private = false
clz_is_trait = false
clz_description = """ The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceSelfie {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceSelfie.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceSelfie.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceSelfie" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceSelfie """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceSelfie.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceTranslationFile]
origin_name = "passportElementErrorSourceTranslationFile"
clz_name = "PassportElementErrorSourceTranslationFile"
is_private = false
clz_is_trait = false
clz_description = """ One of files with the translation of the document contains an error. The error will be considered resolved when the file changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_index", class = "Option<i32>", description = """ Index of a file with the error. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceTranslationFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceTranslationFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceTranslationFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceTranslationFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceTranslationFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceTranslationFile.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceTranslationFiles]
origin_name = "passportElementErrorSourceTranslationFiles"
clz_name = "PassportElementErrorSourceTranslationFiles"
is_private = false
clz_is_trait = false
clz_description = """ The translation of the document contains an error. The error will be considered resolved when the list of translation files changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceTranslationFiles {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceTranslationFiles.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceTranslationFiles.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceTranslationFiles" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceTranslationFiles """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceTranslationFiles.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceFile]
origin_name = "passportElementErrorSourceFile"
clz_name = "PassportElementErrorSourceFile"
is_private = false
clz_is_trait = false
clz_description = """ The file contains an error. The error will be considered resolved when the file changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_index", class = "Option<i32>", description = """ Index of a file with the error. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceFile.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementErrorSourceFiles]
origin_name = "passportElementErrorSourceFiles"
clz_name = "PassportElementErrorSourceFiles"
is_private = false
clz_is_trait = false
clz_description = """ The list of attached files contains an error. The error will be considered resolved when the list of files changes.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementErrorSourceFiles {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementErrorSourceFiles.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementErrorSourceFiles.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementErrorSourceFiles" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementErrorSourceFiles """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementErrorSourceFiles.supers]]
name = "PassportElementErrorSource"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementType]
origin_name = "PassportElementType"
clz_name = "PassportElementType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains the type of a Telegram Passport element.  """
has_subclasses = true
sub_classes = [
  { name = "PassportElementTypeAddress", is_trait = false },
  { name = "PassportElementTypeBankStatement", is_trait = false },
  { name = "PassportElementTypeDriverLicense", is_trait = false },
  { name = "PassportElementTypeEmailAddress", is_trait = false },
  { name = "PassportElementTypeIdentityCard", is_trait = false },
  { name = "PassportElementTypeInternalPassport", is_trait = false },
  { name = "PassportElementTypePassport", is_trait = false },
  { name = "PassportElementTypePassportRegistration", is_trait = false },
  { name = "PassportElementTypePersonalDetails", is_trait = false },
  { name = "PassportElementTypePhoneNumber", is_trait = false },
  { name = "PassportElementTypeRentalAgreement", is_trait = false },
  { name = "PassportElementTypeTemporaryRegistration", is_trait = false },
  { name = "PassportElementTypeUtilityBill", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PassportElementType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PassportElementType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElementType.supers]]
name = "Object"

[[rtd.PassportElementType.supers]]
name = "RObject"
[[rtd.PassportElementType.supers]]
name = "Debug"







[rtd.RTDPassportElementTypeType]
clz_name = "RTDPassportElementTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PassportElementTypeAddress", is_trait = false },
  { name = "PassportElementTypeBankStatement", is_trait = false },
  { name = "PassportElementTypeDriverLicense", is_trait = false },
  { name = "PassportElementTypeEmailAddress", is_trait = false },
  { name = "PassportElementTypeIdentityCard", is_trait = false },
  { name = "PassportElementTypeInternalPassport", is_trait = false },
  { name = "PassportElementTypePassport", is_trait = false },
  { name = "PassportElementTypePassportRegistration", is_trait = false },
  { name = "PassportElementTypePersonalDetails", is_trait = false },
  { name = "PassportElementTypePhoneNumber", is_trait = false },
  { name = "PassportElementTypeRentalAgreement", is_trait = false },
  { name = "PassportElementTypeTemporaryRegistration", is_trait = false },
  { name = "PassportElementTypeUtilityBill", is_trait = false },
  
]
fields_size = 13
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPassportElementTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPassportElementTypeType)(text.as_ref()) }
}
""",
]




[rtd.PassportElementTypePersonalDetails]
origin_name = "passportElementTypePersonalDetails"
clz_name = "PassportElementTypePersonalDetails"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's personal details.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypePersonalDetails {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypePersonalDetails.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypePersonalDetails.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypePersonalDetails" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypePersonalDetails """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypePersonalDetails.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypePassport]
origin_name = "passportElementTypePassport"
clz_name = "PassportElementTypePassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypePassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypePassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypePassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypePassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypePassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypePassport.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeDriverLicense]
origin_name = "passportElementTypeDriverLicense"
clz_name = "PassportElementTypeDriverLicense"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's driver license.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeDriverLicense {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeDriverLicense.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeDriverLicense.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeDriverLicense" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeDriverLicense """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeDriverLicense.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeIdentityCard]
origin_name = "passportElementTypeIdentityCard"
clz_name = "PassportElementTypeIdentityCard"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's identity card.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeIdentityCard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeIdentityCard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeIdentityCard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeIdentityCard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeIdentityCard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeIdentityCard.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeInternalPassport]
origin_name = "passportElementTypeInternalPassport"
clz_name = "PassportElementTypeInternalPassport"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's internal passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeInternalPassport {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeInternalPassport.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeInternalPassport.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeInternalPassport" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeInternalPassport """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeInternalPassport.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeAddress]
origin_name = "passportElementTypeAddress"
clz_name = "PassportElementTypeAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeAddress.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeUtilityBill]
origin_name = "passportElementTypeUtilityBill"
clz_name = "PassportElementTypeUtilityBill"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's utility bill.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeUtilityBill {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeUtilityBill.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeUtilityBill.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeUtilityBill" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeUtilityBill """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeUtilityBill.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeBankStatement]
origin_name = "passportElementTypeBankStatement"
clz_name = "PassportElementTypeBankStatement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's bank statement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeBankStatement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeBankStatement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeBankStatement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeBankStatement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeBankStatement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeBankStatement.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeRentalAgreement]
origin_name = "passportElementTypeRentalAgreement"
clz_name = "PassportElementTypeRentalAgreement"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's rental agreement.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeRentalAgreement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeRentalAgreement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeRentalAgreement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeRentalAgreement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeRentalAgreement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeRentalAgreement.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypePassportRegistration]
origin_name = "passportElementTypePassportRegistration"
clz_name = "PassportElementTypePassportRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the registration page of the user's passport.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypePassportRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypePassportRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypePassportRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypePassportRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypePassportRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypePassportRegistration.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeTemporaryRegistration]
origin_name = "passportElementTypeTemporaryRegistration"
clz_name = "PassportElementTypeTemporaryRegistration"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's temporary registration.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeTemporaryRegistration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeTemporaryRegistration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeTemporaryRegistration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeTemporaryRegistration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeTemporaryRegistration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeTemporaryRegistration.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypePhoneNumber]
origin_name = "passportElementTypePhoneNumber"
clz_name = "PassportElementTypePhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypePhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypePhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypePhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypePhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypePhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypePhoneNumber.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElementTypeEmailAddress]
origin_name = "passportElementTypeEmailAddress"
clz_name = "PassportElementTypeEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ A Telegram Passport element containing the user's email address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementTypeEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportElementTypeEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementTypeEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementTypeEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementTypeEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PassportElementTypeEmailAddress.supers]]
name = "PassportElementType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PassportElements]
origin_name = "passportElements"
clz_name = "PassportElements"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about saved Telegram Passport elements.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "elements", class = "Option<Vec<Box<PassportElement>>>", description = """ Telegram Passport elements. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElements {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PassportElements {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElements.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElements.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElements" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElements """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PassportElementsWithErrors]
origin_name = "passportElementsWithErrors"
clz_name = "PassportElementsWithErrors"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a Telegram Passport elements and corresponding errors.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "elements", class = "Option<Vec<Box<PassportElement>>>", description = """ Telegram Passport elements. """, tags = [  ] },
  { name = "errors", class = "Option<Vec<PassportElementError>>", description = """ Errors in the elements that are already available. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportElementsWithErrors {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PassportElementsWithErrors {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportElementsWithErrors.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportElementsWithErrors.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportElementsWithErrors" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportElementsWithErrors """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PassportRequiredElement]
origin_name = "passportRequiredElement"
clz_name = "PassportRequiredElement"
is_private = false
clz_is_trait = false
clz_description = """ Contains a description of the required Telegram Passport element that was requested by a service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "suitable_elements", class = "Option<Vec<PassportSuitableElement>>", description = """ List of Telegram Passport elements any of which is enough to provide. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportRequiredElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PassportRequiredElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportRequiredElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportRequiredElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportRequiredElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PassportSuitableElement]
origin_name = "passportSuitableElement"
clz_name = "PassportSuitableElement"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a Telegram Passport element that was requested by a service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Type of the element. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "is_selfie_required", class = "Option<bool>", description = """ True, if a selfie is required with the identity document. """, tags = [  ] },
  { name = "is_translation_required", class = "Option<bool>", description = """ True, if a certified English translation is required with the document. """, tags = [  ] },
  { name = "is_native_name_required", class = "Option<bool>", description = """ True, if personal details must include the user's name in the language of their country of residence. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PassportSuitableElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for PassportSuitableElement {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PassportSuitableElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PassportSuitableElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passportSuitableElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PassportSuitableElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PasswordState]
origin_name = "passwordState"
clz_name = "PasswordState"
is_private = false
clz_is_trait = false
clz_description = """ Represents the current state of 2-step verification.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "has_password", class = "Option<bool>", description = """ True, if a 2-step verification password is set. """, tags = [  ] },
  { name = "password_hint", class = "Option<String>", description = """ Hint for the password; may be empty. """, tags = [  ] },
  { name = "has_recovery_email_address", class = "Option<bool>", description = """ True, if a recovery email is set. """, tags = [  ] },
  { name = "has_passport_data", class = "Option<bool>", description = """ True, if some Telegram Passport elements were saved. """, tags = [  ] },
  { name = "recovery_email_address_code_info", class = "Option<EmailAddressAuthenticationCodeInfo>", description = """ Information about the recovery email address to which the confirmation email was sent; may be null. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PasswordState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PasswordState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PasswordState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "passwordState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PasswordState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PaymentForm]
origin_name = "paymentForm"
clz_name = "PaymentForm"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about an invoice payment form.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invoice", class = "Option<Invoice>", description = """ Full information of the invoice. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ Payment form URL. """, tags = [  ] },
  { name = "payments_provider", class = "Option<PaymentsProviderStripe>", description = """ Contains information about the payment provider, if available, to support it natively without the need for opening the URL; may be null. """, tags = [  ] },
  { name = "saved_order_info", class = "Option<OrderInfo>", description = """ Saved server-side order information; may be null. """, tags = [  ] },
  { name = "saved_credentials", class = "Option<SavedCredentials>", description = """ Contains information about saved card credentials; may be null. """, tags = [  ] },
  { name = "can_save_credentials", class = "Option<bool>", description = """ True, if the user can choose to save credentials. """, tags = [  ] },
  { name = "need_password", class = "Option<bool>", description = """ True, if the user will be able to save credentials protected by a password they set up. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PaymentForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PaymentForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PaymentForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "paymentForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PaymentForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PaymentReceipt]
origin_name = "paymentReceipt"
clz_name = "PaymentReceipt"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a successful payment.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the payment was made. """, tags = [  ] },
  { name = "payments_provider_user_id", class = "Option<i32>", description = """ User identifier of the payment provider bot. """, tags = [  ] },
  { name = "invoice", class = "Option<Invoice>", description = """ Contains information about the invoice. """, tags = [  ] },
  { name = "order_info", class = "Option<OrderInfo>", description = """ Contains order information; may be null. """, tags = [  ] },
  { name = "shipping_option", class = "Option<ShippingOption>", description = """ Chosen shipping option; may be null. """, tags = [  ] },
  { name = "credentials_title", class = "Option<String>", description = """ Title of the saved credentials. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PaymentReceipt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PaymentReceipt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PaymentReceipt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "paymentReceipt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PaymentReceipt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PaymentResult]
origin_name = "paymentResult"
clz_name = "PaymentResult"
is_private = false
clz_is_trait = false
clz_description = """ Contains the result of a payment request.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "success", class = "Option<bool>", description = """ True, if the payment request was successful; otherwise the verification_url will be not empty. """, tags = [  ] },
  { name = "verification_url", class = "Option<String>", description = """ URL for additional payment credentials verification. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PaymentResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PaymentResult.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PaymentResult.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "paymentResult" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PaymentResult """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PaymentsProviderStripe]
origin_name = "paymentsProviderStripe"
clz_name = "PaymentsProviderStripe"
is_private = false
clz_is_trait = false
clz_description = """ Stripe payment provider.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "publishable_key", class = "Option<String>", description = """ Stripe API publishable key. """, tags = [  ] },
  { name = "need_country", class = "Option<bool>", description = """ True, if the user country must be provided. """, tags = [  ] },
  { name = "need_postal_code", class = "Option<bool>", description = """ True, if the user ZIP/postal code must be provided. """, tags = [  ] },
  { name = "need_cardholder_name", class = "Option<bool>", description = """ True, if the cardholder name must be provided. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PaymentsProviderStripe {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PaymentsProviderStripe.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PaymentsProviderStripe.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "paymentsProviderStripe" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PaymentsProviderStripe """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PersonalDetails]
origin_name = "personalDetails"
clz_name = "PersonalDetails"
is_private = false
clz_is_trait = false
clz_description = """ Contains the user's personal details.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "first_name", class = "Option<String>", description = """ First name of the user written in English; 1-255 characters. """, tags = [  ] },
  { name = "middle_name", class = "Option<String>", description = """ Middle name of the user written in English; 0-255 characters. """, tags = [  ] },
  { name = "last_name", class = "Option<String>", description = """ Last name of the user written in English; 1-255 characters. """, tags = [  ] },
  { name = "native_first_name", class = "Option<String>", description = """ Native first name of the user; 1-255 characters. """, tags = [  ] },
  { name = "native_middle_name", class = "Option<String>", description = """ Native middle name of the user; 0-255 characters. """, tags = [  ] },
  { name = "native_last_name", class = "Option<String>", description = """ Native last name of the user; 1-255 characters. """, tags = [  ] },
  { name = "birthdate", class = "Option<Date>", description = """ Birthdate of the user. """, tags = [  ] },
  { name = "gender", class = "Option<String>", description = """ Gender of the user, "male" or "female". """, tags = [  ] },
  { name = "country_code", class = "Option<String>", description = """ A two-letter ISO 3166-1 alpha-2 country code of the user's country. """, tags = [  ] },
  { name = "residence_country_code", class = "Option<String>", description = """ A two-letter ISO 3166-1 alpha-2 country code of the user's residence country. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PersonalDetails {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PersonalDetails.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PersonalDetails.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "personalDetails" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PersonalDetails """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PersonalDocument]
origin_name = "personalDocument"
clz_name = "PersonalDocument"
is_private = false
clz_is_trait = false
clz_description = """ A personal document, containing some information about a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "files", class = "Option<Vec<DatedFile>>", description = """ List of files containing the pages of the document. """, tags = [  ] },
  { name = "translation", class = "Option<Vec<DatedFile>>", description = """ List of files containing a certified English translation of the document. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PersonalDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PersonalDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PersonalDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "personalDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PersonalDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Photo]
origin_name = "photo"
clz_name = "Photo"
is_private = false
clz_is_trait = false
clz_description = """ Describes a photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "has_stickers", class = "Option<bool>", description = """ True, if stickers were added to the photo. """, tags = [  ] },
  { name = "sizes", class = "Option<Vec<PhotoSize>>", description = """ Available variants of the photo, in different sizes. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Photo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Photo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Photo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "photo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Photo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PhotoSize]
origin_name = "photoSize"
clz_name = "PhotoSize"
is_private = false
clz_is_trait = false
clz_description = """ Photo description.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<String>", description = """ Thumbnail type (see https://core.telegram.org/constructor/photoSize). """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "photo", class = "Option<File>", description = """ Information about the photo file. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Photo width. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Photo height. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PhotoSize {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PhotoSize.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PhotoSize.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "photoSize" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PhotoSize """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Poll]
origin_name = "poll"
clz_name = "Poll"
is_private = false
clz_is_trait = false
clz_description = """ Describes a poll.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique poll identifier. """, tags = [  ] },
  { name = "question", class = "Option<String>", description = """ Poll question, 1-255 characters. """, tags = [  ] },
  { name = "options", class = "Option<Vec<PollOption>>", description = """ List of poll answer options. """, tags = [  ] },
  { name = "total_voter_count", class = "Option<i32>", description = """ Total number of voters, participating in the poll. """, tags = [  ] },
  { name = "is_closed", class = "Option<bool>", description = """ True, if the poll is closed. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Poll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Poll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Poll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "poll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Poll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PollOption]
origin_name = "pollOption"
clz_name = "PollOption"
is_private = false
clz_is_trait = false
clz_description = """ Describes one answer option of a poll.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Option text, 1-100 characters. """, tags = [  ] },
  { name = "voter_count", class = "Option<i32>", description = """ Number of voters for this option, available only for closed or voted polls. """, tags = [  ] },
  { name = "vote_percentage", class = "Option<i32>", description = """ The percentage of votes for this option, 0-100. """, tags = [  ] },
  { name = "is_chosen", class = "Option<bool>", description = """ True, if the option was chosen by the user. """, tags = [  ] },
  { name = "is_being_chosen", class = "Option<bool>", description = """ True, if the option is being chosen by a pending setPollAnswer request. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PollOption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PollOption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PollOption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pollOption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PollOption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ProfilePhoto]
origin_name = "profilePhoto"
clz_name = "ProfilePhoto"
is_private = false
clz_is_trait = false
clz_description = """ Describes a user profile photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of userProfilePhotos. """, tags = [  ] },
  { name = "small", class = "Option<File>", description = """ A small (160x160) user profile photo. """, tags = [  ] },
  { name = "big", class = "Option<File>", description = """ A big (640x640) user profile photo. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ProfilePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ProfilePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ProfilePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "profilePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ProfilePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Proxies]
origin_name = "proxies"
clz_name = "Proxies"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of proxy servers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxies", class = "Option<Vec<Proxy>>", description = """ List of proxy servers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Proxies {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Proxies.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Proxies.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "proxies" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Proxies """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Proxy]
origin_name = "proxy"
clz_name = "Proxy"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a proxy server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique identifier of the proxy. """, tags = [  ] },
  { name = "server", class = "Option<String>", description = """ Proxy server IP address. """, tags = [  ] },
  { name = "port", class = "Option<i32>", description = """ Proxy server port. """, tags = [  ] },
  { name = "last_used_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the proxy was last used; 0 if never. """, tags = [  ] },
  { name = "is_enabled", class = "Option<bool>", description = """ True, if the proxy is enabled now. """, tags = [  ] },
  { name = "type_", class = "Option<Box<ProxyType>>", description = """ Type of the proxy. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Proxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Proxy {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Proxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Proxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "proxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Proxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ProxyType]
origin_name = "ProxyType"
clz_name = "ProxyType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the type of the proxy server.  """
has_subclasses = true
sub_classes = [
  { name = "ProxyTypeHttp", is_trait = false },
  { name = "ProxyTypeMtproto", is_trait = false },
  { name = "ProxyTypeSocks5", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ProxyType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ProxyType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ProxyType.supers]]
name = "Object"

[[rtd.ProxyType.supers]]
name = "RObject"
[[rtd.ProxyType.supers]]
name = "Debug"







[rtd.RTDProxyTypeType]
clz_name = "RTDProxyTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ProxyTypeHttp", is_trait = false },
  { name = "ProxyTypeMtproto", is_trait = false },
  { name = "ProxyTypeSocks5", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDProxyTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDProxyTypeType)(text.as_ref()) }
}
""",
]




[rtd.ProxyTypeSocks5]
origin_name = "proxyTypeSocks5"
clz_name = "ProxyTypeSocks5"
is_private = false
clz_is_trait = false
clz_description = """ A SOCKS5 proxy server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "username", class = "Option<String>", description = """ Username for logging in; may be empty. """, tags = [  ] },
  { name = "password", class = "Option<String>", description = """ Password for logging in; may be empty. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ProxyTypeSocks5 {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ProxyTypeSocks5.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ProxyTypeSocks5.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "proxyTypeSocks5" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ProxyTypeSocks5 """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ProxyTypeSocks5.supers]]
name = "ProxyType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ProxyTypeHttp]
origin_name = "proxyTypeHttp"
clz_name = "ProxyTypeHttp"
is_private = false
clz_is_trait = false
clz_description = """ A HTTP transparent proxy server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "username", class = "Option<String>", description = """ Username for logging in; may be empty. """, tags = [  ] },
  { name = "password", class = "Option<String>", description = """ Password for logging in; may be empty. """, tags = [  ] },
  { name = "http_only", class = "Option<bool>", description = """ Pass true, if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ProxyTypeHttp {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ProxyTypeHttp.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ProxyTypeHttp.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "proxyTypeHttp" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ProxyTypeHttp """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ProxyTypeHttp.supers]]
name = "ProxyType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ProxyTypeMtproto]
origin_name = "proxyTypeMtproto"
clz_name = "ProxyTypeMtproto"
is_private = false
clz_is_trait = false
clz_description = """ An MTProto proxy server.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret", class = "Option<String>", description = """ The proxy's secret in hexadecimal encoding. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ProxyTypeMtproto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ProxyTypeMtproto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ProxyTypeMtproto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "proxyTypeMtproto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ProxyTypeMtproto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ProxyTypeMtproto.supers]]
name = "ProxyType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PublicMessageLink]
origin_name = "publicMessageLink"
clz_name = "PublicMessageLink"
is_private = false
clz_is_trait = false
clz_description = """ Contains a public HTTPS link to a message in a public supergroup or channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "link", class = "Option<String>", description = """ Message link. """, tags = [  ] },
  { name = "html", class = "Option<String>", description = """ HTML-code for embedding the message. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PublicMessageLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PublicMessageLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PublicMessageLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "publicMessageLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PublicMessageLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.PushMessageContent]
origin_name = "PushMessageContent"
clz_name = "PushMessageContent"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains content of a push message notification.  """
has_subclasses = true
sub_classes = [
  { name = "PushMessageContentAnimation", is_trait = false },
  { name = "PushMessageContentAudio", is_trait = false },
  { name = "PushMessageContentBasicGroupChatCreate", is_trait = false },
  { name = "PushMessageContentChatAddMembers", is_trait = false },
  { name = "PushMessageContentChatChangePhoto", is_trait = false },
  { name = "PushMessageContentChatChangeTitle", is_trait = false },
  { name = "PushMessageContentChatDeleteMember", is_trait = false },
  { name = "PushMessageContentChatJoinByLink", is_trait = false },
  { name = "PushMessageContentContact", is_trait = false },
  { name = "PushMessageContentContactRegistered", is_trait = false },
  { name = "PushMessageContentDocument", is_trait = false },
  { name = "PushMessageContentGame", is_trait = false },
  { name = "PushMessageContentGameScore", is_trait = false },
  { name = "PushMessageContentHidden", is_trait = false },
  { name = "PushMessageContentInvoice", is_trait = false },
  { name = "PushMessageContentLocation", is_trait = false },
  { name = "PushMessageContentMediaAlbum", is_trait = false },
  { name = "PushMessageContentMessageForwards", is_trait = false },
  { name = "PushMessageContentPhoto", is_trait = false },
  { name = "PushMessageContentPoll", is_trait = false },
  { name = "PushMessageContentScreenshotTaken", is_trait = false },
  { name = "PushMessageContentSticker", is_trait = false },
  { name = "PushMessageContentText", is_trait = false },
  { name = "PushMessageContentVideo", is_trait = false },
  { name = "PushMessageContentVideoNote", is_trait = false },
  { name = "PushMessageContentVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl PushMessageContent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<PushMessageContent> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.PushMessageContent.supers]]
name = "Object"

[[rtd.PushMessageContent.supers]]
name = "RObject"
[[rtd.PushMessageContent.supers]]
name = "Debug"







[rtd.RTDPushMessageContentType]
clz_name = "RTDPushMessageContentType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "PushMessageContentAnimation", is_trait = false },
  { name = "PushMessageContentAudio", is_trait = false },
  { name = "PushMessageContentBasicGroupChatCreate", is_trait = false },
  { name = "PushMessageContentChatAddMembers", is_trait = false },
  { name = "PushMessageContentChatChangePhoto", is_trait = false },
  { name = "PushMessageContentChatChangeTitle", is_trait = false },
  { name = "PushMessageContentChatDeleteMember", is_trait = false },
  { name = "PushMessageContentChatJoinByLink", is_trait = false },
  { name = "PushMessageContentContact", is_trait = false },
  { name = "PushMessageContentContactRegistered", is_trait = false },
  { name = "PushMessageContentDocument", is_trait = false },
  { name = "PushMessageContentGame", is_trait = false },
  { name = "PushMessageContentGameScore", is_trait = false },
  { name = "PushMessageContentHidden", is_trait = false },
  { name = "PushMessageContentInvoice", is_trait = false },
  { name = "PushMessageContentLocation", is_trait = false },
  { name = "PushMessageContentMediaAlbum", is_trait = false },
  { name = "PushMessageContentMessageForwards", is_trait = false },
  { name = "PushMessageContentPhoto", is_trait = false },
  { name = "PushMessageContentPoll", is_trait = false },
  { name = "PushMessageContentScreenshotTaken", is_trait = false },
  { name = "PushMessageContentSticker", is_trait = false },
  { name = "PushMessageContentText", is_trait = false },
  { name = "PushMessageContentVideo", is_trait = false },
  { name = "PushMessageContentVideoNote", is_trait = false },
  { name = "PushMessageContentVoiceNote", is_trait = false },
  
]
fields_size = 26
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDPushMessageContentType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDPushMessageContentType)(text.as_ref()) }
}
""",
]




[rtd.PushMessageContentHidden]
origin_name = "pushMessageContentHidden"
clz_name = "PushMessageContentHidden"
is_private = false
clz_is_trait = false
clz_description = """ A general message with hidden content.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentHidden {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentHidden.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentHidden.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentHidden" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentHidden """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentHidden.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentAnimation]
origin_name = "pushMessageContentAnimation"
clz_name = "PushMessageContentAnimation"
is_private = false
clz_is_trait = false
clz_description = """ An animation message (GIF-style.)  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Animation>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<String>", description = """ Animation caption. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentAnimation.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentAudio]
origin_name = "pushMessageContentAudio"
clz_name = "PushMessageContentAudio"
is_private = false
clz_is_trait = false
clz_description = """ An audio message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "audio", class = "Option<Audio>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentAudio.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentContact]
origin_name = "pushMessageContentContact"
clz_name = "PushMessageContentContact"
is_private = false
clz_is_trait = false
clz_description = """ A message with a user contact.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ Contact's name. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentContact {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentContact.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentContact.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentContact" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentContact """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentContact.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentContactRegistered]
origin_name = "pushMessageContentContactRegistered"
clz_name = "PushMessageContentContactRegistered"
is_private = false
clz_is_trait = false
clz_description = """ A contact has registered with Telegram.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentContactRegistered {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentContactRegistered.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentContactRegistered.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentContactRegistered" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentContactRegistered """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentContactRegistered.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentDocument]
origin_name = "pushMessageContentDocument"
clz_name = "PushMessageContentDocument"
is_private = false
clz_is_trait = false
clz_description = """ A document message (a general file).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "document", class = "Option<Document>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentDocument.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentGame]
origin_name = "pushMessageContentGame"
clz_name = "PushMessageContentGame"
is_private = false
clz_is_trait = false
clz_description = """ A message with a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Game title, empty for pinned game message. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentGame {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentGame.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentGame.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentGame" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentGame """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentGame.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentGameScore]
origin_name = "pushMessageContentGameScore"
clz_name = "PushMessageContentGameScore"
is_private = false
clz_is_trait = false
clz_description = """ A new high score was achieved in a game.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Game title, empty for pinned message. """, tags = [  ] },
  { name = "score", class = "Option<i32>", description = """ New score, 0 for pinned message. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentGameScore {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentGameScore.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentGameScore.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentGameScore" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentGameScore """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentGameScore.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentInvoice]
origin_name = "pushMessageContentInvoice"
clz_name = "PushMessageContentInvoice"
is_private = false
clz_is_trait = false
clz_description = """ A message with an invoice from a bot.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "price", class = "Option<String>", description = """ Product price. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentInvoice {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentInvoice.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentInvoice.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentInvoice" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentInvoice """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentInvoice.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentLocation]
origin_name = "pushMessageContentLocation"
clz_name = "PushMessageContentLocation"
is_private = false
clz_is_trait = false
clz_description = """ A message with a location.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_live", class = "Option<bool>", description = """ True, if the location is live. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentLocation.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentPhoto]
origin_name = "pushMessageContentPhoto"
clz_name = "PushMessageContentPhoto"
is_private = false
clz_is_trait = false
clz_description = """ A photo message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Photo>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<String>", description = """ Photo caption. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the photo is secret. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentPhoto.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentPoll]
origin_name = "pushMessageContentPoll"
clz_name = "PushMessageContentPoll"
is_private = false
clz_is_trait = false
clz_description = """ A message with a poll.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "question", class = "Option<String>", description = """ Poll question. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentPoll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentPoll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentPoll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentPoll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentPoll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentPoll.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentScreenshotTaken]
origin_name = "pushMessageContentScreenshotTaken"
clz_name = "PushMessageContentScreenshotTaken"
is_private = false
clz_is_trait = false
clz_description = """ A screenshot of a message in the chat has been taken.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentScreenshotTaken {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentScreenshotTaken.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentScreenshotTaken.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentScreenshotTaken" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentScreenshotTaken """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentScreenshotTaken.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentSticker]
origin_name = "pushMessageContentSticker"
clz_name = "PushMessageContentSticker"
is_private = false
clz_is_trait = false
clz_description = """ A message with a sticker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Sticker>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "emoji", class = "Option<String>", description = """ Emoji corresponding to the sticker; may be empty. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentSticker.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentText]
origin_name = "pushMessageContentText"
clz_name = "PushMessageContentText"
is_private = false
clz_is_trait = false
clz_description = """ A text message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Message text. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentText.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentVideo]
origin_name = "pushMessageContentVideo"
clz_name = "PushMessageContentVideo"
is_private = false
clz_is_trait = false
clz_description = """ A video message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video", class = "Option<Video>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "caption", class = "Option<String>", description = """ Video caption. """, tags = [  ] },
  { name = "is_secret", class = "Option<bool>", description = """ True, if the video is secret. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentVideo.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentVideoNote]
origin_name = "pushMessageContentVideoNote"
clz_name = "PushMessageContentVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ A video note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "video_note", class = "Option<VideoNote>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentVideoNote.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentVoiceNote]
origin_name = "pushMessageContentVoiceNote"
clz_name = "PushMessageContentVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ A voice note message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "voice_note", class = "Option<VoiceNote>", description = """ Message content; may be null. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ True, if the message is a pinned message with the specified content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentVoiceNote.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentBasicGroupChatCreate]
origin_name = "pushMessageContentBasicGroupChatCreate"
clz_name = "PushMessageContentBasicGroupChatCreate"
is_private = false
clz_is_trait = false
clz_description = """ A newly created basic group.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentBasicGroupChatCreate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentBasicGroupChatCreate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentBasicGroupChatCreate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentBasicGroupChatCreate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentBasicGroupChatCreate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentBasicGroupChatCreate.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentChatAddMembers]
origin_name = "pushMessageContentChatAddMembers"
clz_name = "PushMessageContentChatAddMembers"
is_private = false
clz_is_trait = false
clz_description = """ New chat members were invited to a group.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "member_name", class = "Option<String>", description = """ Name of the added member. """, tags = [  ] },
  { name = "is_current_user", class = "Option<bool>", description = """ True, if the current user was added to the group. """, tags = [  ] },
  { name = "is_returned", class = "Option<bool>", description = """ True, if the user has returned to the group himself. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentChatAddMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentChatAddMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentChatAddMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentChatAddMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentChatAddMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentChatAddMembers.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentChatChangePhoto]
origin_name = "pushMessageContentChatChangePhoto"
clz_name = "PushMessageContentChatChangePhoto"
is_private = false
clz_is_trait = false
clz_description = """ A chat photo was edited.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentChatChangePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentChatChangePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentChatChangePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentChatChangePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentChatChangePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentChatChangePhoto.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentChatChangeTitle]
origin_name = "pushMessageContentChatChangeTitle"
clz_name = "PushMessageContentChatChangeTitle"
is_private = false
clz_is_trait = false
clz_description = """ A chat title was edited.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ New chat title. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentChatChangeTitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentChatChangeTitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentChatChangeTitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentChatChangeTitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentChatChangeTitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentChatChangeTitle.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentChatDeleteMember]
origin_name = "pushMessageContentChatDeleteMember"
clz_name = "PushMessageContentChatDeleteMember"
is_private = false
clz_is_trait = false
clz_description = """ A chat member was deleted.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "member_name", class = "Option<String>", description = """ Name of the deleted member. """, tags = [  ] },
  { name = "is_current_user", class = "Option<bool>", description = """ True, if the current user was deleted from the group. """, tags = [  ] },
  { name = "is_left", class = "Option<bool>", description = """ True, if the user has left the group himself. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentChatDeleteMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentChatDeleteMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentChatDeleteMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentChatDeleteMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentChatDeleteMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentChatDeleteMember.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentChatJoinByLink]
origin_name = "pushMessageContentChatJoinByLink"
clz_name = "PushMessageContentChatJoinByLink"
is_private = false
clz_is_trait = false
clz_description = """ A new member joined the chat by invite link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentChatJoinByLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentChatJoinByLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentChatJoinByLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentChatJoinByLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentChatJoinByLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentChatJoinByLink.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentMessageForwards]
origin_name = "pushMessageContentMessageForwards"
clz_name = "PushMessageContentMessageForwards"
is_private = false
clz_is_trait = false
clz_description = """ A forwarded messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Number of forwarded messages. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentMessageForwards {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentMessageForwards.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentMessageForwards.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentMessageForwards" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentMessageForwards """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentMessageForwards.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushMessageContentMediaAlbum]
origin_name = "pushMessageContentMediaAlbum"
clz_name = "PushMessageContentMediaAlbum"
is_private = false
clz_is_trait = false
clz_description = """ A media album.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Number of messages in the album. """, tags = [  ] },
  { name = "has_photos", class = "Option<bool>", description = """ True, if the album has at least one photo. """, tags = [  ] },
  { name = "has_videos", class = "Option<bool>", description = """ True, if the album has at least one video. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushMessageContentMediaAlbum {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushMessageContentMediaAlbum.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushMessageContentMediaAlbum.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushMessageContentMediaAlbum" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushMessageContentMediaAlbum """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PushMessageContentMediaAlbum.supers]]
name = "PushMessageContent"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.PushReceiverId]
origin_name = "pushReceiverId"
clz_name = "PushReceiverId"
is_private = false
clz_is_trait = false
clz_description = """ Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ The globally unique identifier of push notification subscription. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PushReceiverId {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PushReceiverId.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PushReceiverId.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pushReceiverId" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PushReceiverId """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.RecoveryEmailAddress]
origin_name = "recoveryEmailAddress"
clz_name = "RecoveryEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about the current recovery email address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "recovery_email_address", class = "Option<String>", description = """ Recovery email address. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RecoveryEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RecoveryEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RecoveryEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "recoveryEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RecoveryEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.RemoteFile]
origin_name = "remoteFile"
clz_name = "RemoteFile"
is_private = false
clz_is_trait = false
clz_description = """ Represents a remote file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Remote file identifier; may be empty. Can be used across application restarts or even from other devices for the current user. If the ID starts with "http://" or "https://", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and "#url#" as the conversion string. Clients should generate the file by downloading it to the specified location. """, tags = [  ] },
  { name = "is_uploading_active", class = "Option<bool>", description = """ True, if the file is currently being uploaded (or a remote copy is being generated by some other means). """, tags = [  ] },
  { name = "is_uploading_completed", class = "Option<bool>", description = """ True, if a remote copy is fully available. """, tags = [  ] },
  { name = "uploaded_size", class = "Option<i32>", description = """ Size of the remote available part of the file; 0 if unknown. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoteFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoteFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoteFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "remoteFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoteFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ReplyMarkup]
origin_name = "ReplyMarkup"
clz_name = "ReplyMarkup"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots.  """
has_subclasses = true
sub_classes = [
  { name = "ReplyMarkupForceReply", is_trait = false },
  { name = "ReplyMarkupInlineKeyboard", is_trait = false },
  { name = "ReplyMarkupRemoveKeyboard", is_trait = false },
  { name = "ReplyMarkupShowKeyboard", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl ReplyMarkup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<ReplyMarkup> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ReplyMarkup.supers]]
name = "Object"

[[rtd.ReplyMarkup.supers]]
name = "RObject"
[[rtd.ReplyMarkup.supers]]
name = "Debug"







[rtd.RTDReplyMarkupType]
clz_name = "RTDReplyMarkupType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "ReplyMarkupForceReply", is_trait = false },
  { name = "ReplyMarkupInlineKeyboard", is_trait = false },
  { name = "ReplyMarkupRemoveKeyboard", is_trait = false },
  { name = "ReplyMarkupShowKeyboard", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDReplyMarkupType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDReplyMarkupType)(text.as_ref()) }
}
""",
]




[rtd.ReplyMarkupRemoveKeyboard]
origin_name = "replyMarkupRemoveKeyboard"
clz_name = "ReplyMarkupRemoveKeyboard"
is_private = false
clz_is_trait = false
clz_description = """ Instructs clients to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0 will be sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_personal", class = "Option<bool>", description = """ True, if the keyboard is removed only for the mentioned users or the target user of a reply. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReplyMarkupRemoveKeyboard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReplyMarkupRemoveKeyboard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReplyMarkupRemoveKeyboard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "replyMarkupRemoveKeyboard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReplyMarkupRemoveKeyboard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReplyMarkupRemoveKeyboard.supers]]
name = "ReplyMarkup"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ReplyMarkupForceReply]
origin_name = "replyMarkupForceReply"
clz_name = "ReplyMarkupForceReply"
is_private = false
clz_is_trait = false
clz_description = """ Instructs clients to force a reply to this message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_personal", class = "Option<bool>", description = """ True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReplyMarkupForceReply {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReplyMarkupForceReply.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReplyMarkupForceReply.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "replyMarkupForceReply" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReplyMarkupForceReply """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReplyMarkupForceReply.supers]]
name = "ReplyMarkup"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ReplyMarkupShowKeyboard]
origin_name = "replyMarkupShowKeyboard"
clz_name = "ReplyMarkupShowKeyboard"
is_private = false
clz_is_trait = false
clz_description = """ Contains a custom keyboard layout to quickly reply to bots.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "rows", class = "Option<Vec<Vec<KeyboardButton>>>", description = """ A list of rows of bot keyboard buttons. """, tags = [  ] },
  { name = "resize_keyboard", class = "Option<bool>", description = """ True, if the client needs to resize the keyboard vertically. """, tags = [  ] },
  { name = "one_time", class = "Option<bool>", description = """ True, if the client needs to hide the keyboard after use. """, tags = [  ] },
  { name = "is_personal", class = "Option<bool>", description = """ True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReplyMarkupShowKeyboard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReplyMarkupShowKeyboard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReplyMarkupShowKeyboard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "replyMarkupShowKeyboard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReplyMarkupShowKeyboard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReplyMarkupShowKeyboard.supers]]
name = "ReplyMarkup"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.ReplyMarkupInlineKeyboard]
origin_name = "replyMarkupInlineKeyboard"
clz_name = "ReplyMarkupInlineKeyboard"
is_private = false
clz_is_trait = false
clz_description = """ Contains an inline keyboard layout.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "rows", class = "Option<Vec<Vec<InlineKeyboardButton>>>", description = """ A list of rows of inline keyboard buttons. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReplyMarkupInlineKeyboard {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReplyMarkupInlineKeyboard.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReplyMarkupInlineKeyboard.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "replyMarkupInlineKeyboard" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReplyMarkupInlineKeyboard """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReplyMarkupInlineKeyboard.supers]]
name = "ReplyMarkup"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichText]
origin_name = "RichText"
clz_name = "RichText"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes a text object inside an instant-view web page.  """
has_subclasses = true
sub_classes = [
  { name = "RichTextAnchor", is_trait = false },
  { name = "RichTextBold", is_trait = false },
  { name = "RichTextEmailAddress", is_trait = false },
  { name = "RichTextFixed", is_trait = false },
  { name = "RichTextIcon", is_trait = false },
  { name = "RichTextItalic", is_trait = false },
  { name = "RichTextMarked", is_trait = false },
  { name = "RichTextPhoneNumber", is_trait = false },
  { name = "RichTextPlain", is_trait = false },
  { name = "RichTexts", is_trait = false },
  { name = "RichTextStrikethrough", is_trait = false },
  { name = "RichTextSubscript", is_trait = false },
  { name = "RichTextSuperscript", is_trait = false },
  { name = "RichTextUnderline", is_trait = false },
  { name = "RichTextUrl", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl RichText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<RichText> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichText.supers]]
name = "Object"

[[rtd.RichText.supers]]
name = "RObject"
[[rtd.RichText.supers]]
name = "Debug"







[rtd.RTDRichTextType]
clz_name = "RTDRichTextType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "RichTextAnchor", is_trait = false },
  { name = "RichTextBold", is_trait = false },
  { name = "RichTextEmailAddress", is_trait = false },
  { name = "RichTextFixed", is_trait = false },
  { name = "RichTextIcon", is_trait = false },
  { name = "RichTextItalic", is_trait = false },
  { name = "RichTextMarked", is_trait = false },
  { name = "RichTextPhoneNumber", is_trait = false },
  { name = "RichTextPlain", is_trait = false },
  { name = "RichTexts", is_trait = false },
  { name = "RichTextStrikethrough", is_trait = false },
  { name = "RichTextSubscript", is_trait = false },
  { name = "RichTextSuperscript", is_trait = false },
  { name = "RichTextUnderline", is_trait = false },
  { name = "RichTextUrl", is_trait = false },
  
]
fields_size = 15
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDRichTextType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDRichTextType)(text.as_ref()) }
}
""",
]




[rtd.RichTextPlain]
origin_name = "richTextPlain"
clz_name = "RichTextPlain"
is_private = false
clz_is_trait = false
clz_description = """ A plain text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextPlain {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RichTextPlain.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextPlain.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextPlain" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextPlain """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextPlain.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextBold]
origin_name = "richTextBold"
clz_name = "RichTextBold"
is_private = false
clz_is_trait = false
clz_description = """ A bold rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextBold {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextBold {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextBold.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextBold.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextBold" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextBold """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextBold.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextItalic]
origin_name = "richTextItalic"
clz_name = "RichTextItalic"
is_private = false
clz_is_trait = false
clz_description = """ An italicized rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextItalic {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextItalic {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextItalic.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextItalic.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextItalic" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextItalic """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextItalic.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextUnderline]
origin_name = "richTextUnderline"
clz_name = "RichTextUnderline"
is_private = false
clz_is_trait = false
clz_description = """ An underlined rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextUnderline {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextUnderline {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextUnderline.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextUnderline.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextUnderline" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextUnderline """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextUnderline.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextStrikethrough]
origin_name = "richTextStrikethrough"
clz_name = "RichTextStrikethrough"
is_private = false
clz_is_trait = false
clz_description = """ A strike-through rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextStrikethrough {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextStrikethrough {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextStrikethrough.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextStrikethrough.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextStrikethrough" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextStrikethrough """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextStrikethrough.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextFixed]
origin_name = "richTextFixed"
clz_name = "RichTextFixed"
is_private = false
clz_is_trait = false
clz_description = """ A fixed-width rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextFixed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextFixed {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextFixed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextFixed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextFixed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextFixed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextFixed.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextUrl]
origin_name = "richTextUrl"
clz_name = "RichTextUrl"
is_private = false
clz_is_trait = false
clz_description = """ A rich text URL link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextUrl {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextUrl.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextEmailAddress]
origin_name = "richTextEmailAddress"
clz_name = "RichTextEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ A rich text email link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  { name = "email_address", class = "Option<String>", description = """ Email address. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextEmailAddress {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextEmailAddress.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextSubscript]
origin_name = "richTextSubscript"
clz_name = "RichTextSubscript"
is_private = false
clz_is_trait = false
clz_description = """ A subscript rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextSubscript {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextSubscript {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextSubscript.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextSubscript.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextSubscript" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextSubscript """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextSubscript.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextSuperscript]
origin_name = "richTextSuperscript"
clz_name = "RichTextSuperscript"
is_private = false
clz_is_trait = false
clz_description = """ A superscript rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextSuperscript {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextSuperscript {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextSuperscript.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextSuperscript.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextSuperscript" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextSuperscript """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextSuperscript.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextMarked]
origin_name = "richTextMarked"
clz_name = "RichTextMarked"
is_private = false
clz_is_trait = false
clz_description = """ A marked rich text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextMarked {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextMarked {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextMarked.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextMarked.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextMarked" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextMarked """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextMarked.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextPhoneNumber]
origin_name = "richTextPhoneNumber"
clz_name = "RichTextPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A rich text phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  { name = "phone_number", class = "Option<String>", description = """ Phone number. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextPhoneNumber {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextPhoneNumber.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextIcon]
origin_name = "richTextIcon"
clz_name = "RichTextIcon"
is_private = false
clz_is_trait = false
clz_description = """ A small image inside the text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "document", class = "Option<Document>", description = """ The image represented as a document. The image can be in GIF, JPEG or PNG format. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Width of a bounding box in which the image should be shown, 0 if unknown. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Height of a bounding box in which the image should be shown, 0 if unknown. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextIcon {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RichTextIcon.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextIcon.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextIcon" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextIcon """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextIcon.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTextAnchor]
origin_name = "richTextAnchor"
clz_name = "RichTextAnchor"
is_private = false
clz_is_trait = false
clz_description = """ A rich text anchor.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<Box<RichText>>", description = """ Text. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Anchor name. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTextAnchor {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTextAnchor {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTextAnchor.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTextAnchor.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTextAnchor" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTextAnchor """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTextAnchor.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.RichTexts]
origin_name = "richTexts"
clz_name = "RichTexts"
is_private = false
clz_is_trait = false
clz_description = """ A concatenation of rich texts.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "texts", class = "Option<Vec<Box<RichText>>>", description = """ Texts. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RichTexts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RichTexts {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RichTexts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RichTexts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "richTexts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RichTexts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RichTexts.supers]]
name = "RichText"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SavedCredentials]
origin_name = "savedCredentials"
clz_name = "SavedCredentials"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about saved card credentials.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Unique identifier of the saved credentials. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the saved credentials. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SavedCredentials {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SavedCredentials.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SavedCredentials.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "savedCredentials" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SavedCredentials """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ScopeNotificationSettings]
origin_name = "scopeNotificationSettings"
clz_name = "ScopeNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about notification settings for several chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "mute_for", class = "Option<i32>", description = """ Time left before notifications will be unmuted, in seconds. """, tags = [  ] },
  { name = "sound", class = "Option<String>", description = """ The name of an audio file to be used for notification sounds; only applies to iOS applications. """, tags = [  ] },
  { name = "show_preview", class = "Option<bool>", description = """ True, if message content should be displayed in notifications. """, tags = [  ] },
  { name = "disable_pinned_message_notifications", class = "Option<bool>", description = """ True, if notifications for incoming pinned messages will be created as for an ordinary unread message. """, tags = [  ] },
  { name = "disable_mention_notifications", class = "Option<bool>", description = """ True, if notifications for messages with mentions will be created as for an ordinary unread message. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ScopeNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ScopeNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ScopeNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "scopeNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ScopeNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.SearchMessagesFilter]
origin_name = "SearchMessagesFilter"
clz_name = "SearchMessagesFilter"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a filter for message search results.  """
has_subclasses = true
sub_classes = [
  { name = "SearchMessagesFilterAnimation", is_trait = false },
  { name = "SearchMessagesFilterAudio", is_trait = false },
  { name = "SearchMessagesFilterCall", is_trait = false },
  { name = "SearchMessagesFilterChatPhoto", is_trait = false },
  { name = "SearchMessagesFilterDocument", is_trait = false },
  { name = "SearchMessagesFilterEmpty", is_trait = false },
  { name = "SearchMessagesFilterMention", is_trait = false },
  { name = "SearchMessagesFilterMissedCall", is_trait = false },
  { name = "SearchMessagesFilterPhoto", is_trait = false },
  { name = "SearchMessagesFilterPhotoAndVideo", is_trait = false },
  { name = "SearchMessagesFilterUnreadMention", is_trait = false },
  { name = "SearchMessagesFilterUrl", is_trait = false },
  { name = "SearchMessagesFilterVideo", is_trait = false },
  { name = "SearchMessagesFilterVideoNote", is_trait = false },
  { name = "SearchMessagesFilterVoiceAndVideoNote", is_trait = false },
  { name = "SearchMessagesFilterVoiceNote", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl SearchMessagesFilter {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<SearchMessagesFilter> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SearchMessagesFilter.supers]]
name = "Object"

[[rtd.SearchMessagesFilter.supers]]
name = "RObject"
[[rtd.SearchMessagesFilter.supers]]
name = "Debug"







[rtd.RTDSearchMessagesFilterType]
clz_name = "RTDSearchMessagesFilterType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "SearchMessagesFilterAnimation", is_trait = false },
  { name = "SearchMessagesFilterAudio", is_trait = false },
  { name = "SearchMessagesFilterCall", is_trait = false },
  { name = "SearchMessagesFilterChatPhoto", is_trait = false },
  { name = "SearchMessagesFilterDocument", is_trait = false },
  { name = "SearchMessagesFilterEmpty", is_trait = false },
  { name = "SearchMessagesFilterMention", is_trait = false },
  { name = "SearchMessagesFilterMissedCall", is_trait = false },
  { name = "SearchMessagesFilterPhoto", is_trait = false },
  { name = "SearchMessagesFilterPhotoAndVideo", is_trait = false },
  { name = "SearchMessagesFilterUnreadMention", is_trait = false },
  { name = "SearchMessagesFilterUrl", is_trait = false },
  { name = "SearchMessagesFilterVideo", is_trait = false },
  { name = "SearchMessagesFilterVideoNote", is_trait = false },
  { name = "SearchMessagesFilterVoiceAndVideoNote", is_trait = false },
  { name = "SearchMessagesFilterVoiceNote", is_trait = false },
  
]
fields_size = 16
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDSearchMessagesFilterType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDSearchMessagesFilterType)(text.as_ref()) }
}
""",
]




[rtd.SearchMessagesFilterEmpty]
origin_name = "searchMessagesFilterEmpty"
clz_name = "SearchMessagesFilterEmpty"
is_private = false
clz_is_trait = false
clz_description = """ Returns all found messages, no filter is applied.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterEmpty.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterAnimation]
origin_name = "searchMessagesFilterAnimation"
clz_name = "SearchMessagesFilterAnimation"
is_private = false
clz_is_trait = false
clz_description = """ Returns only animation messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterAnimation.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterAudio]
origin_name = "searchMessagesFilterAudio"
clz_name = "SearchMessagesFilterAudio"
is_private = false
clz_is_trait = false
clz_description = """ Returns only audio messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterAudio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterAudio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterAudio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterAudio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterAudio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterAudio.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterDocument]
origin_name = "searchMessagesFilterDocument"
clz_name = "SearchMessagesFilterDocument"
is_private = false
clz_is_trait = false
clz_description = """ Returns only document messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterDocument {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterDocument.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterDocument.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterDocument" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterDocument """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterDocument.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterPhoto]
origin_name = "searchMessagesFilterPhoto"
clz_name = "SearchMessagesFilterPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Returns only photo messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterPhoto.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterVideo]
origin_name = "searchMessagesFilterVideo"
clz_name = "SearchMessagesFilterVideo"
is_private = false
clz_is_trait = false
clz_description = """ Returns only video messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterVideo.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterVoiceNote]
origin_name = "searchMessagesFilterVoiceNote"
clz_name = "SearchMessagesFilterVoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ Returns only voice note messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterVoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterVoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterVoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterVoiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterVoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterVoiceNote.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterPhotoAndVideo]
origin_name = "searchMessagesFilterPhotoAndVideo"
clz_name = "SearchMessagesFilterPhotoAndVideo"
is_private = false
clz_is_trait = false
clz_description = """ Returns only photo and video messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterPhotoAndVideo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterPhotoAndVideo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterPhotoAndVideo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterPhotoAndVideo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterPhotoAndVideo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterPhotoAndVideo.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterUrl]
origin_name = "searchMessagesFilterUrl"
clz_name = "SearchMessagesFilterUrl"
is_private = false
clz_is_trait = false
clz_description = """ Returns only messages containing URLs.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterUrl.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterChatPhoto]
origin_name = "searchMessagesFilterChatPhoto"
clz_name = "SearchMessagesFilterChatPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Returns only messages containing chat photos.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterChatPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterChatPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterChatPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterChatPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterChatPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterChatPhoto.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterCall]
origin_name = "searchMessagesFilterCall"
clz_name = "SearchMessagesFilterCall"
is_private = false
clz_is_trait = false
clz_description = """ Returns only call messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterCall.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterMissedCall]
origin_name = "searchMessagesFilterMissedCall"
clz_name = "SearchMessagesFilterMissedCall"
is_private = false
clz_is_trait = false
clz_description = """ Returns only incoming call messages with missed/declined discard reasons.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterMissedCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterMissedCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterMissedCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterMissedCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterMissedCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterMissedCall.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterVideoNote]
origin_name = "searchMessagesFilterVideoNote"
clz_name = "SearchMessagesFilterVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ Returns only video note messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterVideoNote.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterVoiceAndVideoNote]
origin_name = "searchMessagesFilterVoiceAndVideoNote"
clz_name = "SearchMessagesFilterVoiceAndVideoNote"
is_private = false
clz_is_trait = false
clz_description = """ Returns only voice and video note messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterVoiceAndVideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterVoiceAndVideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterVoiceAndVideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterVoiceAndVideoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterVoiceAndVideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterVoiceAndVideoNote.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterMention]
origin_name = "searchMessagesFilterMention"
clz_name = "SearchMessagesFilterMention"
is_private = false
clz_is_trait = false
clz_description = """ Returns only messages with mentions of the current user, or messages that are replies to their messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterMention {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterMention.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterMention.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterMention" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterMention """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterMention.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SearchMessagesFilterUnreadMention]
origin_name = "searchMessagesFilterUnreadMention"
clz_name = "SearchMessagesFilterUnreadMention"
is_private = false
clz_is_trait = false
clz_description = """ Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query or by the sending user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessagesFilterUnreadMention {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessagesFilterUnreadMention.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessagesFilterUnreadMention.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessagesFilterUnreadMention" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessagesFilterUnreadMention """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessagesFilterUnreadMention.supers]]
name = "SearchMessagesFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Seconds]
origin_name = "seconds"
clz_name = "Seconds"
is_private = false
clz_is_trait = false
clz_description = """ Contains a value representing a number of seconds.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "seconds", class = "Option<f64>", description = """ Number of seconds. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Seconds {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Seconds.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Seconds.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "seconds" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Seconds """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.SecretChat]
origin_name = "secretChat"
clz_name = "SecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Represents a secret chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Secret chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the chat partner. """, tags = [  ] },
  { name = "state", class = "Option<Box<SecretChatState>>", description = """ State of the secret chat. """, tags = [  ] },
  { name = "is_outbound", class = "Option<bool>", description = """ True, if the chat was created by the current user; otherwise false. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ Current message Time To Live setting (self-destruct timer) for the chat, in seconds. """, tags = [  ] },
  { name = "key_hash", class = "Option<String>", description = """ Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 bytes, which must be used to make a 12x12 square image with a color depth of 4. The first 16 bytes should be used to make a central 8x8 square, while the remaining 20 bytes should be used to construct a 2-pixel-wide border around that square. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers. """, tags = [  ] },
  { name = "layer", class = "Option<i32>", description = """ Secret chat layer; determines features supported by the other client. Video notes are supported if the layer >= 66. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SecretChat {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "secretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.SecretChatState]
origin_name = "SecretChatState"
clz_name = "SecretChatState"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the current secret chat state.  """
has_subclasses = true
sub_classes = [
  { name = "SecretChatStateClosed", is_trait = false },
  { name = "SecretChatStatePending", is_trait = false },
  { name = "SecretChatStateReady", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl SecretChatState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<SecretChatState> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SecretChatState.supers]]
name = "Object"

[[rtd.SecretChatState.supers]]
name = "RObject"
[[rtd.SecretChatState.supers]]
name = "Debug"







[rtd.RTDSecretChatStateType]
clz_name = "RTDSecretChatStateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "SecretChatStateClosed", is_trait = false },
  { name = "SecretChatStatePending", is_trait = false },
  { name = "SecretChatStateReady", is_trait = false },
  
]
fields_size = 3
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDSecretChatStateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDSecretChatStateType)(text.as_ref()) }
}
""",
]




[rtd.SecretChatStatePending]
origin_name = "secretChatStatePending"
clz_name = "SecretChatStatePending"
is_private = false
clz_is_trait = false
clz_description = """ The secret chat is not yet created; waiting for the other user to get online.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SecretChatStatePending {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SecretChatStatePending.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SecretChatStatePending.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "secretChatStatePending" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SecretChatStatePending """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SecretChatStatePending.supers]]
name = "SecretChatState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SecretChatStateReady]
origin_name = "secretChatStateReady"
clz_name = "SecretChatStateReady"
is_private = false
clz_is_trait = false
clz_description = """ The secret chat is ready to use.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SecretChatStateReady {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SecretChatStateReady.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SecretChatStateReady.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "secretChatStateReady" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SecretChatStateReady """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SecretChatStateReady.supers]]
name = "SecretChatState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SecretChatStateClosed]
origin_name = "secretChatStateClosed"
clz_name = "SecretChatStateClosed"
is_private = false
clz_is_trait = false
clz_description = """ The secret chat is closed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SecretChatStateClosed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SecretChatStateClosed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SecretChatStateClosed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "secretChatStateClosed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SecretChatStateClosed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SecretChatStateClosed.supers]]
name = "SecretChatState"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Session]
origin_name = "session"
clz_name = "Session"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about one session in a Telegram application used by the current user. Sessions should be shown to the user in the returned order.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Session identifier. """, tags = [  ] },
  { name = "is_current", class = "Option<bool>", description = """ True, if this session is the current session. """, tags = [  ] },
  { name = "is_password_pending", class = "Option<bool>", description = """ True, if a password is needed to complete authorization of the session. """, tags = [  ] },
  { name = "api_id", class = "Option<i32>", description = """ Telegram API identifier, as provided by the application. """, tags = [  ] },
  { name = "application_name", class = "Option<String>", description = """ Name of the application, as provided by the application. """, tags = [  ] },
  { name = "application_version", class = "Option<String>", description = """ The version of the application, as provided by the application. """, tags = [  ] },
  { name = "is_official_application", class = "Option<bool>", description = """ True, if the application is an official application or uses the api_id of an official application. """, tags = [  ] },
  { name = "device_model", class = "Option<String>", description = """ Model of the device the application has been run or is running on, as provided by the application. """, tags = [  ] },
  { name = "platform", class = "Option<String>", description = """ Operating system the application has been run or is running on, as provided by the application. """, tags = [  ] },
  { name = "system_version", class = "Option<String>", description = """ Version of the operating system the application has been run or is running on, as provided by the application. """, tags = [  ] },
  { name = "log_in_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user has logged in. """, tags = [  ] },
  { name = "last_active_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the session was last used. """, tags = [  ] },
  { name = "ip", class = "Option<String>", description = """ IP address from which the session was created, in human-readable format. """, tags = [  ] },
  { name = "country", class = "Option<String>", description = """ A two-letter country code for the country from which the session was created, based on the IP address. """, tags = [  ] },
  { name = "region", class = "Option<String>", description = """ Region code from which the session was created, based on the IP address. """, tags = [  ] },
  
]
fields_size = 16
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Session {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Session.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Session.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "session" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Session """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Sessions]
origin_name = "sessions"
clz_name = "Sessions"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of sessions.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sessions", class = "Option<Vec<Session>>", description = """ List of sessions. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Sessions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Sessions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Sessions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sessions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Sessions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ShippingOption]
origin_name = "shippingOption"
clz_name = "ShippingOption"
is_private = false
clz_is_trait = false
clz_description = """ One shipping option.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<String>", description = """ Shipping option identifier. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Option title. """, tags = [  ] },
  { name = "price_parts", class = "Option<Vec<LabeledPricePart>>", description = """ A list of objects used to calculate the total shipping costs. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ShippingOption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ShippingOption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ShippingOption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "shippingOption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ShippingOption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Sticker]
origin_name = "sticker"
clz_name = "Sticker"
is_private = false
clz_is_trait = false
clz_description = """ Describes a sticker.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "set_id", class = "Option<i64>", description = """ The identifier of the sticker set to which the sticker belongs; 0 if none. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Sticker width; as defined by the sender. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Sticker height; as defined by the sender. """, tags = [  ] },
  { name = "emoji", class = "Option<String>", description = """ Emoji corresponding to the sticker. """, tags = [  ] },
  { name = "is_mask", class = "Option<bool>", description = """ True, if the sticker is a mask. """, tags = [  ] },
  { name = "mask_position", class = "Option<MaskPosition>", description = """ Position where the mask should be placed; may be null. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Sticker thumbnail in WEBP or JPEG format; may be null. """, tags = [  ] },
  { name = "sticker", class = "Option<File>", description = """ File containing the sticker. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Sticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Sticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Sticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Sticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StickerEmojis]
origin_name = "stickerEmojis"
clz_name = "StickerEmojis"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of all emoji corresponding to a sticker in a sticker set. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "emojis", class = "Option<Vec<String>>", description = """ List of emojis. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StickerEmojis {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StickerEmojis.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StickerEmojis.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stickerEmojis" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StickerEmojis """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StickerSet]
origin_name = "stickerSet"
clz_name = "StickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Represents a sticker set.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Identifier of the sticker set. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the sticker set. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Name of the sticker set. """, tags = [  ] },
  { name = "is_installed", class = "Option<bool>", description = """ True, if the sticker set has been installed by the current user. """, tags = [  ] },
  { name = "is_archived", class = "Option<bool>", description = """ True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously. """, tags = [  ] },
  { name = "is_official", class = "Option<bool>", description = """ True, if the sticker set is official. """, tags = [  ] },
  { name = "is_masks", class = "Option<bool>", description = """ True, if the stickers in the set are masks. """, tags = [  ] },
  { name = "is_viewed", class = "Option<bool>", description = """ True for already viewed trending sticker sets. """, tags = [  ] },
  { name = "stickers", class = "Option<Vec<Sticker>>", description = """ List of stickers in this set. """, tags = [  ] },
  { name = "emojis", class = "Option<Vec<StickerEmojis>>", description = """ A list of emoji corresponding to the stickers in the same order. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StickerSetInfo]
origin_name = "stickerSetInfo"
clz_name = "StickerSetInfo"
is_private = false
clz_is_trait = false
clz_description = """ Represents short information about a sticker set.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Identifier of the sticker set. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the sticker set. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Name of the sticker set. """, tags = [  ] },
  { name = "is_installed", class = "Option<bool>", description = """ True, if the sticker set has been installed by current user. """, tags = [  ] },
  { name = "is_archived", class = "Option<bool>", description = """ True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously. """, tags = [  ] },
  { name = "is_official", class = "Option<bool>", description = """ True, if the sticker set is official. """, tags = [  ] },
  { name = "is_masks", class = "Option<bool>", description = """ True, if the stickers in the set are masks. """, tags = [  ] },
  { name = "is_viewed", class = "Option<bool>", description = """ True for already viewed trending sticker sets. """, tags = [  ] },
  { name = "size", class = "Option<i32>", description = """ Total number of stickers in the set. """, tags = [  ] },
  { name = "covers", class = "Option<Vec<Sticker>>", description = """ Contains up to the first 5 stickers from the set, depending on the context. If the client needs more stickers the full set should be requested. """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StickerSetInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StickerSetInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StickerSetInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stickerSetInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StickerSetInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StickerSets]
origin_name = "stickerSets"
clz_name = "StickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of sticker sets.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Approximate total number of sticker sets found. """, tags = [  ] },
  { name = "sets", class = "Option<Vec<StickerSetInfo>>", description = """ List of sticker sets. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Stickers]
origin_name = "stickers"
clz_name = "Stickers"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of stickers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "stickers", class = "Option<Vec<Sticker>>", description = """ List of stickers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Stickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Stickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Stickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Stickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StorageStatistics]
origin_name = "storageStatistics"
clz_name = "StorageStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Contains the exact storage usage statistics split by chats and file type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "size", class = "Option<i64>", description = """ Total size of files. """, tags = [  ] },
  { name = "count", class = "Option<i32>", description = """ Total number of files. """, tags = [  ] },
  { name = "by_chat", class = "Option<Vec<StorageStatisticsByChat>>", description = """ Statistics split by chats. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StorageStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StorageStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StorageStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "storageStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StorageStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StorageStatisticsByChat]
origin_name = "storageStatisticsByChat"
clz_name = "StorageStatisticsByChat"
is_private = false
clz_is_trait = false
clz_description = """ Contains the storage usage statistics for a specific chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier; 0 if none. """, tags = [  ] },
  { name = "size", class = "Option<i64>", description = """ Total size of the files in the chat. """, tags = [  ] },
  { name = "count", class = "Option<i32>", description = """ Total number of files in the chat. """, tags = [  ] },
  { name = "by_file_type", class = "Option<Vec<StorageStatisticsByFileType>>", description = """ Statistics split by file types. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StorageStatisticsByChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StorageStatisticsByChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StorageStatisticsByChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "storageStatisticsByChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StorageStatisticsByChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StorageStatisticsByFileType]
origin_name = "storageStatisticsByFileType"
clz_name = "StorageStatisticsByFileType"
is_private = false
clz_is_trait = false
clz_description = """ Contains the storage usage statistics for a specific file type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_type", class = "Option<Box<FileType>>", description = """ File type. """, tags = [  ] },
  { name = "size", class = "Option<i64>", description = """ Total size of the files. """, tags = [  ] },
  { name = "count", class = "Option<i32>", description = """ Total number of files. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StorageStatisticsByFileType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for StorageStatisticsByFileType {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.StorageStatisticsByFileType.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StorageStatisticsByFileType.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "storageStatisticsByFileType" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StorageStatisticsByFileType """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.StorageStatisticsFast]
origin_name = "storageStatisticsFast"
clz_name = "StorageStatisticsFast"
is_private = false
clz_is_trait = false
clz_description = """ Contains approximate storage usage statistics, excluding files of unknown file type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "files_size", class = "Option<i64>", description = """ Approximate total size of files. """, tags = [  ] },
  { name = "file_count", class = "Option<i32>", description = """ Approximate number of files. """, tags = [  ] },
  { name = "database_size", class = "Option<i64>", description = """ Size of the database. """, tags = [  ] },
  { name = "language_pack_database_size", class = "Option<i64>", description = """ Size of the language pack database. """, tags = [  ] },
  { name = "log_size", class = "Option<i64>", description = """ Size of the TDLib internal log. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StorageStatisticsFast {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.StorageStatisticsFast.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StorageStatisticsFast.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "storageStatisticsFast" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StorageStatisticsFast """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Supergroup]
origin_name = "supergroup"
clz_name = "Supergroup"
is_private = false
clz_is_trait = false
clz_description = """ Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Supergroup or channel identifier. """, tags = [  ] },
  { name = "username", class = "Option<String>", description = """ Username of the supergroup or channel; empty for private supergroups or channels. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member. """, tags = [  ] },
  { name = "status", class = "Option<Box<ChatMemberStatus>>", description = """ Status of the current user in the supergroup or channel. """, tags = [  ] },
  { name = "member_count", class = "Option<i32>", description = """ Member count; 0 if unknown. Currently it is guaranteed to be known only if the supergroup or channel was found through SearchPublicChats. """, tags = [  ] },
  { name = "anyone_can_invite", class = "Option<bool>", description = """ True, if any member of the supergroup can invite other members. This field has no meaning for channels. """, tags = [  ] },
  { name = "sign_messages", class = "Option<bool>", description = """ True, if messages sent to the channel should contain information about the sender. This field is only applicable to channels. """, tags = [  ] },
  { name = "is_channel", class = "Option<bool>", description = """ True, if the supergroup is a channel. """, tags = [  ] },
  { name = "is_verified", class = "Option<bool>", description = """ True, if the supergroup or channel is verified. """, tags = [  ] },
  { name = "restriction_reason", class = "Option<String>", description = """ If non-empty, contains the reason why access to this supergroup or channel must be restricted. Format of the string is "{type}: {description}". {type} Contains the type of the restriction and at least one of the suffixes "-all", "-ios", "-android", or "-wp", which describe the platforms on which access should be restricted. (For example, "terms-ios-android". {description} contains a human-readable description of the restriction, which can be shown to the user.) """, tags = [  ] },
  
]
fields_size = 11
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Supergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Supergroup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Supergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Supergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Supergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.SupergroupFullInfo]
origin_name = "supergroupFullInfo"
clz_name = "SupergroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains full information about a supergroup or channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "description", class = "Option<String>", description = """ Supergroup or channel description. """, tags = [  ] },
  { name = "member_count", class = "Option<i32>", description = """ Number of members in the supergroup or channel; 0 if unknown. """, tags = [  ] },
  { name = "administrator_count", class = "Option<i32>", description = """ Number of privileged users in the supergroup or channel; 0 if unknown. """, tags = [  ] },
  { name = "restricted_count", class = "Option<i32>", description = """ Number of restricted users in the supergroup; 0 if unknown. """, tags = [  ] },
  { name = "banned_count", class = "Option<i32>", description = """ Number of users banned from chat; 0 if unknown. """, tags = [  ] },
  { name = "can_get_members", class = "Option<bool>", description = """ True, if members of the chat can be retrieved. """, tags = [  ] },
  { name = "can_set_username", class = "Option<bool>", description = """ True, if the chat can be made public. """, tags = [  ] },
  { name = "can_set_sticker_set", class = "Option<bool>", description = """ True, if the supergroup sticker set can be changed. """, tags = [  ] },
  { name = "can_view_statistics", class = "Option<bool>", description = """ True, if the channel statistics is available through getChatStatisticsUrl. """, tags = [  ] },
  { name = "is_all_history_available", class = "Option<bool>", description = """ True, if new chat members will have access to old messages. In public supergroups and both public and private channels, old messages are always available, so this option affects only private supergroups. The value of this field is only available for chat administrators. """, tags = [  ] },
  { name = "sticker_set_id", class = "Option<i64>", description = """ Identifier of the supergroup sticker set; 0 if none. """, tags = [  ] },
  { name = "invite_link", class = "Option<String>", description = """ Invite link for this chat. """, tags = [  ] },
  { name = "upgraded_from_basic_group_id", class = "Option<i32>", description = """ Identifier of the basic group from which supergroup was upgraded; 0 if none. """, tags = [  ] },
  { name = "upgraded_from_max_message_id", class = "Option<i64>", description = """ Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none. """, tags = [  ] },
  
]
fields_size = 15
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.SupergroupMembersFilter]
origin_name = "SupergroupMembersFilter"
clz_name = "SupergroupMembersFilter"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Specifies the kind of chat members to return in  """
has_subclasses = true
sub_classes = [
  { name = "SupergroupMembersFilterAdministrators", is_trait = false },
  { name = "SupergroupMembersFilterBanned", is_trait = false },
  { name = "SupergroupMembersFilterBots", is_trait = false },
  { name = "SupergroupMembersFilterRecent", is_trait = false },
  { name = "SupergroupMembersFilterRestricted", is_trait = false },
  { name = "SupergroupMembersFilterSearch", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl SupergroupMembersFilter {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<SupergroupMembersFilter> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SupergroupMembersFilter.supers]]
name = "Object"

[[rtd.SupergroupMembersFilter.supers]]
name = "RObject"
[[rtd.SupergroupMembersFilter.supers]]
name = "Debug"







[rtd.RTDSupergroupMembersFilterType]
clz_name = "RTDSupergroupMembersFilterType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "SupergroupMembersFilterAdministrators", is_trait = false },
  { name = "SupergroupMembersFilterBanned", is_trait = false },
  { name = "SupergroupMembersFilterBots", is_trait = false },
  { name = "SupergroupMembersFilterRecent", is_trait = false },
  { name = "SupergroupMembersFilterRestricted", is_trait = false },
  { name = "SupergroupMembersFilterSearch", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDSupergroupMembersFilterType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDSupergroupMembersFilterType)(text.as_ref()) }
}
""",
]




[rtd.SupergroupMembersFilterRecent]
origin_name = "supergroupMembersFilterRecent"
clz_name = "SupergroupMembersFilterRecent"
is_private = false
clz_is_trait = false
clz_description = """ Returns recently active users in reverse chronological order.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterRecent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterRecent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterRecent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterRecent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterRecent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterRecent.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SupergroupMembersFilterAdministrators]
origin_name = "supergroupMembersFilterAdministrators"
clz_name = "SupergroupMembersFilterAdministrators"
is_private = false
clz_is_trait = false
clz_description = """ Returns the creator and administrators.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterAdministrators {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterAdministrators.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterAdministrators.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterAdministrators" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterAdministrators """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterAdministrators.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SupergroupMembersFilterSearch]
origin_name = "supergroupMembersFilterSearch"
clz_name = "SupergroupMembersFilterSearch"
is_private = false
clz_is_trait = false
clz_description = """ Used to search for supergroup or channel members via a (string) query.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterSearch {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterSearch.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterSearch.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterSearch" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterSearch """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterSearch.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SupergroupMembersFilterRestricted]
origin_name = "supergroupMembersFilterRestricted"
clz_name = "SupergroupMembersFilterRestricted"
is_private = false
clz_is_trait = false
clz_description = """ Returns restricted supergroup members; can be used only by administrators.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterRestricted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterRestricted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterRestricted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterRestricted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterRestricted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterRestricted.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SupergroupMembersFilterBanned]
origin_name = "supergroupMembersFilterBanned"
clz_name = "SupergroupMembersFilterBanned"
is_private = false
clz_is_trait = false
clz_description = """ Returns users banned from the supergroup or channel; can be used only by administrators.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterBanned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterBanned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterBanned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterBanned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterBanned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterBanned.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.SupergroupMembersFilterBots]
origin_name = "supergroupMembersFilterBots"
clz_name = "SupergroupMembersFilterBots"
is_private = false
clz_is_trait = false
clz_description = """ Returns bot members of the supergroup or channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SupergroupMembersFilterBots {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SupergroupMembersFilterBots.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SupergroupMembersFilterBots.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "supergroupMembersFilterBots" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SupergroupMembersFilterBots """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SupergroupMembersFilterBots.supers]]
name = "SupergroupMembersFilter"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TMeUrl]
origin_name = "tMeUrl"
clz_name = "TMeUrl"
is_private = false
clz_is_trait = false
clz_description = """ Represents a URL linking to an internal Telegram entity.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ URL. """, tags = [  ] },
  { name = "type_", class = "Option<Box<TMeUrlType>>", description = """ Type of the URL. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for TMeUrl {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TMeUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TMeUrlType]
origin_name = "TMeUrlType"
clz_name = "TMeUrlType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the type of a URL linking to an internal Telegram entity.  """
has_subclasses = true
sub_classes = [
  { name = "TMeUrlTypeChatInvite", is_trait = false },
  { name = "TMeUrlTypeStickerSet", is_trait = false },
  { name = "TMeUrlTypeSupergroup", is_trait = false },
  { name = "TMeUrlTypeUser", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl TMeUrlType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<TMeUrlType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TMeUrlType.supers]]
name = "Object"

[[rtd.TMeUrlType.supers]]
name = "RObject"
[[rtd.TMeUrlType.supers]]
name = "Debug"







[rtd.RTDTMeUrlTypeType]
clz_name = "RTDTMeUrlTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "TMeUrlTypeChatInvite", is_trait = false },
  { name = "TMeUrlTypeStickerSet", is_trait = false },
  { name = "TMeUrlTypeSupergroup", is_trait = false },
  { name = "TMeUrlTypeUser", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDTMeUrlTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDTMeUrlTypeType)(text.as_ref()) }
}
""",
]




[rtd.TMeUrlTypeUser]
origin_name = "tMeUrlTypeUser"
clz_name = "TMeUrlTypeUser"
is_private = false
clz_is_trait = false
clz_description = """ A URL linking to a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrlTypeUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TMeUrlTypeUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrlTypeUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrlTypeUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrlTypeUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TMeUrlTypeUser.supers]]
name = "TMeUrlType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TMeUrlTypeSupergroup]
origin_name = "tMeUrlTypeSupergroup"
clz_name = "TMeUrlTypeSupergroup"
is_private = false
clz_is_trait = false
clz_description = """ A URL linking to a public supergroup or channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i64>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrlTypeSupergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TMeUrlTypeSupergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrlTypeSupergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrlTypeSupergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrlTypeSupergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TMeUrlTypeSupergroup.supers]]
name = "TMeUrlType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TMeUrlTypeChatInvite]
origin_name = "tMeUrlTypeChatInvite"
clz_name = "TMeUrlTypeChatInvite"
is_private = false
clz_is_trait = false
clz_description = """ A chat invite link.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "info", class = "Option<ChatInviteLinkInfo>", description = """ Chat invite link info. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrlTypeChatInvite {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TMeUrlTypeChatInvite.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrlTypeChatInvite.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrlTypeChatInvite" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrlTypeChatInvite """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TMeUrlTypeChatInvite.supers]]
name = "TMeUrlType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TMeUrlTypeStickerSet]
origin_name = "tMeUrlTypeStickerSet"
clz_name = "TMeUrlTypeStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ A URL linking to a sticker set.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker_set_id", class = "Option<i64>", description = """ Identifier of the sticker set. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrlTypeStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TMeUrlTypeStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrlTypeStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrlTypeStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrlTypeStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TMeUrlTypeStickerSet.supers]]
name = "TMeUrlType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TMeUrls]
origin_name = "tMeUrls"
clz_name = "TMeUrls"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of t.me URLs.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "urls", class = "Option<Vec<TMeUrl>>", description = """ List of URLs. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TMeUrls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TMeUrls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TMeUrls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tMeUrls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TMeUrls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TdlibParameters]
origin_name = "tdlibParameters"
clz_name = "TdlibParameters"
is_private = false
clz_is_trait = false
clz_description = """ Contains parameters for TDLib initialization.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "use_test_dc", class = "Option<bool>", description = """ If set to true, the Telegram test environment will be used instead of the production environment. """, tags = [  ] },
  { name = "database_directory", class = "Option<String>", description = """ The path to the directory for the persistent database; if empty, the current working directory will be used. """, tags = [  ] },
  { name = "files_directory", class = "Option<String>", description = """ The path to the directory for storing files; if empty, database_directory will be used. """, tags = [  ] },
  { name = "use_file_database", class = "Option<bool>", description = """ If set to true, information about downloaded and uploaded files will be saved between application restarts. """, tags = [  ] },
  { name = "use_chat_info_database", class = "Option<bool>", description = """ If set to true, the library will maintain a cache of users, basic groups, supergroups, channels and secret chats. Implies use_file_database. """, tags = [  ] },
  { name = "use_message_database", class = "Option<bool>", description = """ If set to true, the library will maintain a cache of chats and messages. Implies use_chat_info_database. """, tags = [  ] },
  { name = "use_secret_chats", class = "Option<bool>", description = """ If set to true, support for secret chats will be enabled. """, tags = [  ] },
  { name = "api_id", class = "Option<i32>", description = """ Application identifier for Telegram API access, which can be obtained at https://my.telegram.org. """, tags = [  ] },
  { name = "api_hash", class = "Option<String>", description = """ Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org. """, tags = [  ] },
  { name = "system_language_code", class = "Option<String>", description = """ IETF language tag of the user's operating system language; must be non-empty. """, tags = [  ] },
  { name = "device_model", class = "Option<String>", description = """ Model of the device the application is being run on; must be non-empty. """, tags = [  ] },
  { name = "system_version", class = "Option<String>", description = """ Version of the operating system the application is being run on; must be non-empty. """, tags = [  ] },
  { name = "application_version", class = "Option<String>", description = """ Application version; must be non-empty. """, tags = [  ] },
  { name = "enable_storage_optimizer", class = "Option<bool>", description = """ If set to true, old files will automatically be deleted. """, tags = [  ] },
  { name = "ignore_file_names", class = "Option<bool>", description = """ If set to true, original file names will be ignored. Otherwise, downloaded files will be saved under names as close as possible to the original name. """, tags = [  ] },
  
]
fields_size = 16
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TdlibParameters {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TdlibParameters.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TdlibParameters.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "tdlibParameters" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TdlibParameters """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TemporaryPasswordState]
origin_name = "temporaryPasswordState"
clz_name = "TemporaryPasswordState"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about the availability of a temporary password, which can be used for payments.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "has_password", class = "Option<bool>", description = """ True, if a temporary password is available. """, tags = [  ] },
  { name = "valid_for", class = "Option<i32>", description = """ Time left before the temporary password expires, in seconds. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TemporaryPasswordState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TemporaryPasswordState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TemporaryPasswordState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "temporaryPasswordState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TemporaryPasswordState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TermsOfService]
origin_name = "termsOfService"
clz_name = "TermsOfService"
is_private = false
clz_is_trait = false
clz_description = """ Contains Telegram terms of service.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<FormattedText>", description = """ Text of the terms of service. """, tags = [  ] },
  { name = "min_user_age", class = "Option<i32>", description = """ Mininum age of a user to be able to accept the terms; 0 if any. """, tags = [  ] },
  { name = "show_popup", class = "Option<bool>", description = """ True, if a blocking popup with terms of service must be shown to the user. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TermsOfService {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TermsOfService.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TermsOfService.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "termsOfService" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TermsOfService """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestBytes]
origin_name = "testBytes"
clz_name = "TestBytes"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a sequence of bytes; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<String>", description = """ Bytes. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestBytes {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestBytes.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestBytes.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testBytes" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestBytes """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestInt]
origin_name = "testInt"
clz_name = "TestInt"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a number; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<i32>", description = """ Number. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestInt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestInt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestInt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testInt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestInt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestString]
origin_name = "testString"
clz_name = "TestString"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a string; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<String>", description = """ String. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestVectorInt]
origin_name = "testVectorInt"
clz_name = "TestVectorInt"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a vector of numbers; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<Vec<i32>>", description = """ Vector of numbers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestVectorInt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestVectorInt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestVectorInt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testVectorInt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestVectorInt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestVectorIntObject]
origin_name = "testVectorIntObject"
clz_name = "TestVectorIntObject"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a vector of objects that hold a number; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<Vec<TestInt>>", description = """ Vector of objects. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestVectorIntObject {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestVectorIntObject.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestVectorIntObject.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testVectorIntObject" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestVectorIntObject """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestVectorString]
origin_name = "testVectorString"
clz_name = "TestVectorString"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a vector of strings; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<Vec<String>>", description = """ Vector of strings. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestVectorString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestVectorString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestVectorString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testVectorString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestVectorString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TestVectorStringObject]
origin_name = "testVectorStringObject"
clz_name = "TestVectorStringObject"
is_private = false
clz_is_trait = false
clz_description = """ A simple object containing a vector of objects that hold a string; for testing only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "value", class = "Option<Vec<TestString>>", description = """ Vector of objects. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestVectorStringObject {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestVectorStringObject.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestVectorStringObject.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testVectorStringObject" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestVectorStringObject """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Text]
origin_name = "text"
clz_name = "Text"
is_private = false
clz_is_trait = false
clz_description = """ Contains some text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ Text. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Text {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Text.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Text.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "text" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Text """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TextEntities]
origin_name = "textEntities"
clz_name = "TextEntities"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of text entities.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "entities", class = "Option<Vec<TextEntity>>", description = """ List of text entities. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntities {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntities.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntities.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntities" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntities """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TextEntity]
origin_name = "textEntity"
clz_name = "TextEntity"
is_private = false
clz_is_trait = false
clz_description = """ Represents a part of the text that needs to be formatted in some unusual way.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "offset", class = "Option<i32>", description = """ Offset of the entity in UTF-16 code points. """, tags = [  ] },
  { name = "length", class = "Option<i32>", description = """ Length of the entity, in UTF-16 code points. """, tags = [  ] },
  { name = "type_", class = "Option<Box<TextEntityType>>", description = """ Type of the entity. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntity {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for TextEntity {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TextEntity.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntity.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntity" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntity """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.TextEntityType]
origin_name = "TextEntityType"
clz_name = "TextEntityType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a part of the text which must be formatted differently.  """
has_subclasses = true
sub_classes = [
  { name = "TextEntityTypeBold", is_trait = false },
  { name = "TextEntityTypeBotCommand", is_trait = false },
  { name = "TextEntityTypeCashtag", is_trait = false },
  { name = "TextEntityTypeCode", is_trait = false },
  { name = "TextEntityTypeEmailAddress", is_trait = false },
  { name = "TextEntityTypeHashtag", is_trait = false },
  { name = "TextEntityTypeItalic", is_trait = false },
  { name = "TextEntityTypeMention", is_trait = false },
  { name = "TextEntityTypeMentionName", is_trait = false },
  { name = "TextEntityTypePhoneNumber", is_trait = false },
  { name = "TextEntityTypePre", is_trait = false },
  { name = "TextEntityTypePreCode", is_trait = false },
  { name = "TextEntityTypeTextUrl", is_trait = false },
  { name = "TextEntityTypeUrl", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl TextEntityType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<TextEntityType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TextEntityType.supers]]
name = "Object"

[[rtd.TextEntityType.supers]]
name = "RObject"
[[rtd.TextEntityType.supers]]
name = "Debug"







[rtd.RTDTextEntityTypeType]
clz_name = "RTDTextEntityTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "TextEntityTypeBold", is_trait = false },
  { name = "TextEntityTypeBotCommand", is_trait = false },
  { name = "TextEntityTypeCashtag", is_trait = false },
  { name = "TextEntityTypeCode", is_trait = false },
  { name = "TextEntityTypeEmailAddress", is_trait = false },
  { name = "TextEntityTypeHashtag", is_trait = false },
  { name = "TextEntityTypeItalic", is_trait = false },
  { name = "TextEntityTypeMention", is_trait = false },
  { name = "TextEntityTypeMentionName", is_trait = false },
  { name = "TextEntityTypePhoneNumber", is_trait = false },
  { name = "TextEntityTypePre", is_trait = false },
  { name = "TextEntityTypePreCode", is_trait = false },
  { name = "TextEntityTypeTextUrl", is_trait = false },
  { name = "TextEntityTypeUrl", is_trait = false },
  
]
fields_size = 14
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDTextEntityTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDTextEntityTypeType)(text.as_ref()) }
}
""",
]




[rtd.TextEntityTypeMention]
origin_name = "textEntityTypeMention"
clz_name = "TextEntityTypeMention"
is_private = false
clz_is_trait = false
clz_description = """ A mention of a user by their username.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeMention {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeMention.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeMention.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeMention" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeMention """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeMention.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeHashtag]
origin_name = "textEntityTypeHashtag"
clz_name = "TextEntityTypeHashtag"
is_private = false
clz_is_trait = false
clz_description = """ A hashtag text, beginning with "#".  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeHashtag {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeHashtag.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeHashtag.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeHashtag" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeHashtag """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeHashtag.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeCashtag]
origin_name = "textEntityTypeCashtag"
clz_name = "TextEntityTypeCashtag"
is_private = false
clz_is_trait = false
clz_description = """ A cashtag text, beginning with "$" and consisting of capital english letters (i.e. "$USD").  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeCashtag {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeCashtag.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeCashtag.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeCashtag" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeCashtag """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeCashtag.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeBotCommand]
origin_name = "textEntityTypeBotCommand"
clz_name = "TextEntityTypeBotCommand"
is_private = false
clz_is_trait = false
clz_description = """ A bot command, beginning with "/". This shouldn't be highlighted if there are no bots in the chat.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeBotCommand {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeBotCommand.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeBotCommand.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeBotCommand" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeBotCommand """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeBotCommand.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeUrl]
origin_name = "textEntityTypeUrl"
clz_name = "TextEntityTypeUrl"
is_private = false
clz_is_trait = false
clz_description = """ An HTTP URL.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeUrl.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeEmailAddress]
origin_name = "textEntityTypeEmailAddress"
clz_name = "TextEntityTypeEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ An email address.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeEmailAddress.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeBold]
origin_name = "textEntityTypeBold"
clz_name = "TextEntityTypeBold"
is_private = false
clz_is_trait = false
clz_description = """ A bold text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeBold {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeBold.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeBold.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeBold" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeBold """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeBold.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeItalic]
origin_name = "textEntityTypeItalic"
clz_name = "TextEntityTypeItalic"
is_private = false
clz_is_trait = false
clz_description = """ An italic text.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeItalic {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeItalic.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeItalic.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeItalic" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeItalic """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeItalic.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeCode]
origin_name = "textEntityTypeCode"
clz_name = "TextEntityTypeCode"
is_private = false
clz_is_trait = false
clz_description = """ Text that must be formatted as if inside a code HTML tag.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeCode.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypePre]
origin_name = "textEntityTypePre"
clz_name = "TextEntityTypePre"
is_private = false
clz_is_trait = false
clz_description = """ Text that must be formatted as if inside a pre HTML tag.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypePre {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypePre.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypePre.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypePre" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypePre """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypePre.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypePreCode]
origin_name = "textEntityTypePreCode"
clz_name = "TextEntityTypePreCode"
is_private = false
clz_is_trait = false
clz_description = """ Text that must be formatted as if inside pre, and code HTML tags.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language", class = "Option<String>", description = """ Programming language of the code; as defined by the sender. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypePreCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypePreCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypePreCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypePreCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypePreCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypePreCode.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeTextUrl]
origin_name = "textEntityTypeTextUrl"
clz_name = "TextEntityTypeTextUrl"
is_private = false
clz_is_trait = false
clz_description = """ A text description shown instead of a raw URL.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ HTTP or tg:// URL to be opened when the link is clicked. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeTextUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeTextUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeTextUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeTextUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeTextUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeTextUrl.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypeMentionName]
origin_name = "textEntityTypeMentionName"
clz_name = "TextEntityTypeMentionName"
is_private = false
clz_is_trait = false
clz_description = """ A text shows instead of a raw mention of the user (e.g., when the user has no username).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the mentioned user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypeMentionName {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypeMentionName.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypeMentionName.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypeMentionName" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypeMentionName """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypeMentionName.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextEntityTypePhoneNumber]
origin_name = "textEntityTypePhoneNumber"
clz_name = "TextEntityTypePhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ A phone number.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextEntityTypePhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextEntityTypePhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextEntityTypePhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textEntityTypePhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextEntityTypePhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextEntityTypePhoneNumber.supers]]
name = "TextEntityType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextParseMode]
origin_name = "TextParseMode"
clz_name = "TextParseMode"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the way the text should be parsed for TextEntities.  """
has_subclasses = true
sub_classes = [
  { name = "TextParseModeHTML", is_trait = false },
  { name = "TextParseModeMarkdown", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl TextParseMode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<TextParseMode> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TextParseMode.supers]]
name = "Object"

[[rtd.TextParseMode.supers]]
name = "RObject"
[[rtd.TextParseMode.supers]]
name = "Debug"







[rtd.RTDTextParseModeType]
clz_name = "RTDTextParseModeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "TextParseModeHTML", is_trait = false },
  { name = "TextParseModeMarkdown", is_trait = false },
  
]
fields_size = 2
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDTextParseModeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDTextParseModeType)(text.as_ref()) }
}
""",
]




[rtd.TextParseModeMarkdown]
origin_name = "textParseModeMarkdown"
clz_name = "TextParseModeMarkdown"
is_private = false
clz_is_trait = false
clz_description = """ The text should be parsed in markdown-style.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextParseModeMarkdown {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextParseModeMarkdown.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextParseModeMarkdown.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textParseModeMarkdown" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextParseModeMarkdown """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextParseModeMarkdown.supers]]
name = "TextParseMode"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TextParseModeHTML]
origin_name = "textParseModeHTML"
clz_name = "TextParseModeHTML"
is_private = false
clz_is_trait = false
clz_description = """ The text should be parsed in HTML-style.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TextParseModeHTML {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TextParseModeHTML.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TextParseModeHTML.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "textParseModeHTML" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TextParseModeHTML """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TextParseModeHTML.supers]]
name = "TextParseMode"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategory]
origin_name = "TopChatCategory"
clz_name = "TopChatCategory"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the categories of chats for which a list of frequently used chats can be retrieved.  """
has_subclasses = true
sub_classes = [
  { name = "TopChatCategoryBots", is_trait = false },
  { name = "TopChatCategoryCalls", is_trait = false },
  { name = "TopChatCategoryChannels", is_trait = false },
  { name = "TopChatCategoryGroups", is_trait = false },
  { name = "TopChatCategoryInlineBots", is_trait = false },
  { name = "TopChatCategoryUsers", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl TopChatCategory {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<TopChatCategory> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.TopChatCategory.supers]]
name = "Object"

[[rtd.TopChatCategory.supers]]
name = "RObject"
[[rtd.TopChatCategory.supers]]
name = "Debug"







[rtd.RTDTopChatCategoryType]
clz_name = "RTDTopChatCategoryType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "TopChatCategoryBots", is_trait = false },
  { name = "TopChatCategoryCalls", is_trait = false },
  { name = "TopChatCategoryChannels", is_trait = false },
  { name = "TopChatCategoryGroups", is_trait = false },
  { name = "TopChatCategoryInlineBots", is_trait = false },
  { name = "TopChatCategoryUsers", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDTopChatCategoryType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDTopChatCategoryType)(text.as_ref()) }
}
""",
]




[rtd.TopChatCategoryUsers]
origin_name = "topChatCategoryUsers"
clz_name = "TopChatCategoryUsers"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used private chats with non-bot users.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryUsers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryUsers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryUsers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryUsers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryUsers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryUsers.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategoryBots]
origin_name = "topChatCategoryBots"
clz_name = "TopChatCategoryBots"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used private chats with bot users.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryBots {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryBots.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryBots.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryBots" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryBots """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryBots.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategoryGroups]
origin_name = "topChatCategoryGroups"
clz_name = "TopChatCategoryGroups"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used basic groups and supergroups.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryGroups {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryGroups.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryGroups.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryGroups" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryGroups """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryGroups.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategoryChannels]
origin_name = "topChatCategoryChannels"
clz_name = "TopChatCategoryChannels"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used channels.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryChannels {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryChannels.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryChannels.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryChannels" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryChannels """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryChannels.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategoryInlineBots]
origin_name = "topChatCategoryInlineBots"
clz_name = "TopChatCategoryInlineBots"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used chats with inline bots sorted by their usage in inline mode.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryInlineBots {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryInlineBots.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryInlineBots.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryInlineBots" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryInlineBots """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryInlineBots.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.TopChatCategoryCalls]
origin_name = "topChatCategoryCalls"
clz_name = "TopChatCategoryCalls"
is_private = false
clz_is_trait = false
clz_description = """ A category containing frequently used chats used for calls.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TopChatCategoryCalls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TopChatCategoryCalls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TopChatCategoryCalls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "topChatCategoryCalls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TopChatCategoryCalls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TopChatCategoryCalls.supers]]
name = "TopChatCategory"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Update]
origin_name = "Update"
clz_name = "Update"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Contains notifications about data changes.  """
has_subclasses = true
sub_classes = [
  { name = "UpdateActiveNotifications", is_trait = false },
  { name = "UpdateAuthorizationState", is_trait = false },
  { name = "UpdateBasicGroup", is_trait = false },
  { name = "UpdateBasicGroupFullInfo", is_trait = false },
  { name = "UpdateCall", is_trait = false },
  { name = "UpdateChatDefaultDisableNotification", is_trait = false },
  { name = "UpdateChatDraftMessage", is_trait = false },
  { name = "UpdateChatIsMarkedAsUnread", is_trait = false },
  { name = "UpdateChatIsPinned", is_trait = false },
  { name = "UpdateChatIsSponsored", is_trait = false },
  { name = "UpdateChatLastMessage", is_trait = false },
  { name = "UpdateChatNotificationSettings", is_trait = false },
  { name = "UpdateChatOnlineMemberCount", is_trait = false },
  { name = "UpdateChatOrder", is_trait = false },
  { name = "UpdateChatPhoto", is_trait = false },
  { name = "UpdateChatPinnedMessage", is_trait = false },
  { name = "UpdateChatReadInbox", is_trait = false },
  { name = "UpdateChatReadOutbox", is_trait = false },
  { name = "UpdateChatReplyMarkup", is_trait = false },
  { name = "UpdateChatTitle", is_trait = false },
  { name = "UpdateChatUnreadMentionCount", is_trait = false },
  { name = "UpdateConnectionState", is_trait = false },
  { name = "UpdateDeleteMessages", is_trait = false },
  { name = "UpdateFavoriteStickers", is_trait = false },
  { name = "UpdateFile", is_trait = false },
  { name = "UpdateFileGenerationStart", is_trait = false },
  { name = "UpdateFileGenerationStop", is_trait = false },
  { name = "UpdateHavePendingNotifications", is_trait = false },
  { name = "UpdateInstalledStickerSets", is_trait = false },
  { name = "UpdateLanguagePackStrings", is_trait = false },
  { name = "UpdateMessageContent", is_trait = false },
  { name = "UpdateMessageContentOpened", is_trait = false },
  { name = "UpdateMessageEdited", is_trait = false },
  { name = "UpdateMessageMentionRead", is_trait = false },
  { name = "UpdateMessageSendAcknowledged", is_trait = false },
  { name = "UpdateMessageSendFailed", is_trait = false },
  { name = "UpdateMessageSendSucceeded", is_trait = false },
  { name = "UpdateMessageViews", is_trait = false },
  { name = "UpdateNewCallbackQuery", is_trait = false },
  { name = "UpdateNewChat", is_trait = false },
  { name = "UpdateNewChosenInlineResult", is_trait = false },
  { name = "UpdateNewCustomEvent", is_trait = false },
  { name = "UpdateNewCustomQuery", is_trait = false },
  { name = "UpdateNewInlineCallbackQuery", is_trait = false },
  { name = "UpdateNewInlineQuery", is_trait = false },
  { name = "UpdateNewMessage", is_trait = false },
  { name = "UpdateNewPreCheckoutQuery", is_trait = false },
  { name = "UpdateNewShippingQuery", is_trait = false },
  { name = "UpdateNotification", is_trait = false },
  { name = "UpdateNotificationGroup", is_trait = false },
  { name = "UpdateOption", is_trait = false },
  { name = "UpdatePoll", is_trait = false },
  { name = "UpdateRecentStickers", is_trait = false },
  { name = "UpdateSavedAnimations", is_trait = false },
  { name = "UpdateScopeNotificationSettings", is_trait = false },
  { name = "UpdateSecretChat", is_trait = false },
  { name = "UpdateServiceNotification", is_trait = false },
  { name = "UpdateSupergroup", is_trait = false },
  { name = "UpdateSupergroupFullInfo", is_trait = false },
  { name = "UpdateTermsOfService", is_trait = false },
  { name = "UpdateTrendingStickerSets", is_trait = false },
  { name = "UpdateUnreadChatCount", is_trait = false },
  { name = "UpdateUnreadMessageCount", is_trait = false },
  { name = "UpdateUser", is_trait = false },
  { name = "UpdateUserChatAction", is_trait = false },
  { name = "UpdateUserFullInfo", is_trait = false },
  { name = "UpdateUserPrivacySettingRules", is_trait = false },
  { name = "UpdateUserStatus", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl Update {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<Update> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Update.supers]]
name = "Object"

[[rtd.Update.supers]]
name = "RObject"
[[rtd.Update.supers]]
name = "Debug"







[rtd.RTDUpdateType]
clz_name = "RTDUpdateType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "UpdateActiveNotifications", is_trait = false },
  { name = "UpdateAuthorizationState", is_trait = false },
  { name = "UpdateBasicGroup", is_trait = false },
  { name = "UpdateBasicGroupFullInfo", is_trait = false },
  { name = "UpdateCall", is_trait = false },
  { name = "UpdateChatDefaultDisableNotification", is_trait = false },
  { name = "UpdateChatDraftMessage", is_trait = false },
  { name = "UpdateChatIsMarkedAsUnread", is_trait = false },
  { name = "UpdateChatIsPinned", is_trait = false },
  { name = "UpdateChatIsSponsored", is_trait = false },
  { name = "UpdateChatLastMessage", is_trait = false },
  { name = "UpdateChatNotificationSettings", is_trait = false },
  { name = "UpdateChatOnlineMemberCount", is_trait = false },
  { name = "UpdateChatOrder", is_trait = false },
  { name = "UpdateChatPhoto", is_trait = false },
  { name = "UpdateChatPinnedMessage", is_trait = false },
  { name = "UpdateChatReadInbox", is_trait = false },
  { name = "UpdateChatReadOutbox", is_trait = false },
  { name = "UpdateChatReplyMarkup", is_trait = false },
  { name = "UpdateChatTitle", is_trait = false },
  { name = "UpdateChatUnreadMentionCount", is_trait = false },
  { name = "UpdateConnectionState", is_trait = false },
  { name = "UpdateDeleteMessages", is_trait = false },
  { name = "UpdateFavoriteStickers", is_trait = false },
  { name = "UpdateFile", is_trait = false },
  { name = "UpdateFileGenerationStart", is_trait = false },
  { name = "UpdateFileGenerationStop", is_trait = false },
  { name = "UpdateHavePendingNotifications", is_trait = false },
  { name = "UpdateInstalledStickerSets", is_trait = false },
  { name = "UpdateLanguagePackStrings", is_trait = false },
  { name = "UpdateMessageContent", is_trait = false },
  { name = "UpdateMessageContentOpened", is_trait = false },
  { name = "UpdateMessageEdited", is_trait = false },
  { name = "UpdateMessageMentionRead", is_trait = false },
  { name = "UpdateMessageSendAcknowledged", is_trait = false },
  { name = "UpdateMessageSendFailed", is_trait = false },
  { name = "UpdateMessageSendSucceeded", is_trait = false },
  { name = "UpdateMessageViews", is_trait = false },
  { name = "UpdateNewCallbackQuery", is_trait = false },
  { name = "UpdateNewChat", is_trait = false },
  { name = "UpdateNewChosenInlineResult", is_trait = false },
  { name = "UpdateNewCustomEvent", is_trait = false },
  { name = "UpdateNewCustomQuery", is_trait = false },
  { name = "UpdateNewInlineCallbackQuery", is_trait = false },
  { name = "UpdateNewInlineQuery", is_trait = false },
  { name = "UpdateNewMessage", is_trait = false },
  { name = "UpdateNewPreCheckoutQuery", is_trait = false },
  { name = "UpdateNewShippingQuery", is_trait = false },
  { name = "UpdateNotification", is_trait = false },
  { name = "UpdateNotificationGroup", is_trait = false },
  { name = "UpdateOption", is_trait = false },
  { name = "UpdatePoll", is_trait = false },
  { name = "UpdateRecentStickers", is_trait = false },
  { name = "UpdateSavedAnimations", is_trait = false },
  { name = "UpdateScopeNotificationSettings", is_trait = false },
  { name = "UpdateSecretChat", is_trait = false },
  { name = "UpdateServiceNotification", is_trait = false },
  { name = "UpdateSupergroup", is_trait = false },
  { name = "UpdateSupergroupFullInfo", is_trait = false },
  { name = "UpdateTermsOfService", is_trait = false },
  { name = "UpdateTrendingStickerSets", is_trait = false },
  { name = "UpdateUnreadChatCount", is_trait = false },
  { name = "UpdateUnreadMessageCount", is_trait = false },
  { name = "UpdateUser", is_trait = false },
  { name = "UpdateUserChatAction", is_trait = false },
  { name = "UpdateUserFullInfo", is_trait = false },
  { name = "UpdateUserPrivacySettingRules", is_trait = false },
  { name = "UpdateUserStatus", is_trait = false },
  
]
fields_size = 68
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDUpdateType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDUpdateType)(text.as_ref()) }
}
""",
]




[rtd.UpdateAuthorizationState]
origin_name = "updateAuthorizationState"
clz_name = "UpdateAuthorizationState"
is_private = false
clz_is_trait = false
clz_description = """ The user authorization state has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "authorization_state", class = "Option<Box<AuthorizationState>>", description = """ New authorization state. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateAuthorizationState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateAuthorizationState {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateAuthorizationState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateAuthorizationState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateAuthorizationState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateAuthorizationState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateAuthorizationState.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewMessage]
origin_name = "updateNewMessage"
clz_name = "UpdateNewMessage"
is_private = false
clz_is_trait = false
clz_description = """ A new message was received; can also be an outgoing message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ The new message. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewMessage.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageSendAcknowledged]
origin_name = "updateMessageSendAcknowledged"
clz_name = "UpdateMessageSendAcknowledged"
is_private = false
clz_is_trait = false
clz_description = """ A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully or even that the send message request will be processed. This update will be sent only if the option "use_quick_ack" is set to true. This update may be sent multiple times for the same message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat identifier of the sent message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ A temporary message identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageSendAcknowledged {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageSendAcknowledged.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageSendAcknowledged.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageSendAcknowledged" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageSendAcknowledged """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageSendAcknowledged.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageSendSucceeded]
origin_name = "updateMessageSendSucceeded"
clz_name = "UpdateMessageSendSucceeded"
is_private = false
clz_is_trait = false
clz_description = """ A message has been successfully sent.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ Information about the sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change. """, tags = [  ] },
  { name = "old_message_id", class = "Option<i64>", description = """ The previous temporary message identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageSendSucceeded {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageSendSucceeded.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageSendSucceeded.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageSendSucceeded" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageSendSucceeded """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageSendSucceeded.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageSendFailed]
origin_name = "updateMessageSendFailed"
clz_name = "UpdateMessageSendFailed"
is_private = false
clz_is_trait = false
clz_description = """ A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "message", class = "Option<Message>", description = """ Contains information about the message that failed to send. """, tags = [  ] },
  { name = "old_message_id", class = "Option<i64>", description = """ The previous temporary message identifier. """, tags = [  ] },
  { name = "error_code", class = "Option<i32>", description = """ An error code. """, tags = [  ] },
  { name = "error_message", class = "Option<String>", description = """ Error message. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageSendFailed {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageSendFailed.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageSendFailed.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageSendFailed" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageSendFailed """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageSendFailed.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageContent]
origin_name = "updateMessageContent"
clz_name = "UpdateMessageContent"
is_private = false
clz_is_trait = false
clz_description = """ The message content has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "new_content", class = "Option<Box<MessageContent>>", description = """ New message content. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageContent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateMessageContent {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateMessageContent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageContent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageContent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageContent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageContent.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageEdited]
origin_name = "updateMessageEdited"
clz_name = "UpdateMessageEdited"
is_private = false
clz_is_trait = false
clz_description = """ A message was edited. Changes in the message content will come in a separate  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "edit_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the message was edited. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ New message reply markup; may be null. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageEdited {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateMessageEdited {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateMessageEdited.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageEdited.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageEdited" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageEdited """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageEdited.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageViews]
origin_name = "updateMessageViews"
clz_name = "UpdateMessageViews"
is_private = false
clz_is_trait = false
clz_description = """ The view count of the message has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "views", class = "Option<i32>", description = """ New value of the view count. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageViews {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageViews.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageViews.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageViews" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageViews """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageViews.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageContentOpened]
origin_name = "updateMessageContentOpened"
clz_name = "UpdateMessageContentOpened"
is_private = false
clz_is_trait = false
clz_description = """ The message content was opened. Updates voice note messages to "listened", video note messages to "viewed" and starts the TTL timer for self-destructing messages.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageContentOpened {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageContentOpened.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageContentOpened.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageContentOpened" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageContentOpened """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageContentOpened.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateMessageMentionRead]
origin_name = "updateMessageMentionRead"
clz_name = "UpdateMessageMentionRead"
is_private = false
clz_is_trait = false
clz_description = """ A message with an unread mention was read.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "unread_mention_count", class = "Option<i32>", description = """ The new number of unread mention messages left in the chat. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateMessageMentionRead {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateMessageMentionRead.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateMessageMentionRead.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateMessageMentionRead" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateMessageMentionRead """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateMessageMentionRead.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewChat]
origin_name = "updateNewChat"
clz_name = "UpdateNewChat"
is_private = false
clz_is_trait = false
clz_description = """ A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat", class = "Option<Chat>", description = """ The chat. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewChat.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatTitle]
origin_name = "updateChatTitle"
clz_name = "UpdateChatTitle"
is_private = false
clz_is_trait = false
clz_description = """ The title of a chat was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ The new chat title. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatTitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatTitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatTitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatTitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatTitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatTitle.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatPhoto]
origin_name = "updateChatPhoto"
clz_name = "UpdateChatPhoto"
is_private = false
clz_is_trait = false
clz_description = """ A chat photo was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "photo", class = "Option<ChatPhoto>", description = """ The new chat photo; may be null. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatPhoto.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatLastMessage]
origin_name = "updateChatLastMessage"
clz_name = "UpdateChatLastMessage"
is_private = false
clz_is_trait = false
clz_description = """ The last message of a chat was changed. If last_message is null then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "last_message", class = "Option<Message>", description = """ The new last message in the chat; may be null. """, tags = [  ] },
  { name = "order", class = "Option<String>", description = """ New value of the chat order. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatLastMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatLastMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatLastMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatLastMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatLastMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatLastMessage.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatOrder]
origin_name = "updateChatOrder"
clz_name = "UpdateChatOrder"
is_private = false
clz_is_trait = false
clz_description = """ The order of the chat in the chat list has changed. Instead of this update  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "order", class = "Option<i64>", description = """ New value of the order. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatOrder {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatOrder.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatOrder.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatOrder" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatOrder """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatOrder.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatIsPinned]
origin_name = "updateChatIsPinned"
clz_name = "UpdateChatIsPinned"
is_private = false
clz_is_trait = false
clz_description = """ A chat was pinned or unpinned.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ New value of is_pinned. """, tags = [  ] },
  { name = "order", class = "Option<i64>", description = """ New value of the chat order. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatIsPinned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatIsPinned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatIsPinned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatIsPinned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatIsPinned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatIsPinned.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatIsMarkedAsUnread]
origin_name = "updateChatIsMarkedAsUnread"
clz_name = "UpdateChatIsMarkedAsUnread"
is_private = false
clz_is_trait = false
clz_description = """ A chat was marked as unread or was read.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_marked_as_unread", class = "Option<bool>", description = """ New value of is_marked_as_unread. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatIsMarkedAsUnread {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatIsMarkedAsUnread.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatIsMarkedAsUnread.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatIsMarkedAsUnread" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatIsMarkedAsUnread """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatIsMarkedAsUnread.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatIsSponsored]
origin_name = "updateChatIsSponsored"
clz_name = "UpdateChatIsSponsored"
is_private = false
clz_is_trait = false
clz_description = """ A chat's is_sponsored field has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_sponsored", class = "Option<bool>", description = """ New value of is_sponsored. """, tags = [  ] },
  { name = "order", class = "Option<i64>", description = """ New value of chat order. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatIsSponsored {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatIsSponsored.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatIsSponsored.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatIsSponsored" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatIsSponsored """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatIsSponsored.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatDefaultDisableNotification]
origin_name = "updateChatDefaultDisableNotification"
clz_name = "UpdateChatDefaultDisableNotification"
is_private = false
clz_is_trait = false
clz_description = """ The value of the default disable_notification parameter, used when a message is sent to the chat, was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "default_disable_notification", class = "Option<bool>", description = """ The new default_disable_notification value. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatDefaultDisableNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatDefaultDisableNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatDefaultDisableNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatDefaultDisableNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatDefaultDisableNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatDefaultDisableNotification.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatReadInbox]
origin_name = "updateChatReadInbox"
clz_name = "UpdateChatReadInbox"
is_private = false
clz_is_trait = false
clz_description = """ Incoming messages were read or number of unread messages has been changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "last_read_inbox_message_id", class = "Option<i64>", description = """ Identifier of the last read incoming message. """, tags = [  ] },
  { name = "unread_count", class = "Option<i32>", description = """ The number of unread messages left in the chat. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatReadInbox {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatReadInbox.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatReadInbox.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatReadInbox" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatReadInbox """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatReadInbox.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatReadOutbox]
origin_name = "updateChatReadOutbox"
clz_name = "UpdateChatReadOutbox"
is_private = false
clz_is_trait = false
clz_description = """ Outgoing messages were read.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "last_read_outbox_message_id", class = "Option<i64>", description = """ Identifier of last read outgoing message. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatReadOutbox {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatReadOutbox.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatReadOutbox.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatReadOutbox" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatReadOutbox """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatReadOutbox.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatUnreadMentionCount]
origin_name = "updateChatUnreadMentionCount"
clz_name = "UpdateChatUnreadMentionCount"
is_private = false
clz_is_trait = false
clz_description = """ The chat unread_mention_count has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "unread_mention_count", class = "Option<i32>", description = """ The number of unread mention messages left in the chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatUnreadMentionCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatUnreadMentionCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatUnreadMentionCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatUnreadMentionCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatUnreadMentionCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatUnreadMentionCount.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatNotificationSettings]
origin_name = "updateChatNotificationSettings"
clz_name = "UpdateChatNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Notification settings for a chat were changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "notification_settings", class = "Option<ChatNotificationSettings>", description = """ The new notification settings. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatNotificationSettings.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateScopeNotificationSettings]
origin_name = "updateScopeNotificationSettings"
clz_name = "UpdateScopeNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Notification settings for some type of chats were updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "scope", class = "Option<Box<NotificationSettingsScope>>", description = """ Types of chats for which notification settings were updated. """, tags = [  ] },
  { name = "notification_settings", class = "Option<ScopeNotificationSettings>", description = """ The new notification settings. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateScopeNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateScopeNotificationSettings {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateScopeNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateScopeNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateScopeNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateScopeNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateScopeNotificationSettings.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatPinnedMessage]
origin_name = "updateChatPinnedMessage"
clz_name = "UpdateChatPinnedMessage"
is_private = false
clz_is_trait = false
clz_description = """ The chat pinned message was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "pinned_message_id", class = "Option<i64>", description = """ The new identifier of the pinned message; 0 if there is no pinned message in the chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatPinnedMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatPinnedMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatPinnedMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatPinnedMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatPinnedMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatPinnedMessage.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatReplyMarkup]
origin_name = "updateChatReplyMarkup"
clz_name = "UpdateChatReplyMarkup"
is_private = false
clz_is_trait = false
clz_description = """ The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "reply_markup_message_id", class = "Option<i64>", description = """ Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatReplyMarkup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatReplyMarkup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatReplyMarkup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatReplyMarkup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatReplyMarkup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatReplyMarkup.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatDraftMessage]
origin_name = "updateChatDraftMessage"
clz_name = "UpdateChatDraftMessage"
is_private = false
clz_is_trait = false
clz_description = """ A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update shouldn't be applied.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "draft_message", class = "Option<DraftMessage>", description = """ The new draft message; may be null. """, tags = [  ] },
  { name = "order", class = "Option<i64>", description = """ New value of the chat order. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatDraftMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatDraftMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatDraftMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatDraftMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatDraftMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatDraftMessage.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateChatOnlineMemberCount]
origin_name = "updateChatOnlineMemberCount"
clz_name = "UpdateChatOnlineMemberCount"
is_private = false
clz_is_trait = false
clz_description = """ The number of online group members has changed. This update with non-zero count is sent only for currently opened chats. There is no guarantee that it will be sent just after the count has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat. """, tags = [  ] },
  { name = "online_member_count", class = "Option<i32>", description = """ New number of online members in the chat, or 0 if unknown. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateChatOnlineMemberCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateChatOnlineMemberCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateChatOnlineMemberCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateChatOnlineMemberCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateChatOnlineMemberCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateChatOnlineMemberCount.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNotification]
origin_name = "updateNotification"
clz_name = "UpdateNotification"
is_private = false
clz_is_trait = false
clz_description = """ A notification was changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "notification_group_id", class = "Option<i32>", description = """ Unique notification group identifier. """, tags = [  ] },
  { name = "notification", class = "Option<Notification>", description = """ Changed notification. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNotification.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNotificationGroup]
origin_name = "updateNotificationGroup"
clz_name = "UpdateNotificationGroup"
is_private = false
clz_is_trait = false
clz_description = """ A list of active notifications in a notification group has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "notification_group_id", class = "Option<i32>", description = """ Unique notification group identifier. """, tags = [  ] },
  { name = "type_", class = "Option<Box<NotificationGroupType>>", description = """ New type of the notification group. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of a chat to which all notifications in the group belong. """, tags = [  ] },
  { name = "notification_settings_chat_id", class = "Option<i64>", description = """ Chat identifier, which notification settings must be applied to the added notifications. """, tags = [  ] },
  { name = "is_silent", class = "Option<bool>", description = """ True, if the notifications should be shown without sound. """, tags = [  ] },
  { name = "total_count", class = "Option<i32>", description = """ Total number of unread notifications in the group, can be bigger than number of active notifications. """, tags = [  ] },
  { name = "added_notifications", class = "Option<Vec<Notification>>", description = """ List of added group notifications, sorted by notification ID. """, tags = [  ] },
  { name = "removed_notification_ids", class = "Option<Vec<i32>>", description = """ Identifiers of removed group notifications, sorted by notification ID. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNotificationGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateNotificationGroup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateNotificationGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNotificationGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNotificationGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNotificationGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNotificationGroup.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateActiveNotifications]
origin_name = "updateActiveNotifications"
clz_name = "UpdateActiveNotifications"
is_private = false
clz_is_trait = false
clz_description = """ Contains active notifications that was shown on previous application launches. This update is sent only if a message database is used. In that case it comes once before any  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "groups", class = "Option<Vec<NotificationGroup>>", description = """ Lists of active notification groups. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateActiveNotifications {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateActiveNotifications.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateActiveNotifications.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateActiveNotifications" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateActiveNotifications """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateActiveNotifications.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateHavePendingNotifications]
origin_name = "updateHavePendingNotifications"
clz_name = "UpdateHavePendingNotifications"
is_private = false
clz_is_trait = false
clz_description = """ Describes, whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "have_delayed_notifications", class = "Option<bool>", description = """ True, if there are some delayed notification updates, which will be sent soon. """, tags = [  ] },
  { name = "have_unreceived_notifications", class = "Option<bool>", description = """ True, if there can be some yet unreceived notifications, which are being fetched from the server. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateHavePendingNotifications {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateHavePendingNotifications.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateHavePendingNotifications.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateHavePendingNotifications" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateHavePendingNotifications """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateHavePendingNotifications.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateDeleteMessages]
origin_name = "updateDeleteMessages"
clz_name = "UpdateDeleteMessages"
is_private = false
clz_is_trait = false
clz_description = """ Some messages were deleted.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of the deleted messages. """, tags = [  ] },
  { name = "is_permanent", class = "Option<bool>", description = """ True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible). """, tags = [  ] },
  { name = "from_cache", class = "Option<bool>", description = """ True, if the messages are deleted only from the cache and can possibly be retrieved again in the future. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateDeleteMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateDeleteMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateDeleteMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateDeleteMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateDeleteMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateDeleteMessages.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUserChatAction]
origin_name = "updateUserChatAction"
clz_name = "UpdateUserChatAction"
is_private = false
clz_is_trait = false
clz_description = """ User activity in the chat has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of a user performing an action. """, tags = [  ] },
  { name = "action", class = "Option<Box<ChatAction>>", description = """ The action description. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUserChatAction {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateUserChatAction {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateUserChatAction.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUserChatAction.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUserChatAction" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUserChatAction """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUserChatAction.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUserStatus]
origin_name = "updateUserStatus"
clz_name = "UpdateUserStatus"
is_private = false
clz_is_trait = false
clz_description = """ The user went online or offline.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "status", class = "Option<Box<UserStatus>>", description = """ New status of the user. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUserStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateUserStatus {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateUserStatus.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUserStatus.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUserStatus" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUserStatus """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUserStatus.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUser]
origin_name = "updateUser"
clz_name = "UpdateUser"
is_private = false
clz_is_trait = false
clz_description = """ Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user", class = "Option<User>", description = """ New data about the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUser.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateBasicGroup]
origin_name = "updateBasicGroup"
clz_name = "UpdateBasicGroup"
is_private = false
clz_is_trait = false
clz_description = """ Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group", class = "Option<BasicGroup>", description = """ New data about the group. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateBasicGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateBasicGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateBasicGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateBasicGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateBasicGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateBasicGroup.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateSupergroup]
origin_name = "updateSupergroup"
clz_name = "UpdateSupergroup"
is_private = false
clz_is_trait = false
clz_description = """ Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup", class = "Option<Supergroup>", description = """ New data about the supergroup. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateSupergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateSupergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateSupergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateSupergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateSupergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateSupergroup.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateSecretChat]
origin_name = "updateSecretChat"
clz_name = "UpdateSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret_chat", class = "Option<SecretChat>", description = """ New data about the secret chat. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateSecretChat.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUserFullInfo]
origin_name = "updateUserFullInfo"
clz_name = "UpdateUserFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Some data from  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "user_full_info", class = "Option<UserFullInfo>", description = """ New full information about the user. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUserFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateUserFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUserFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUserFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUserFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUserFullInfo.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateBasicGroupFullInfo]
origin_name = "updateBasicGroupFullInfo"
clz_name = "UpdateBasicGroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Some data from  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Identifier of a basic group. """, tags = [  ] },
  { name = "basic_group_full_info", class = "Option<BasicGroupFullInfo>", description = """ New full information about the group. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateBasicGroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateBasicGroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateBasicGroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateBasicGroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateBasicGroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateBasicGroupFullInfo.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateSupergroupFullInfo]
origin_name = "updateSupergroupFullInfo"
clz_name = "UpdateSupergroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Some data from  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  { name = "supergroup_full_info", class = "Option<SupergroupFullInfo>", description = """ New full information about the supergroup. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateSupergroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateSupergroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateSupergroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateSupergroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateSupergroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateSupergroupFullInfo.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateServiceNotification]
origin_name = "updateServiceNotification"
clz_name = "UpdateServiceNotification"
is_private = false
clz_is_trait = false
clz_description = """ Service notification from the server. Upon receiving this the client must show a popup with the content of the notification.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<String>", description = """ Notification type. If type begins with "AUTH_KEY_DROP_", then two buttons "Cancel" and "Log out" should be shown under notification; if user presses the second, all local data should be destroyed using Destroy method. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "content", class = "Option<Box<MessageContent>>", description = """ Notification content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateServiceNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateServiceNotification {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateServiceNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateServiceNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateServiceNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateServiceNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateServiceNotification.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateFile]
origin_name = "updateFile"
clz_name = "UpdateFile"
is_private = false
clz_is_trait = false
clz_description = """ Information about a file was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file", class = "Option<File>", description = """ New data about the file. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateFile.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateFileGenerationStart]
origin_name = "updateFileGenerationStart"
clz_name = "UpdateFileGenerationStart"
is_private = false
clz_is_trait = false
clz_description = """ The file generation process needs to be started by the client.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "generation_id", class = "Option<i64>", description = """ Unique identifier for the generation process. """, tags = [  ] },
  { name = "original_path", class = "Option<String>", description = """ The path to a file from which a new file is generated; may be empty. """, tags = [  ] },
  { name = "destination_path", class = "Option<String>", description = """ The path to a file that should be created and where the new file should be generated. """, tags = [  ] },
  { name = "conversion", class = "Option<String>", description = """ String specifying the conversion applied to the original file. If conversion is "#url#" than original_path contains an HTTP/HTTPS URL of a file, which should be downloaded by the client. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateFileGenerationStart {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateFileGenerationStart.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateFileGenerationStart.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateFileGenerationStart" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateFileGenerationStart """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateFileGenerationStart.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateFileGenerationStop]
origin_name = "updateFileGenerationStop"
clz_name = "UpdateFileGenerationStop"
is_private = false
clz_is_trait = false
clz_description = """ File generation is no longer needed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "generation_id", class = "Option<i64>", description = """ Unique identifier for the generation process. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateFileGenerationStop {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateFileGenerationStop.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateFileGenerationStop.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateFileGenerationStop" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateFileGenerationStop """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateFileGenerationStop.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateCall]
origin_name = "updateCall"
clz_name = "UpdateCall"
is_private = false
clz_is_trait = false
clz_description = """ New call was created or information about a call was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call", class = "Option<Call>", description = """ New data about a call. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateCall.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUserPrivacySettingRules]
origin_name = "updateUserPrivacySettingRules"
clz_name = "UpdateUserPrivacySettingRules"
is_private = false
clz_is_trait = false
clz_description = """ Some privacy setting rules have been changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "setting", class = "Option<Box<UserPrivacySetting>>", description = """ The privacy setting. """, tags = [  ] },
  { name = "rules", class = "Option<UserPrivacySettingRules>", description = """ New privacy rules. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUserPrivacySettingRules {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateUserPrivacySettingRules {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateUserPrivacySettingRules.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUserPrivacySettingRules.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUserPrivacySettingRules" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUserPrivacySettingRules """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUserPrivacySettingRules.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUnreadMessageCount]
origin_name = "updateUnreadMessageCount"
clz_name = "UpdateUnreadMessageCount"
is_private = false
clz_is_trait = false
clz_description = """ Number of unread messages has changed. This update is sent only if a message database is used.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "unread_count", class = "Option<i32>", description = """ Total number of unread messages. """, tags = [  ] },
  { name = "unread_unmuted_count", class = "Option<i32>", description = """ Total number of unread messages in unmuted chats. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUnreadMessageCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateUnreadMessageCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUnreadMessageCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUnreadMessageCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUnreadMessageCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUnreadMessageCount.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateUnreadChatCount]
origin_name = "updateUnreadChatCount"
clz_name = "UpdateUnreadChatCount"
is_private = false
clz_is_trait = false
clz_description = """ Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if a message database is used.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "unread_count", class = "Option<i32>", description = """ Total number of unread chats. """, tags = [  ] },
  { name = "unread_unmuted_count", class = "Option<i32>", description = """ Total number of unread unmuted chats. """, tags = [  ] },
  { name = "marked_as_unread_count", class = "Option<i32>", description = """ Total number of chats marked as unread. """, tags = [  ] },
  { name = "marked_as_unread_unmuted_count", class = "Option<i32>", description = """ Total number of unmuted chats marked as unread. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateUnreadChatCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateUnreadChatCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateUnreadChatCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateUnreadChatCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateUnreadChatCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateUnreadChatCount.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateOption]
origin_name = "updateOption"
clz_name = "UpdateOption"
is_private = false
clz_is_trait = false
clz_description = """ An option changed its value.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ The option name. """, tags = [  ] },
  { name = "value", class = "Option<Box<OptionValue>>", description = """ The new option value. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateOption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateOption {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateOption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateOption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateOption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateOption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateOption.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateInstalledStickerSets]
origin_name = "updateInstalledStickerSets"
clz_name = "UpdateInstalledStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ The list of installed sticker sets was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_masks", class = "Option<bool>", description = """ True, if the list of installed mask sticker sets was updated. """, tags = [  ] },
  { name = "sticker_set_ids", class = "Option<Vec<i64>>", description = """ The new list of installed ordinary sticker sets. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateInstalledStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateInstalledStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateInstalledStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateInstalledStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateInstalledStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateInstalledStickerSets.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateTrendingStickerSets]
origin_name = "updateTrendingStickerSets"
clz_name = "UpdateTrendingStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ The list of trending sticker sets was updated or some of them were viewed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker_sets", class = "Option<StickerSets>", description = """ The new list of trending sticker sets. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateTrendingStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateTrendingStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateTrendingStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateTrendingStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateTrendingStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateTrendingStickerSets.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateRecentStickers]
origin_name = "updateRecentStickers"
clz_name = "UpdateRecentStickers"
is_private = false
clz_is_trait = false
clz_description = """ The list of recently used stickers was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_attached", class = "Option<bool>", description = """ True, if the list of stickers attached to photo or video files was updated, otherwise the list of sent stickers is updated. """, tags = [  ] },
  { name = "sticker_ids", class = "Option<Vec<i32>>", description = """ The new list of file identifiers of recently used stickers. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateRecentStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateRecentStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateRecentStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateRecentStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateRecentStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateRecentStickers.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateFavoriteStickers]
origin_name = "updateFavoriteStickers"
clz_name = "UpdateFavoriteStickers"
is_private = false
clz_is_trait = false
clz_description = """ The list of favorite stickers was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker_ids", class = "Option<Vec<i32>>", description = """ The new list of file identifiers of favorite stickers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateFavoriteStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateFavoriteStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateFavoriteStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateFavoriteStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateFavoriteStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateFavoriteStickers.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateSavedAnimations]
origin_name = "updateSavedAnimations"
clz_name = "UpdateSavedAnimations"
is_private = false
clz_is_trait = false
clz_description = """ The list of saved animations was updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation_ids", class = "Option<Vec<i32>>", description = """ The new list of file identifiers of saved animations. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateSavedAnimations {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateSavedAnimations.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateSavedAnimations.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateSavedAnimations" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateSavedAnimations """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateSavedAnimations.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateLanguagePackStrings]
origin_name = "updateLanguagePackStrings"
clz_name = "UpdateLanguagePackStrings"
is_private = false
clz_is_trait = false
clz_description = """ Some language pack strings have been updated.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "localization_target", class = "Option<String>", description = """ Localization target to which the language pack belongs. """, tags = [  ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Identifier of the updated language pack. """, tags = [  ] },
  { name = "strings", class = "Option<Vec<LanguagePackString>>", description = """ List of changed language pack strings. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateLanguagePackStrings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateLanguagePackStrings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateLanguagePackStrings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateLanguagePackStrings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateLanguagePackStrings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateLanguagePackStrings.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateConnectionState]
origin_name = "updateConnectionState"
clz_name = "UpdateConnectionState"
is_private = false
clz_is_trait = false
clz_description = """ The connection state has changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "state", class = "Option<Box<ConnectionState>>", description = """ The new connection state. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateConnectionState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateConnectionState {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateConnectionState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateConnectionState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateConnectionState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateConnectionState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateConnectionState.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateTermsOfService]
origin_name = "updateTermsOfService"
clz_name = "UpdateTermsOfService"
is_private = false
clz_is_trait = false
clz_description = """ New terms of service must be accepted by the user. If the terms of service are declined, then the  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "terms_of_service_id", class = "Option<String>", description = """ Identifier of the terms of service. """, tags = [  ] },
  { name = "terms_of_service", class = "Option<TermsOfService>", description = """ The new terms of service. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateTermsOfService {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateTermsOfService.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateTermsOfService.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateTermsOfService" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateTermsOfService """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateTermsOfService.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewInlineQuery]
origin_name = "updateNewInlineQuery"
clz_name = "UpdateNewInlineQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming inline query; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique query identifier. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "user_location", class = "Option<Location>", description = """ User location, provided by the client; may be null. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Text of the query. """, tags = [  ] },
  { name = "offset", class = "Option<String>", description = """ Offset of the first entry to return. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewInlineQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewInlineQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewInlineQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewInlineQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewInlineQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewInlineQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewChosenInlineResult]
origin_name = "updateNewChosenInlineResult"
clz_name = "UpdateNewChosenInlineResult"
is_private = false
clz_is_trait = false
clz_description = """ The user has chosen a result of an inline query; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "user_location", class = "Option<Location>", description = """ User location, provided by the client; may be null. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Text of the query. """, tags = [  ] },
  { name = "result_id", class = "Option<String>", description = """ Identifier of the chosen result. """, tags = [  ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Identifier of the sent inline message, if known. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewChosenInlineResult {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewChosenInlineResult.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewChosenInlineResult.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewChosenInlineResult" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewChosenInlineResult """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewChosenInlineResult.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewCallbackQuery]
origin_name = "updateNewCallbackQuery"
clz_name = "UpdateNewCallbackQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming callback query; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique query identifier. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat, in which the query was sent. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message, from which the query originated. """, tags = [  ] },
  { name = "chat_instance", class = "Option<i64>", description = """ Identifier that uniquely corresponds to the chat to which the message was sent. """, tags = [  ] },
  { name = "payload", class = "Option<Box<CallbackQueryPayload>>", description = """ Query payload. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewCallbackQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateNewCallbackQuery {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateNewCallbackQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewCallbackQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewCallbackQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewCallbackQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewCallbackQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewInlineCallbackQuery]
origin_name = "updateNewInlineCallbackQuery"
clz_name = "UpdateNewInlineCallbackQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming callback query from a message sent via a bot; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique query identifier. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Identifier of the inline message, from which the query originated. """, tags = [  ] },
  { name = "chat_instance", class = "Option<i64>", description = """ An identifier uniquely corresponding to the chat a message was sent to. """, tags = [  ] },
  { name = "payload", class = "Option<Box<CallbackQueryPayload>>", description = """ Query payload. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewInlineCallbackQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UpdateNewInlineCallbackQuery {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UpdateNewInlineCallbackQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewInlineCallbackQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewInlineCallbackQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewInlineCallbackQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewInlineCallbackQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewShippingQuery]
origin_name = "updateNewShippingQuery"
clz_name = "UpdateNewShippingQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming shipping query; for bots only. Only for invoices with flexible price.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique query identifier. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "invoice_payload", class = "Option<String>", description = """ Invoice payload. """, tags = [  ] },
  { name = "shipping_address", class = "Option<Address>", description = """ User shipping address. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewShippingQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewShippingQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewShippingQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewShippingQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewShippingQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewShippingQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewPreCheckoutQuery]
origin_name = "updateNewPreCheckoutQuery"
clz_name = "UpdateNewPreCheckoutQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming pre-checkout query; for bots only. Contains full information about a checkout.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique query identifier. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who sent the query. """, tags = [  ] },
  { name = "currency", class = "Option<String>", description = """ Currency for the product price. """, tags = [  ] },
  { name = "total_amount", class = "Option<i64>", description = """ Total price for the product, in the minimal quantity of the currency. """, tags = [  ] },
  { name = "invoice_payload", class = "Option<String>", description = """ Invoice payload. """, tags = [  ] },
  { name = "shipping_option_id", class = "Option<String>", description = """ Identifier of a shipping option chosen by the user; may be empty if not applicable. """, tags = [  ] },
  { name = "order_info", class = "Option<OrderInfo>", description = """ Information about the order; may be null. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewPreCheckoutQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewPreCheckoutQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewPreCheckoutQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewPreCheckoutQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewPreCheckoutQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewPreCheckoutQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewCustomEvent]
origin_name = "updateNewCustomEvent"
clz_name = "UpdateNewCustomEvent"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming event; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "event", class = "Option<String>", description = """ A JSON-serialized event. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewCustomEvent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewCustomEvent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewCustomEvent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewCustomEvent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewCustomEvent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewCustomEvent.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdateNewCustomQuery]
origin_name = "updateNewCustomQuery"
clz_name = "UpdateNewCustomQuery"
is_private = false
clz_is_trait = false
clz_description = """ A new incoming query; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ The query identifier. """, tags = [  ] },
  { name = "data", class = "Option<String>", description = """ JSON-serialized query data. """, tags = [  ] },
  { name = "timeout", class = "Option<i32>", description = """ Query timeout. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdateNewCustomQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdateNewCustomQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdateNewCustomQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updateNewCustomQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdateNewCustomQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdateNewCustomQuery.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UpdatePoll]
origin_name = "updatePoll"
clz_name = "UpdatePoll"
is_private = false
clz_is_trait = false
clz_description = """ Information about a poll was updated; for bots only.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "poll", class = "Option<Poll>", description = """ New data about the poll. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpdatePoll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpdatePoll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpdatePoll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updatePoll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpdatePoll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpdatePoll.supers]]
name = "Update"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Updates]
origin_name = "updates"
clz_name = "Updates"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of updates.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "updates", class = "Option<Vec<Box<Update>>>", description = """ List of updates. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Updates {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for Updates {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.Updates.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Updates.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "updates" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Updates """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.User]
origin_name = "user"
clz_name = "User"
is_private = false
clz_is_trait = false
clz_description = """ Represents a user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "first_name", class = "Option<String>", description = """ First name of the user. """, tags = [  ] },
  { name = "last_name", class = "Option<String>", description = """ Last name of the user. """, tags = [  ] },
  { name = "username", class = "Option<String>", description = """ Username of the user. """, tags = [  ] },
  { name = "phone_number", class = "Option<String>", description = """ Phone number of the user. """, tags = [  ] },
  { name = "status", class = "Option<Box<UserStatus>>", description = """ Current online status of the user. """, tags = [  ] },
  { name = "profile_photo", class = "Option<ProfilePhoto>", description = """ Profile photo of the user; may be null. """, tags = [  ] },
  { name = "outgoing_link", class = "Option<Box<LinkState>>", description = """ Relationship from the current user to the other user. """, tags = [  ] },
  { name = "incoming_link", class = "Option<Box<LinkState>>", description = """ Relationship from the other user to the current user. """, tags = [  ] },
  { name = "is_verified", class = "Option<bool>", description = """ True, if the user is verified. """, tags = [  ] },
  { name = "is_support", class = "Option<bool>", description = """ True, if the user is Telegram support account. """, tags = [  ] },
  { name = "restriction_reason", class = "Option<String>", description = """ If non-empty, it contains the reason why access to this user must be restricted. The format of the string is "{type}: {description}". {type} contains the type of the restriction and at least one of the suffixes "-all", "-ios", "-android", or "-wp", which describe the platforms on which access should be restricted. (For example, "terms-ios-android". {description} contains a human-readable description of the restriction, which can be shown to the user.) """, tags = [  ] },
  { name = "have_access", class = "Option<bool>", description = """ If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser. """, tags = [  ] },
  { name = "type_", class = "Option<Box<UserType>>", description = """ Type of the user. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "language_code", class = "Option<String>", description = """ IETF language tag of the user's language; only available to bots. """, tags = [  ] },
  
]
fields_size = 16
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl User {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for User {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.User.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.User.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "user" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::User """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.UserFullInfo]
origin_name = "userFullInfo"
clz_name = "UserFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains full information about a user (except the full list of profile photos).  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_blocked", class = "Option<bool>", description = """ True, if the user is blacklisted by the current user. """, tags = [  ] },
  { name = "can_be_called", class = "Option<bool>", description = """ True, if the user can be called. """, tags = [  ] },
  { name = "has_private_calls", class = "Option<bool>", description = """ True, if the user can't be called due to their privacy settings. """, tags = [  ] },
  { name = "bio", class = "Option<String>", description = """ A short user bio. """, tags = [  ] },
  { name = "share_text", class = "Option<String>", description = """ For bots, the text that is included with the link when users share the bot. """, tags = [  ] },
  { name = "group_in_common_count", class = "Option<i32>", description = """ Number of group chats where both the other user and the current user are a member; 0 for the current user. """, tags = [  ] },
  { name = "bot_info", class = "Option<BotInfo>", description = """ If the user is a bot, information about the bot; may be null. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.UserPrivacySetting]
origin_name = "UserPrivacySetting"
clz_name = "UserPrivacySetting"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes available user privacy settings.  """
has_subclasses = true
sub_classes = [
  { name = "UserPrivacySettingAllowCalls", is_trait = false },
  { name = "UserPrivacySettingAllowChatInvites", is_trait = false },
  { name = "UserPrivacySettingAllowPeerToPeerCalls", is_trait = false },
  { name = "UserPrivacySettingShowStatus", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl UserPrivacySetting {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<UserPrivacySetting> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UserPrivacySetting.supers]]
name = "Object"

[[rtd.UserPrivacySetting.supers]]
name = "RObject"
[[rtd.UserPrivacySetting.supers]]
name = "Debug"







[rtd.RTDUserPrivacySettingType]
clz_name = "RTDUserPrivacySettingType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "UserPrivacySettingAllowCalls", is_trait = false },
  { name = "UserPrivacySettingAllowChatInvites", is_trait = false },
  { name = "UserPrivacySettingAllowPeerToPeerCalls", is_trait = false },
  { name = "UserPrivacySettingShowStatus", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDUserPrivacySettingType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDUserPrivacySettingType)(text.as_ref()) }
}
""",
]




[rtd.UserPrivacySettingShowStatus]
origin_name = "userPrivacySettingShowStatus"
clz_name = "UserPrivacySettingShowStatus"
is_private = false
clz_is_trait = false
clz_description = """ A privacy setting for managing whether the user's online status is visible.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingShowStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingShowStatus.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingShowStatus.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingShowStatus" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingShowStatus """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingShowStatus.supers]]
name = "UserPrivacySetting"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingAllowChatInvites]
origin_name = "userPrivacySettingAllowChatInvites"
clz_name = "UserPrivacySettingAllowChatInvites"
is_private = false
clz_is_trait = false
clz_description = """ A privacy setting for managing whether the user can be invited to chats.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingAllowChatInvites {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingAllowChatInvites.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingAllowChatInvites.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingAllowChatInvites" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingAllowChatInvites """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingAllowChatInvites.supers]]
name = "UserPrivacySetting"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingAllowCalls]
origin_name = "userPrivacySettingAllowCalls"
clz_name = "UserPrivacySettingAllowCalls"
is_private = false
clz_is_trait = false
clz_description = """ A privacy setting for managing whether the user can be called.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingAllowCalls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingAllowCalls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingAllowCalls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingAllowCalls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingAllowCalls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingAllowCalls.supers]]
name = "UserPrivacySetting"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingAllowPeerToPeerCalls]
origin_name = "userPrivacySettingAllowPeerToPeerCalls"
clz_name = "UserPrivacySettingAllowPeerToPeerCalls"
is_private = false
clz_is_trait = false
clz_description = """ A privacy setting for managing whether peer-to-peer connections can be used for calls.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingAllowPeerToPeerCalls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingAllowPeerToPeerCalls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingAllowPeerToPeerCalls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingAllowPeerToPeerCalls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingAllowPeerToPeerCalls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingAllowPeerToPeerCalls.supers]]
name = "UserPrivacySetting"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRule]
origin_name = "UserPrivacySettingRule"
clz_name = "UserPrivacySettingRule"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents a single rule for managing privacy settings.  """
has_subclasses = true
sub_classes = [
  { name = "UserPrivacySettingRuleAllowAll", is_trait = false },
  { name = "UserPrivacySettingRuleAllowContacts", is_trait = false },
  { name = "UserPrivacySettingRuleAllowUsers", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictAll", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictContacts", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictUsers", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl UserPrivacySettingRule {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<UserPrivacySettingRule> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UserPrivacySettingRule.supers]]
name = "Object"

[[rtd.UserPrivacySettingRule.supers]]
name = "RObject"
[[rtd.UserPrivacySettingRule.supers]]
name = "Debug"







[rtd.RTDUserPrivacySettingRuleType]
clz_name = "RTDUserPrivacySettingRuleType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "UserPrivacySettingRuleAllowAll", is_trait = false },
  { name = "UserPrivacySettingRuleAllowContacts", is_trait = false },
  { name = "UserPrivacySettingRuleAllowUsers", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictAll", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictContacts", is_trait = false },
  { name = "UserPrivacySettingRuleRestrictUsers", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDUserPrivacySettingRuleType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDUserPrivacySettingRuleType)(text.as_ref()) }
}
""",
]




[rtd.UserPrivacySettingRuleAllowAll]
origin_name = "userPrivacySettingRuleAllowAll"
clz_name = "UserPrivacySettingRuleAllowAll"
is_private = false
clz_is_trait = false
clz_description = """ A rule to allow all users to do something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleAllowAll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleAllowAll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleAllowAll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleAllowAll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleAllowAll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleAllowAll.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRuleAllowContacts]
origin_name = "userPrivacySettingRuleAllowContacts"
clz_name = "UserPrivacySettingRuleAllowContacts"
is_private = false
clz_is_trait = false
clz_description = """ A rule to allow all of a user's contacts to do something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleAllowContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleAllowContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleAllowContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleAllowContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleAllowContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleAllowContacts.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRuleAllowUsers]
origin_name = "userPrivacySettingRuleAllowUsers"
clz_name = "UserPrivacySettingRuleAllowUsers"
is_private = false
clz_is_trait = false
clz_description = """ A rule to allow certain specified users to do something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ The user identifiers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleAllowUsers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleAllowUsers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleAllowUsers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleAllowUsers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleAllowUsers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleAllowUsers.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRuleRestrictAll]
origin_name = "userPrivacySettingRuleRestrictAll"
clz_name = "UserPrivacySettingRuleRestrictAll"
is_private = false
clz_is_trait = false
clz_description = """ A rule to restrict all users from doing something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleRestrictAll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleRestrictAll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleRestrictAll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleRestrictAll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleRestrictAll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleRestrictAll.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRuleRestrictContacts]
origin_name = "userPrivacySettingRuleRestrictContacts"
clz_name = "UserPrivacySettingRuleRestrictContacts"
is_private = false
clz_is_trait = false
clz_description = """ A rule to restrict all contacts of a user from doing something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleRestrictContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleRestrictContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleRestrictContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleRestrictContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleRestrictContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleRestrictContacts.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRuleRestrictUsers]
origin_name = "userPrivacySettingRuleRestrictUsers"
clz_name = "UserPrivacySettingRuleRestrictUsers"
is_private = false
clz_is_trait = false
clz_description = """ A rule to restrict all specified users from doing something.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ The user identifiers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRuleRestrictUsers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserPrivacySettingRuleRestrictUsers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRuleRestrictUsers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRuleRestrictUsers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRuleRestrictUsers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserPrivacySettingRuleRestrictUsers.supers]]
name = "UserPrivacySettingRule"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserPrivacySettingRules]
origin_name = "userPrivacySettingRules"
clz_name = "UserPrivacySettingRules"
is_private = false
clz_is_trait = false
clz_description = """ A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "rules", class = "Option<Vec<Box<UserPrivacySettingRule>>>", description = """ A list of rules. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserPrivacySettingRules {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UserPrivacySettingRules {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UserPrivacySettingRules.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserPrivacySettingRules.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userPrivacySettingRules" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserPrivacySettingRules """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.UserProfilePhoto]
origin_name = "userProfilePhoto"
clz_name = "UserProfilePhoto"
is_private = false
clz_is_trait = false
clz_description = """ Contains full information about a user profile photo.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i64>", description = """ Unique user profile photo identifier. """, tags = [  ] },
  { name = "added_date", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the photo has been added. """, tags = [  ] },
  { name = "sizes", class = "Option<Vec<PhotoSize>>", description = """ Available variants of the user photo, in different sizes. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserProfilePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserProfilePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserProfilePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userProfilePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserProfilePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.UserProfilePhotos]
origin_name = "userProfilePhotos"
clz_name = "UserProfilePhotos"
is_private = false
clz_is_trait = false
clz_description = """ Contains part of the list of user photos.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Total number of user profile photos. """, tags = [  ] },
  { name = "photos", class = "Option<Vec<UserProfilePhoto>>", description = """ A list of photos. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserProfilePhotos {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserProfilePhotos.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserProfilePhotos.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userProfilePhotos" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserProfilePhotos """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.UserStatus]
origin_name = "UserStatus"
clz_name = "UserStatus"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Describes the last time the user was online.  """
has_subclasses = true
sub_classes = [
  { name = "UserStatusEmpty", is_trait = false },
  { name = "UserStatusLastMonth", is_trait = false },
  { name = "UserStatusLastWeek", is_trait = false },
  { name = "UserStatusOffline", is_trait = false },
  { name = "UserStatusOnline", is_trait = false },
  { name = "UserStatusRecently", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl UserStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<UserStatus> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UserStatus.supers]]
name = "Object"

[[rtd.UserStatus.supers]]
name = "RObject"
[[rtd.UserStatus.supers]]
name = "Debug"







[rtd.RTDUserStatusType]
clz_name = "RTDUserStatusType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "UserStatusEmpty", is_trait = false },
  { name = "UserStatusLastMonth", is_trait = false },
  { name = "UserStatusLastWeek", is_trait = false },
  { name = "UserStatusOffline", is_trait = false },
  { name = "UserStatusOnline", is_trait = false },
  { name = "UserStatusRecently", is_trait = false },
  
]
fields_size = 6
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDUserStatusType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDUserStatusType)(text.as_ref()) }
}
""",
]




[rtd.UserStatusEmpty]
origin_name = "userStatusEmpty"
clz_name = "UserStatusEmpty"
is_private = false
clz_is_trait = false
clz_description = """ The user status was never changed.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusEmpty.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserStatusOnline]
origin_name = "userStatusOnline"
clz_name = "UserStatusOnline"
is_private = false
clz_is_trait = false
clz_description = """ The user is online.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "expires", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user's online status will expire. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusOnline {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusOnline.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusOnline.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusOnline" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusOnline """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusOnline.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserStatusOffline]
origin_name = "userStatusOffline"
clz_name = "UserStatusOffline"
is_private = false
clz_is_trait = false
clz_description = """ The user is offline.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "was_online", class = "Option<i32>", description = """ Point in time (Unix timestamp) when the user was last online. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusOffline {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusOffline.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusOffline.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusOffline" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusOffline """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusOffline.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserStatusRecently]
origin_name = "userStatusRecently"
clz_name = "UserStatusRecently"
is_private = false
clz_is_trait = false
clz_description = """ The user was online recently.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusRecently {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusRecently.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusRecently.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusRecently" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusRecently """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusRecently.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserStatusLastWeek]
origin_name = "userStatusLastWeek"
clz_name = "UserStatusLastWeek"
is_private = false
clz_is_trait = false
clz_description = """ The user is offline, but was online last week.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusLastWeek {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusLastWeek.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusLastWeek.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusLastWeek" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusLastWeek """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusLastWeek.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserStatusLastMonth]
origin_name = "userStatusLastMonth"
clz_name = "UserStatusLastMonth"
is_private = false
clz_is_trait = false
clz_description = """ The user is offline, but was online last month.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserStatusLastMonth {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserStatusLastMonth.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserStatusLastMonth.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userStatusLastMonth" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserStatusLastMonth """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserStatusLastMonth.supers]]
name = "UserStatus"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserType]
origin_name = "UserType"
clz_name = "UserType"
is_private = false
clz_is_trait = true
clz_description = """ This class is an abstract base class. Represents the type of the user. The following types are possible: regular users, deleted users and bots.  """
has_subclasses = true
sub_classes = [
  { name = "UserTypeBot", is_trait = false },
  { name = "UserTypeDeleted", is_trait = false },
  { name = "UserTypeRegular", is_trait = false },
  { name = "UserTypeUnknown", is_trait = false },
  
]
fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = true
has_builder_struct = false # deprecated
trait_tags = [ """ #[typetag::serde(tag = "@struct")] """ ]
dna = "trait"

extra_fns = [

"""
impl UserType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Box<Self>> { from_json!()(json.as_ref()) }
}
""",
"""
impl Clone for Box<UserType> {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UserType.supers]]
name = "Object"

[[rtd.UserType.supers]]
name = "RObject"
[[rtd.UserType.supers]]
name = "Debug"







[rtd.RTDUserTypeType]
clz_name = "RTDUserTypeType"
is_private = false
clz_is_trait = false
has_subclasses = false
fields = [
  { name = "UserTypeBot", is_trait = false },
  { name = "UserTypeDeleted", is_trait = false },
  { name = "UserTypeRegular", is_trait = false },
  { name = "UserTypeUnknown", is_trait = false },
  
]
fields_size = 4
dna = "enum"
derives = [ "Debug", "Clone", "PartialEq", "PartialOrd", "Eq", "Ord", "Hash", "EnumString" ]
extra_fns = [
"""
impl RTDUserTypeType {
  pub fn of<S: AsRef<str>>(text: S) -> Option<Self> { rtd_of!(RTDUserTypeType)(text.as_ref()) }
}
""",
]




[rtd.UserTypeRegular]
origin_name = "userTypeRegular"
clz_name = "UserTypeRegular"
is_private = false
clz_is_trait = false
clz_description = """ A regular user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserTypeRegular {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserTypeRegular.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserTypeRegular.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userTypeRegular" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserTypeRegular """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserTypeRegular.supers]]
name = "UserType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserTypeDeleted]
origin_name = "userTypeDeleted"
clz_name = "UserTypeDeleted"
is_private = false
clz_is_trait = false
clz_description = """ A deleted user or deleted bot. No information on the user besides the user_id is available. It is not possible to perform any active actions on this type of user.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserTypeDeleted {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserTypeDeleted.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserTypeDeleted.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userTypeDeleted" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserTypeDeleted """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserTypeDeleted.supers]]
name = "UserType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserTypeBot]
origin_name = "userTypeBot"
clz_name = "UserTypeBot"
is_private = false
clz_is_trait = false
clz_description = """ A bot (see  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "can_join_groups", class = "Option<bool>", description = """ True, if the bot can be invited to basic group and supergroup chats. """, tags = [  ] },
  { name = "can_read_all_group_messages", class = "Option<bool>", description = """ True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages. """, tags = [  ] },
  { name = "is_inline", class = "Option<bool>", description = """ True, if the bot supports inline queries. """, tags = [  ] },
  { name = "inline_query_placeholder", class = "Option<String>", description = """ Placeholder for inline queries (displayed on the client input field). """, tags = [  ] },
  { name = "need_location", class = "Option<bool>", description = """ True, if the location of the user should be sent with every inline query to this bot. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserTypeBot {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserTypeBot.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserTypeBot.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userTypeBot" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserTypeBot """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserTypeBot.supers]]
name = "UserType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.UserTypeUnknown]
origin_name = "userTypeUnknown"
clz_name = "UserTypeUnknown"
is_private = false
clz_is_trait = false
clz_description = """ No information on the user besides the user_id is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UserTypeUnknown {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UserTypeUnknown.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UserTypeUnknown.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "userTypeUnknown" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UserTypeUnknown """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UserTypeUnknown.supers]]
name = "UserType"
impl_trait_typetag = true
impl_tags = [ "#[typetag::serde]", ]







[rtd.Users]
origin_name = "users"
clz_name = "Users"
is_private = false
clz_is_trait = false
clz_description = """ Represents a list of users.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "total_count", class = "Option<i32>", description = """ Approximate total count of users found. """, tags = [  ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ A list of user identifiers. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Users {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Users.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Users.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "users" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Users """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.ValidatedOrderInfo]
origin_name = "validatedOrderInfo"
clz_name = "ValidatedOrderInfo"
is_private = false
clz_is_trait = false
clz_description = """ Contains a temporary identifier of validated order information, which is stored for one hour. Also contains the available shipping options.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "order_info_id", class = "Option<String>", description = """ Temporary identifier of the order information. """, tags = [  ] },
  { name = "shipping_options", class = "Option<Vec<ShippingOption>>", description = """ Available shipping options. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ValidatedOrderInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ValidatedOrderInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ValidatedOrderInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "validatedOrderInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ValidatedOrderInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Venue]
origin_name = "venue"
clz_name = "Venue"
is_private = false
clz_is_trait = false
clz_description = """ Describes a venue.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "location", class = "Option<Location>", description = """ Venue location; as defined by the sender. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Venue name; as defined by the sender. """, tags = [  ] },
  { name = "address", class = "Option<String>", description = """ Venue address; as defined by the sender. """, tags = [  ] },
  { name = "provider", class = "Option<String>", description = """ Provider of the venue database; as defined by the sender. Currently only "foursquare" needs to be supported. """, tags = [  ] },
  { name = "id", class = "Option<String>", description = """ Identifier of the venue in the provider database; as defined by the sender. """, tags = [  ] },
  { name = "type_", class = "Option<String>", description = """ Type of the venue in the provider database; as defined by the sender. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Venue {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Venue.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Venue.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "venue" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Venue """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Video]
origin_name = "video"
clz_name = "Video"
is_private = false
clz_is_trait = false
clz_description = """ Describes a video file.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the video, in seconds; as defined by the sender. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Video width; as defined by the sender. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Video height; as defined by the sender. """, tags = [  ] },
  { name = "file_name", class = "Option<String>", description = """ Original name of the file; as defined by the sender. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the file; as defined by the sender. """, tags = [  ] },
  { name = "has_stickers", class = "Option<bool>", description = """ True, if stickers were added to the photo. """, tags = [  ] },
  { name = "supports_streaming", class = "Option<bool>", description = """ True, if the video should be tried to be streamed. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Video thumbnail; as defined by the sender; may be null. """, tags = [  ] },
  { name = "video", class = "Option<File>", description = """ File containing the video. """, tags = [  ] },
  
]
fields_size = 10
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Video {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Video.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Video.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "video" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Video """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.VideoNote]
origin_name = "videoNote"
clz_name = "VideoNote"
is_private = false
clz_is_trait = false
clz_description = """ Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the video, in seconds; as defined by the sender. """, tags = [  ] },
  { name = "length", class = "Option<i32>", description = """ Video width and height; as defined by the sender. """, tags = [  ] },
  { name = "thumbnail", class = "Option<PhotoSize>", description = """ Video thumbnail; as defined by the sender; may be null. """, tags = [  ] },
  { name = "video", class = "Option<File>", description = """ File containing the video. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl VideoNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.VideoNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.VideoNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "videoNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::VideoNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.VoiceNote]
origin_name = "voiceNote"
clz_name = "VoiceNote"
is_private = false
clz_is_trait = false
clz_description = """ Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the voice note, in seconds; as defined by the sender. """, tags = [  ] },
  { name = "waveform", class = "Option<String>", description = """ A waveform representation of the voice note in 5-bit format. """, tags = [  ] },
  { name = "mime_type", class = "Option<String>", description = """ MIME type of the file; as defined by the sender. """, tags = [  ] },
  { name = "voice", class = "Option<File>", description = """ File containing the voice note. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl VoiceNote {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.VoiceNote.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.VoiceNote.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "voiceNote" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::VoiceNote """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Wallpaper]
origin_name = "wallpaper"
clz_name = "Wallpaper"
is_private = false
clz_is_trait = false
clz_description = """ Contains information about a wallpaper.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "id", class = "Option<i32>", description = """ Unique persistent wallpaper identifier. """, tags = [  ] },
  { name = "sizes", class = "Option<Vec<PhotoSize>>", description = """ Available variants of the wallpaper in different sizes. These photos can only be downloaded; they can't be sent in a message. """, tags = [  ] },
  { name = "color", class = "Option<i32>", description = """ Main color of the wallpaper in RGB24 format; should be treated as background color if no photos are specified. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Wallpaper {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Wallpaper.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Wallpaper.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "wallpaper" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Wallpaper """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.Wallpapers]
origin_name = "wallpapers"
clz_name = "Wallpapers"
is_private = false
clz_is_trait = false
clz_description = """ Contains a list of wallpapers.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "wallpapers", class = "Option<Vec<Wallpaper>>", description = """ A list of wallpapers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Wallpapers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Wallpapers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Wallpapers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "wallpapers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Wallpapers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.WebPage]
origin_name = "webPage"
clz_name = "WebPage"
is_private = false
clz_is_trait = false
clz_description = """ Describes a web page preview.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ Original URL of the link. """, tags = [  ] },
  { name = "display_url", class = "Option<String>", description = """ URL to display. """, tags = [  ] },
  { name = "type_", class = "Option<String>", description = """ Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "site_name", class = "Option<String>", description = """ Short name of the site (e.g., Google Docs, App Store). """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the content. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Description of the content. """, tags = [  ] },
  { name = "photo", class = "Option<Photo>", description = """ Image representing the content; may be null. """, tags = [  ] },
  { name = "embed_url", class = "Option<String>", description = """ URL to show in the embedded preview. """, tags = [  ] },
  { name = "embed_type", class = "Option<String>", description = """ MIME type of the embedded preview, (e.g., text/html or video/mp4). """, tags = [  ] },
  { name = "embed_width", class = "Option<i32>", description = """ Width of the embedded preview. """, tags = [  ] },
  { name = "embed_height", class = "Option<i32>", description = """ Height of the embedded preview. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ Duration of the content, in seconds. """, tags = [  ] },
  { name = "author", class = "Option<String>", description = """ Author of the content. """, tags = [  ] },
  { name = "animation", class = "Option<Animation>", description = """ Preview of the content as an animation, if available; may be null. """, tags = [  ] },
  { name = "audio", class = "Option<Audio>", description = """ Preview of the content as an audio file, if available; may be null. """, tags = [  ] },
  { name = "document", class = "Option<Document>", description = """ Preview of the content as a document, if available (currently only available for small PDF files and ZIP archives); may be null. """, tags = [  ] },
  { name = "sticker", class = "Option<Sticker>", description = """ Preview of the content as a sticker for small WEBP files, if available; may be null. """, tags = [  ] },
  { name = "video", class = "Option<Video>", description = """ Preview of the content as a video, if available; may be null. """, tags = [  ] },
  { name = "video_note", class = "Option<VideoNote>", description = """ Preview of the content as a video note, if available; may be null. """, tags = [  ] },
  { name = "voice_note", class = "Option<VoiceNote>", description = """ Preview of the content as a voice note, if available; may be null. """, tags = [  ] },
  { name = "instant_view_version", class = "Option<i32>", description = """ Version of instant view, available for the web page (currently can be 1 or 2), 0 if none. """, tags = [  ] },
  
]
fields_size = 22
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl WebPage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.WebPage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.WebPage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "webPage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::WebPage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.WebPageInstantView]
origin_name = "webPageInstantView"
clz_name = "WebPageInstantView"
is_private = false
clz_is_trait = false
clz_description = """ Describes an instant view page for a web page.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "page_blocks", class = "Option<Vec<Box<PageBlock>>>", description = """ Content of the web page. """, tags = [  ] },
  { name = "version", class = "Option<i32>", description = """ Version of the instant view, currently can be 1 or 2. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ Instant view URL; may be different from WebPage.url and must be used for the correct anchors handling. """, tags = [  ] },
  { name = "is_rtl", class = "Option<bool>", description = """ True, if the instant view must be shown from right to left. """, tags = [  ] },
  { name = "is_full", class = "Option<bool>", description = """ True, if the instant view contains the full page. A network request might be needed to get the full web page instant view. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl WebPageInstantView {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for WebPageInstantView {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.WebPageInstantView.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.WebPageInstantView.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "webPageInstantView" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::WebPageInstantView """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]









[rtd.AcceptCall]
origin_name = "acceptCall"
clz_name = "AcceptCall"
is_private = false
clz_is_trait = false
clz_description = """ Accepts an incoming call. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call_id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  { name = "protocol", class = "Option<CallProtocol>", description = """ Description of the call protocols supported by the client. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AcceptCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AcceptCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AcceptCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "acceptCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AcceptCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AcceptCall.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AcceptTermsOfService]
origin_name = "acceptTermsOfService"
clz_name = "AcceptTermsOfService"
is_private = false
clz_is_trait = false
clz_description = """ Accepts Telegram terms of services. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "terms_of_service_id", class = "Option<String>", description = """ Terms of service identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AcceptTermsOfService {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AcceptTermsOfService.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AcceptTermsOfService.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "acceptTermsOfService" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AcceptTermsOfService """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AcceptTermsOfService.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddChatMember]
origin_name = "addChatMember"
clz_name = "AddChatMember"
is_private = false
clz_is_trait = false
clz_description = """ Adds a new member to a chat. Members can't be added to private or secret chats. Members will not be added until the chat state has been synchronized with the server. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the user. """, tags = [  ] },
  { name = "forward_limit", class = "Option<i32>", description = """ The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddChatMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddChatMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddChatMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addChatMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddChatMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddChatMember.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddChatMembers]
origin_name = "addChatMembers"
clz_name = "AddChatMembers"
is_private = false
clz_is_trait = false
clz_description = """ Adds multiple new members to a chat. Currently this option is only available for supergroups and channels. This option can't be used to join a chat. Members can't be added to a channel if it has more than 200 members. Members will not be added until the chat state has been synchronized with the server. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ Identifiers of the users to be added to the chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddChatMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddChatMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddChatMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addChatMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddChatMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddChatMembers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddCustomServerLanguagePack]
origin_name = "addCustomServerLanguagePack"
clz_name = "AddCustomServerLanguagePack"
is_private = false
clz_is_trait = false
clz_description = """ Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Identifier of a language pack to be added; may be different from a name that is used in an "https://t.me/setlanguage/" link. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddCustomServerLanguagePack {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddCustomServerLanguagePack.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddCustomServerLanguagePack.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addCustomServerLanguagePack" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddCustomServerLanguagePack """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddCustomServerLanguagePack.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddFavoriteSticker]
origin_name = "addFavoriteSticker"
clz_name = "AddFavoriteSticker"
is_private = false
clz_is_trait = false
clz_description = """ Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker file to add. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddFavoriteSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddFavoriteSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddFavoriteSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddFavoriteSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addFavoriteSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddFavoriteSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddFavoriteSticker.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddLocalMessage]
origin_name = "addLocalMessage"
clz_name = "AddLocalMessage"
is_private = false
clz_is_trait = false
clz_description = """ Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Target chat. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ Identifier of the user who will be shown as the sender of the message; may be 0 for channel posts. """, tags = [  ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ Identifier of the message to reply to or 0. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ Pass true to disable notification for the message. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be added. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddLocalMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddLocalMessage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddLocalMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddLocalMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addLocalMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddLocalMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddLocalMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddLogMessage]
origin_name = "addLogMessage"
clz_name = "AddLogMessage"
is_private = false
clz_is_trait = false
clz_description = """ Adds a message to TDLib internal log. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "verbosity_level", class = "Option<i32>", description = """ Minimum verbosity level needed for the message to be logged, 0-1023. """, tags = [  ] },
  { name = "text", class = "Option<String>", description = """ Text of a message to log. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddLogMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddLogMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddLogMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addLogMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddLogMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddLogMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddNetworkStatistics]
origin_name = "addNetworkStatistics"
clz_name = "AddNetworkStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Adds the specified data to data usage statistics. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "entry", class = "Option<Box<NetworkStatisticsEntry>>", description = """ The network statistics entry with the data to be added to statistics. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddNetworkStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddNetworkStatistics {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddNetworkStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddNetworkStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addNetworkStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddNetworkStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddNetworkStatistics.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddProxy]
origin_name = "addProxy"
clz_name = "AddProxy"
is_private = false
clz_is_trait = false
clz_description = """ Adds a proxy server for network requests. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "server", class = "Option<String>", description = """ Proxy server IP address. """, tags = [  ] },
  { name = "port", class = "Option<i32>", description = """ Proxy server port. """, tags = [  ] },
  { name = "enable", class = "Option<bool>", description = """ True, if the proxy should be enabled. """, tags = [  ] },
  { name = "type_", class = "Option<Box<ProxyType>>", description = """ Proxy type. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddProxy {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddRecentSticker]
origin_name = "addRecentSticker"
clz_name = "AddRecentSticker"
is_private = false
clz_is_trait = false
clz_description = """ Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_attached", class = "Option<bool>", description = """ Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers. """, tags = [  ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker file to add. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddRecentSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddRecentSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddRecentSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddRecentSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addRecentSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddRecentSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddRecentSticker.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddRecentlyFoundChat]
origin_name = "addRecentlyFoundChat"
clz_name = "AddRecentlyFoundChat"
is_private = false
clz_is_trait = false
clz_description = """ Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to add. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddRecentlyFoundChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddRecentlyFoundChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddRecentlyFoundChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addRecentlyFoundChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddRecentlyFoundChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddRecentlyFoundChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddSavedAnimation]
origin_name = "addSavedAnimation"
clz_name = "AddSavedAnimation"
is_private = false
clz_is_trait = false
clz_description = """ Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type "video/mp4" can be added to the list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Box<InputFile>>", description = """ The animation file to be added. Only animations known to the server (i.e. successfully sent via a message) can be added to the list. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddSavedAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AddSavedAnimation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AddSavedAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddSavedAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addSavedAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddSavedAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddSavedAnimation.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AddStickerToSet]
origin_name = "addStickerToSet"
clz_name = "AddStickerToSet"
is_private = false
clz_is_trait = false
clz_description = """ Adds a new sticker to a set; for bots only. Returns the sticker set. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Sticker set owner. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Sticker set name. """, tags = [  ] },
  { name = "sticker", class = "Option<InputSticker>", description = """ Sticker to add to the set. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AddStickerToSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AddStickerToSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AddStickerToSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "addStickerToSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AddStickerToSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AddStickerToSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AnswerCallbackQuery]
origin_name = "answerCallbackQuery"
clz_name = "AnswerCallbackQuery"
is_private = false
clz_is_trait = false
clz_description = """ Sets the result of a callback query; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "callback_query_id", class = "Option<i64>", description = """ Identifier of the callback query. """, tags = [  ] },
  { name = "text", class = "Option<String>", description = """ Text of the answer. """, tags = [  ] },
  { name = "show_alert", class = "Option<bool>", description = """ If true, an alert should be shown to the user instead of a toast notification. """, tags = [  ] },
  { name = "url", class = "Option<String>", description = """ URL to be opened. """, tags = [  ] },
  { name = "cache_time", class = "Option<i32>", description = """ Time during which the result of the query can be cached, in seconds. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AnswerCallbackQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AnswerCallbackQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AnswerCallbackQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "answerCallbackQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AnswerCallbackQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AnswerCallbackQuery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AnswerCustomQuery]
origin_name = "answerCustomQuery"
clz_name = "AnswerCustomQuery"
is_private = false
clz_is_trait = false
clz_description = """ Answers a custom query; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "custom_query_id", class = "Option<i64>", description = """ Identifier of a custom query. """, tags = [  ] },
  { name = "data", class = "Option<String>", description = """ JSON-serialized answer to the query. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AnswerCustomQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AnswerCustomQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AnswerCustomQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "answerCustomQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AnswerCustomQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AnswerCustomQuery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AnswerInlineQuery]
origin_name = "answerInlineQuery"
clz_name = "AnswerInlineQuery"
is_private = false
clz_is_trait = false
clz_description = """ Sets the result of an inline query; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_query_id", class = "Option<i64>", description = """ Identifier of the inline query. """, tags = [  ] },
  { name = "is_personal", class = "Option<bool>", description = """ True, if the result of the query can be cached for the specified user. """, tags = [  ] },
  { name = "results", class = "Option<Vec<Box<InputInlineQueryResult>>>", description = """ The results of the query. """, tags = [  ] },
  { name = "cache_time", class = "Option<i32>", description = """ Allowed time to cache the results of the query, in seconds. """, tags = [  ] },
  { name = "next_offset", class = "Option<String>", description = """ Offset for the next inline query; pass an empty string if there are no more results. """, tags = [  ] },
  { name = "switch_pm_text", class = "Option<String>", description = """ If non-empty, this text should be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter. """, tags = [  ] },
  { name = "switch_pm_parameter", class = "Option<String>", description = """ The parameter for the bot start message. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AnswerInlineQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for AnswerInlineQuery {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.AnswerInlineQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AnswerInlineQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "answerInlineQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AnswerInlineQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AnswerInlineQuery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AnswerPreCheckoutQuery]
origin_name = "answerPreCheckoutQuery"
clz_name = "AnswerPreCheckoutQuery"
is_private = false
clz_is_trait = false
clz_description = """ Sets the result of a pre-checkout query; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "pre_checkout_query_id", class = "Option<i64>", description = """ Identifier of the pre-checkout query. """, tags = [  ] },
  { name = "error_message", class = "Option<String>", description = """ An error message, empty on success. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AnswerPreCheckoutQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AnswerPreCheckoutQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AnswerPreCheckoutQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "answerPreCheckoutQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AnswerPreCheckoutQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AnswerPreCheckoutQuery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.AnswerShippingQuery]
origin_name = "answerShippingQuery"
clz_name = "AnswerShippingQuery"
is_private = false
clz_is_trait = false
clz_description = """ Sets the result of a shipping query; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "shipping_query_id", class = "Option<i64>", description = """ Identifier of the shipping query. """, tags = [  ] },
  { name = "shipping_options", class = "Option<Vec<ShippingOption>>", description = """ Available shipping options. """, tags = [  ] },
  { name = "error_message", class = "Option<String>", description = """ An error message, empty on success. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl AnswerShippingQuery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.AnswerShippingQuery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.AnswerShippingQuery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "answerShippingQuery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::AnswerShippingQuery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.AnswerShippingQuery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.BlockUser]
origin_name = "blockUser"
clz_name = "BlockUser"
is_private = false
clz_is_trait = false
clz_description = """ Adds a user to the blacklist. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl BlockUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.BlockUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.BlockUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "blockUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::BlockUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.BlockUser.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CancelDownloadFile]
origin_name = "cancelDownloadFile"
clz_name = "CancelDownloadFile"
is_private = false
clz_is_trait = false
clz_description = """ Stops the downloading of a file. If a file has already been downloaded, does nothing. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of a file to stop downloading. """, tags = [  ] },
  { name = "only_if_pending", class = "Option<bool>", description = """ Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CancelDownloadFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CancelDownloadFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CancelDownloadFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "cancelDownloadFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CancelDownloadFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CancelDownloadFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CancelUploadFile]
origin_name = "cancelUploadFile"
clz_name = "CancelUploadFile"
is_private = false
clz_is_trait = false
clz_description = """ Stops the uploading of a file. Supported only for files uploaded by using  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file to stop uploading. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CancelUploadFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CancelUploadFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CancelUploadFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "cancelUploadFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CancelUploadFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CancelUploadFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ChangeChatReportSpamState]
origin_name = "changeChatReportSpamState"
clz_name = "ChangeChatReportSpamState"
is_private = false
clz_is_trait = false
clz_description = """ Reports to the server whether a chat is a spam chat or not. Can be used only if ChatReportSpamState.can_report_spam is true. After this request, ChatReportSpamState.can_report_spam becomes false forever. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_spam_chat", class = "Option<bool>", description = """ If true, the chat will be reported as spam; otherwise it will be marked as not spam. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChangeChatReportSpamState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChangeChatReportSpamState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChangeChatReportSpamState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "changeChatReportSpamState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChangeChatReportSpamState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChangeChatReportSpamState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ChangeImportedContacts]
origin_name = "changeImportedContacts"
clz_name = "ChangeImportedContacts"
is_private = false
clz_is_trait = false
clz_description = """ Changes imported contacts using the list of current user contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "contacts", class = "Option<Vec<Contact>>", description = """ The new list of contacts, contact's vCard are ignored and are not imported. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChangeImportedContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChangeImportedContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChangeImportedContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "changeImportedContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChangeImportedContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChangeImportedContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ChangePhoneNumber]
origin_name = "changePhoneNumber"
clz_name = "ChangePhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ Changes the phone number of the user and sends an authentication code to the user's new phone number. On success, returns information about the sent code. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ The new phone number of the user in international format. """, tags = [  ] },
  { name = "allow_flash_call", class = "Option<bool>", description = """ Pass true if the code can be sent via flash call to the specified phone number. """, tags = [  ] },
  { name = "is_current_phone_number", class = "Option<bool>", description = """ Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChangePhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChangePhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChangePhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "changePhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChangePhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChangePhoneNumber.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ChangeStickerSet]
origin_name = "changeStickerSet"
clz_name = "ChangeStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Installs/uninstalls or activates/archives a sticker set. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "set_id", class = "Option<i64>", description = """ Identifier of the sticker set. """, tags = [  ] },
  { name = "is_installed", class = "Option<bool>", description = """ The new value of is_installed. """, tags = [  ] },
  { name = "is_archived", class = "Option<bool>", description = """ The new value of is_archived. A sticker set can't be installed and archived simultaneously. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ChangeStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ChangeStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ChangeStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "changeStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ChangeStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ChangeStickerSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckAuthenticationBotToken]
origin_name = "checkAuthenticationBotToken"
clz_name = "CheckAuthenticationBotToken"
is_private = false
clz_is_trait = false
clz_description = """ Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "token", class = "Option<String>", description = """ The bot token. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckAuthenticationBotToken {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckAuthenticationBotToken.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckAuthenticationBotToken.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkAuthenticationBotToken" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckAuthenticationBotToken """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckAuthenticationBotToken.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckAuthenticationCode]
origin_name = "checkAuthenticationCode"
clz_name = "CheckAuthenticationCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks the authentication code. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ The verification code received via SMS, Telegram message, phone call, or flash call. """, tags = [  ] },
  { name = "first_name", class = "Option<String>", description = """ If the user is not yet registered, the first name of the user; 1-64 characters. You can also pass an empty string for unregistered user there to check verification code validness. In the latter case PHONE_NUMBER_UNOCCUPIED error will be returned for a valid code. """, tags = [  ] },
  { name = "last_name", class = "Option<String>", description = """ If the user is not yet registered; the last name of the user; optional; 0-64 characters. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckAuthenticationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckAuthenticationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckAuthenticationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkAuthenticationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckAuthenticationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckAuthenticationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckAuthenticationPassword]
origin_name = "checkAuthenticationPassword"
clz_name = "CheckAuthenticationPassword"
is_private = false
clz_is_trait = false
clz_description = """ Checks the authentication password for correctness. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ The password to check. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckAuthenticationPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckAuthenticationPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckAuthenticationPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkAuthenticationPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckAuthenticationPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckAuthenticationPassword.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckChangePhoneNumberCode]
origin_name = "checkChangePhoneNumberCode"
clz_name = "CheckChangePhoneNumberCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks the authentication code sent to confirm a new phone number of the user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ Verification code received by SMS, phone call or flash call. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChangePhoneNumberCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChangePhoneNumberCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChangePhoneNumberCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChangePhoneNumberCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChangePhoneNumberCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChangePhoneNumberCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckChatInviteLink]
origin_name = "checkChatInviteLink"
clz_name = "CheckChatInviteLink"
is_private = false
clz_is_trait = false
clz_description = """ Checks the validity of an invite link for a chat and returns information about the corresponding chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invite_link", class = "Option<String>", description = """ Invite link to be checked; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/". """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatInviteLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatInviteLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatInviteLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatInviteLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatInviteLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatInviteLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckChatUsername]
origin_name = "checkChatUsername"
clz_name = "CheckChatUsername"
is_private = false
clz_is_trait = false
clz_description = """ Checks whether a username can be set for a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier; should be identifier of a supergroup chat, or a channel chat, or a private chat with self, or zero if chat is being created. """, tags = [  ] },
  { name = "username", class = "Option<String>", description = """ Username to be checked. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckChatUsername {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckChatUsername.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckChatUsername.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkChatUsername" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckChatUsername """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckChatUsername.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckDatabaseEncryptionKey]
origin_name = "checkDatabaseEncryptionKey"
clz_name = "CheckDatabaseEncryptionKey"
is_private = false
clz_is_trait = false
clz_description = """ Checks the database encryption key for correctness. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "encryption_key", class = "Option<String>", description = """ Encryption key to check or set up. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckDatabaseEncryptionKey {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckDatabaseEncryptionKey.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckDatabaseEncryptionKey.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkDatabaseEncryptionKey" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckDatabaseEncryptionKey """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckDatabaseEncryptionKey.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckEmailAddressVerificationCode]
origin_name = "checkEmailAddressVerificationCode"
clz_name = "CheckEmailAddressVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks the email address verification code for Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ Verification code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckEmailAddressVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckEmailAddressVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckEmailAddressVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkEmailAddressVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckEmailAddressVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckEmailAddressVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckPhoneNumberConfirmationCode]
origin_name = "checkPhoneNumberConfirmationCode"
clz_name = "CheckPhoneNumberConfirmationCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks phone number confirmation code. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ The phone number confirmation code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckPhoneNumberConfirmationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckPhoneNumberConfirmationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckPhoneNumberConfirmationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkPhoneNumberConfirmationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckPhoneNumberConfirmationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckPhoneNumberConfirmationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckPhoneNumberVerificationCode]
origin_name = "checkPhoneNumberVerificationCode"
clz_name = "CheckPhoneNumberVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks the phone number verification code for Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ Verification code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckPhoneNumberVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckPhoneNumberVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckPhoneNumberVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkPhoneNumberVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckPhoneNumberVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckPhoneNumberVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CheckRecoveryEmailAddressCode]
origin_name = "checkRecoveryEmailAddressCode"
clz_name = "CheckRecoveryEmailAddressCode"
is_private = false
clz_is_trait = false
clz_description = """ Checks the 2-step verification recovery email address verification code. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "code", class = "Option<String>", description = """ Verification code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CheckRecoveryEmailAddressCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CheckRecoveryEmailAddressCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CheckRecoveryEmailAddressCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "checkRecoveryEmailAddressCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CheckRecoveryEmailAddressCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CheckRecoveryEmailAddressCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CleanFileName]
origin_name = "cleanFileName"
clz_name = "CleanFileName"
is_private = false
clz_is_trait = false
clz_description = """ Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_name", class = "Option<String>", description = """ File name or path to the file. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CleanFileName {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CleanFileName.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CleanFileName.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "cleanFileName" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CleanFileName """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CleanFileName.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ClearAllDraftMessages]
origin_name = "clearAllDraftMessages"
clz_name = "ClearAllDraftMessages"
is_private = false
clz_is_trait = false
clz_description = """ Clears draft messages in all chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "exclude_secret_chats", class = "Option<bool>", description = """ If true, local draft messages in secret chats will not be cleared. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ClearAllDraftMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ClearAllDraftMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ClearAllDraftMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "clearAllDraftMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ClearAllDraftMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ClearAllDraftMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ClearImportedContacts]
origin_name = "clearImportedContacts"
clz_name = "ClearImportedContacts"
is_private = false
clz_is_trait = false
clz_description = """ Clears all imported contacts, contact list remains unchanged. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ClearImportedContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ClearImportedContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ClearImportedContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "clearImportedContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ClearImportedContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ClearImportedContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ClearRecentStickers]
origin_name = "clearRecentStickers"
clz_name = "ClearRecentStickers"
is_private = false
clz_is_trait = false
clz_description = """ Clears the list of recently used stickers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_attached", class = "Option<bool>", description = """ Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ClearRecentStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ClearRecentStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ClearRecentStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "clearRecentStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ClearRecentStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ClearRecentStickers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ClearRecentlyFoundChats]
origin_name = "clearRecentlyFoundChats"
clz_name = "ClearRecentlyFoundChats"
is_private = false
clz_is_trait = false
clz_description = """ Clears the list of recently found chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ClearRecentlyFoundChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ClearRecentlyFoundChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ClearRecentlyFoundChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "clearRecentlyFoundChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ClearRecentlyFoundChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ClearRecentlyFoundChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.Close]
origin_name = "close"
clz_name = "Close"
is_private = false
clz_is_trait = false
clz_description = """ Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Close {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Close.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Close.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "close" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Close """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.Close.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CloseChat]
origin_name = "closeChat"
clz_name = "CloseChat"
is_private = false
clz_is_trait = false
clz_description = """ Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CloseChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CloseChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CloseChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "closeChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CloseChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CloseChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CloseSecretChat]
origin_name = "closeSecretChat"
clz_name = "CloseSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Closes a secret chat, effectively transfering its state to  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret_chat_id", class = "Option<i32>", description = """ Secret chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CloseSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CloseSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CloseSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "closeSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CloseSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CloseSecretChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateBasicGroupChat]
origin_name = "createBasicGroupChat"
clz_name = "CreateBasicGroupChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns an existing chat corresponding to a known basic group. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Basic group identifier. """, tags = [  ] },
  { name = "force", class = "Option<bool>", description = """ If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateBasicGroupChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateBasicGroupChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateBasicGroupChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createBasicGroupChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateBasicGroupChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateBasicGroupChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateCall]
origin_name = "createCall"
clz_name = "CreateCall"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new call. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the user to be called. """, tags = [  ] },
  { name = "protocol", class = "Option<CallProtocol>", description = """ Description of the call protocols supported by the client. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateCall.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateNewBasicGroupChat]
origin_name = "createNewBasicGroupChat"
clz_name = "CreateNewBasicGroupChat"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new basic group and sends a corresponding  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ Identifiers of users to be added to the basic group. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Title of the new basic group; 1-128 characters. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateNewBasicGroupChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateNewBasicGroupChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateNewBasicGroupChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createNewBasicGroupChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateNewBasicGroupChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateNewBasicGroupChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateNewSecretChat]
origin_name = "createNewSecretChat"
clz_name = "CreateNewSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new secret chat. Returns the newly created chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Identifier of the target user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateNewSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateNewSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateNewSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createNewSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateNewSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateNewSecretChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateNewStickerSet]
origin_name = "createNewStickerSet"
clz_name = "CreateNewStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new sticker set; for bots only. Returns the newly created sticker set. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Sticker set owner. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ Sticker set title; 1-64 characters. """, tags = [  ] },
  { name = "name", class = "Option<String>", description = """ Sticker set name. Can contain only English letters, digits and underscores. Must end with "by<bot username>" (<bot_username> is case insensitive); 1-64 characters. """, tags = [  ] },
  { name = "is_masks", class = "Option<bool>", description = """ True, if stickers are masks. """, tags = [  ] },
  { name = "stickers", class = "Option<Vec<InputSticker>>", description = """ List of stickers to be added to the set. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateNewStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateNewStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateNewStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createNewStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateNewStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateNewStickerSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateNewSupergroupChat]
origin_name = "createNewSupergroupChat"
clz_name = "CreateNewSupergroupChat"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new supergroup or channel and sends a corresponding  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "title", class = "Option<String>", description = """ Title of the new chat; 1-128 characters. """, tags = [  ] },
  { name = "is_channel", class = "Option<bool>", description = """ True, if a channel chat should be created. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ Chat description; 0-255 characters. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateNewSupergroupChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateNewSupergroupChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateNewSupergroupChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createNewSupergroupChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateNewSupergroupChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateNewSupergroupChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreatePrivateChat]
origin_name = "createPrivateChat"
clz_name = "CreatePrivateChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns an existing chat corresponding to a given user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "force", class = "Option<bool>", description = """ If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreatePrivateChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreatePrivateChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreatePrivateChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createPrivateChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreatePrivateChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreatePrivateChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateSecretChat]
origin_name = "createSecretChat"
clz_name = "CreateSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns an existing chat corresponding to a known secret chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret_chat_id", class = "Option<i32>", description = """ Secret chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateSecretChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateSupergroupChat]
origin_name = "createSupergroupChat"
clz_name = "CreateSupergroupChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns an existing chat corresponding to a known supergroup or channel. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Supergroup or channel identifier. """, tags = [  ] },
  { name = "force", class = "Option<bool>", description = """ If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateSupergroupChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateSupergroupChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateSupergroupChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createSupergroupChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateSupergroupChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateSupergroupChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.CreateTemporaryPassword]
origin_name = "createTemporaryPassword"
clz_name = "CreateTemporaryPassword"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new temporary password for processing payments. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ Persistent user password. """, tags = [  ] },
  { name = "valid_for", class = "Option<i32>", description = """ Time during which the temporary password will be valid, in seconds; should be between 60 and 86400. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl CreateTemporaryPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.CreateTemporaryPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.CreateTemporaryPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "createTemporaryPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::CreateTemporaryPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.CreateTemporaryPassword.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteAccount]
origin_name = "deleteAccount"
clz_name = "DeleteAccount"
is_private = false
clz_is_trait = false
clz_description = """ Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "reason", class = "Option<String>", description = """ The reason why the account was deleted; optional. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteAccount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteAccount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteAccount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteAccount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteAccount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteAccount.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteChatHistory]
origin_name = "deleteChatHistory"
clz_name = "DeleteChatHistory"
is_private = false
clz_is_trait = false
clz_description = """ Deletes all messages in the chat. Use Chat.can_be_deleted_only_for_self and Chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "remove_from_chat_list", class = "Option<bool>", description = """ Pass true if the chat should be removed from the chat list. """, tags = [  ] },
  { name = "revoke", class = "Option<bool>", description = """ Pass true to try to delete chat history for all users. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteChatHistory {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteChatHistory.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteChatHistory.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteChatHistory" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteChatHistory """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteChatHistory.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteChatMessagesFromUser]
origin_name = "deleteChatMessagesFromUser"
clz_name = "DeleteChatMessagesFromUser"
is_private = false
clz_is_trait = false
clz_description = """ Deletes all messages sent by the specified user to a chat. Supported only in supergroups; requires can_delete_messages administrator privileges. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteChatMessagesFromUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteChatMessagesFromUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteChatMessagesFromUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteChatMessagesFromUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteChatMessagesFromUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteChatMessagesFromUser.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteChatReplyMarkup]
origin_name = "deleteChatReplyMarkup"
clz_name = "DeleteChatReplyMarkup"
is_private = false
clz_is_trait = false
clz_description = """ Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a ForceReply reply markup has been used. UpdateChatReplyMarkup will be sent if the reply markup will be changed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ The message identifier of the used keyboard. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteChatReplyMarkup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteChatReplyMarkup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteChatReplyMarkup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteChatReplyMarkup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteChatReplyMarkup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteChatReplyMarkup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteFile]
origin_name = "deleteFile"
clz_name = "DeleteFile"
is_private = false
clz_is_trait = false
clz_description = """ Deletes a file from the TDLib file cache. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file to delete. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteLanguagePack]
origin_name = "deleteLanguagePack"
clz_name = "DeleteLanguagePack"
is_private = false
clz_is_trait = false
clz_description = """ Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Identifier of the language pack to delete. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteLanguagePack {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteLanguagePack.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteLanguagePack.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteLanguagePack" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteLanguagePack """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteLanguagePack.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteMessages]
origin_name = "deleteMessages"
clz_name = "DeleteMessages"
is_private = false
clz_is_trait = false
clz_description = """ Deletes messages. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of the messages to be deleted. """, tags = [  ] },
  { name = "revoke", class = "Option<bool>", description = """ Pass true to try to delete messages for all chat members. Always true for supergroups, channels and secret chats. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeletePassportElement]
origin_name = "deletePassportElement"
clz_name = "DeletePassportElement"
is_private = false
clz_is_trait = false
clz_description = """ Deletes a Telegram Passport element. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Element type. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeletePassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for DeletePassportElement {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.DeletePassportElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeletePassportElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deletePassportElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeletePassportElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeletePassportElement.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteProfilePhoto]
origin_name = "deleteProfilePhoto"
clz_name = "DeleteProfilePhoto"
is_private = false
clz_is_trait = false
clz_description = """ Deletes a profile photo. If something changes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "profile_photo_id", class = "Option<i64>", description = """ Identifier of the profile photo to delete. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteProfilePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteProfilePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteProfilePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteProfilePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteProfilePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteProfilePhoto.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteSavedCredentials]
origin_name = "deleteSavedCredentials"
clz_name = "DeleteSavedCredentials"
is_private = false
clz_is_trait = false
clz_description = """ Deletes saved credentials for all payment provider bots. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteSavedCredentials {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteSavedCredentials.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteSavedCredentials.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteSavedCredentials" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteSavedCredentials """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteSavedCredentials.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteSavedOrderInfo]
origin_name = "deleteSavedOrderInfo"
clz_name = "DeleteSavedOrderInfo"
is_private = false
clz_is_trait = false
clz_description = """ Deletes saved order info. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteSavedOrderInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteSavedOrderInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteSavedOrderInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteSavedOrderInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteSavedOrderInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteSavedOrderInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DeleteSupergroup]
origin_name = "deleteSupergroup"
clz_name = "DeleteSupergroup"
is_private = false
clz_is_trait = false
clz_description = """ Deletes a supergroup or channel along with all messages in the corresponding chat. This will release the supergroup or channel username and remove all members; requires creator privileges in the supergroup or channel. Chats with more than 1000 members can't be deleted using this method. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DeleteSupergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DeleteSupergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DeleteSupergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "deleteSupergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DeleteSupergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DeleteSupergroup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.Destroy]
origin_name = "destroy"
clz_name = "Destroy"
is_private = false
clz_is_trait = false
clz_description = """ Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl Destroy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.Destroy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.Destroy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "destroy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::Destroy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.Destroy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DisableProxy]
origin_name = "disableProxy"
clz_name = "DisableProxy"
is_private = false
clz_is_trait = false
clz_description = """ Disables the currently enabled proxy. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DisableProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DisableProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DisableProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "disableProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DisableProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DisableProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DiscardCall]
origin_name = "discardCall"
clz_name = "DiscardCall"
is_private = false
clz_is_trait = false
clz_description = """ Discards a call. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call_id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  { name = "is_disconnected", class = "Option<bool>", description = """ True, if the user was disconnected. """, tags = [  ] },
  { name = "duration", class = "Option<i32>", description = """ The call duration, in seconds. """, tags = [  ] },
  { name = "connection_id", class = "Option<i64>", description = """ Identifier of the connection used during the call. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DiscardCall {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DiscardCall.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DiscardCall.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "discardCall" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DiscardCall """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DiscardCall.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DisconnectAllWebsites]
origin_name = "disconnectAllWebsites"
clz_name = "DisconnectAllWebsites"
is_private = false
clz_is_trait = false
clz_description = """ Disconnects all websites from the current user's Telegram account. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DisconnectAllWebsites {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DisconnectAllWebsites.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DisconnectAllWebsites.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "disconnectAllWebsites" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DisconnectAllWebsites """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DisconnectAllWebsites.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DisconnectWebsite]
origin_name = "disconnectWebsite"
clz_name = "DisconnectWebsite"
is_private = false
clz_is_trait = false
clz_description = """ Disconnects website from the current user's Telegram account. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "website_id", class = "Option<i64>", description = """ Website identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DisconnectWebsite {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DisconnectWebsite.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DisconnectWebsite.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "disconnectWebsite" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DisconnectWebsite """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DisconnectWebsite.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.DownloadFile]
origin_name = "downloadFile"
clz_name = "DownloadFile"
is_private = false
clz_is_trait = false
clz_description = """ Downloads a file from the cloud. Download progress and completion of the download will be notified through  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file to download. """, tags = [  ] },
  { name = "priority", class = "Option<i32>", description = """ Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile was called will be downloaded first. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ The starting position from which the file should be downloaded. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Number of bytes which should be downloaded starting from the "offset" position before the download will be automatically cancelled; use 0 to download without a limit. """, tags = [  ] },
  { name = "synchronous", class = "Option<bool>", description = """ If false, this request returns file state just after the download has been started. If true, this request returns file state only after the download has succeeded, has failed, has been cancelled or a new downloadFile request with different offset/limit parameters was sent. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl DownloadFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.DownloadFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.DownloadFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "downloadFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::DownloadFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.DownloadFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditCustomLanguagePackInfo]
origin_name = "editCustomLanguagePackInfo"
clz_name = "EditCustomLanguagePackInfo"
is_private = false
clz_is_trait = false
clz_description = """ Edits information about a custom local language pack in the current localization target. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "info", class = "Option<LanguagePackInfo>", description = """ New information about the custom local language pack. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditCustomLanguagePackInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.EditCustomLanguagePackInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditCustomLanguagePackInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editCustomLanguagePackInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditCustomLanguagePackInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditCustomLanguagePackInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditInlineMessageCaption]
origin_name = "editInlineMessageCaption"
clz_name = "EditInlineMessageCaption"
is_private = false
clz_is_trait = false
clz_description = """ Edits the caption of an inline message sent via a bot; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ New message content caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditInlineMessageCaption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditInlineMessageCaption {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditInlineMessageCaption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditInlineMessageCaption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editInlineMessageCaption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditInlineMessageCaption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditInlineMessageCaption.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditInlineMessageLiveLocation]
origin_name = "editInlineMessageLiveLocation"
clz_name = "EditInlineMessageLiveLocation"
is_private = false
clz_is_trait = false
clz_description = """ Edits the content of a live location in an inline message sent via a bot; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup. """, tags = [  ] },
  { name = "location", class = "Option<Location>", description = """ New location content of the message; may be null. Pass null to stop sharing the live location. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditInlineMessageLiveLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditInlineMessageLiveLocation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditInlineMessageLiveLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditInlineMessageLiveLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editInlineMessageLiveLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditInlineMessageLiveLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditInlineMessageLiveLocation.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditInlineMessageMedia]
origin_name = "editInlineMessageMedia"
clz_name = "EditInlineMessageMedia"
is_private = false
clz_is_trait = false
clz_description = """ Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditInlineMessageMedia {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditInlineMessageMedia {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditInlineMessageMedia.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditInlineMessageMedia.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editInlineMessageMedia" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditInlineMessageMedia """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditInlineMessageMedia.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditInlineMessageReplyMarkup]
origin_name = "editInlineMessageReplyMarkup"
clz_name = "EditInlineMessageReplyMarkup"
is_private = false
clz_is_trait = false
clz_description = """ Edits the reply markup of an inline message sent via a bot; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditInlineMessageReplyMarkup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditInlineMessageReplyMarkup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditInlineMessageReplyMarkup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditInlineMessageReplyMarkup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editInlineMessageReplyMarkup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditInlineMessageReplyMarkup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditInlineMessageReplyMarkup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditInlineMessageText]
origin_name = "editInlineMessageText"
clz_name = "EditInlineMessageText"
is_private = false
clz_is_trait = false
clz_description = """ Edits the text of an inline text or game message sent via a bot; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ New text content of the message. Should be of type InputMessageText. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditInlineMessageText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditInlineMessageText {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditInlineMessageText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditInlineMessageText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editInlineMessageText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditInlineMessageText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditInlineMessageText.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditMessageCaption]
origin_name = "editMessageCaption"
clz_name = "EditMessageCaption"
is_private = false
clz_is_trait = false
clz_description = """ Edits the message content caption. Returns the edited message after the edit is completed on the server side. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  { name = "caption", class = "Option<FormattedText>", description = """ New message content caption; 0-GetOption("message_caption_length_max") characters. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditMessageCaption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditMessageCaption {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditMessageCaption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditMessageCaption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editMessageCaption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditMessageCaption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditMessageCaption.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditMessageLiveLocation]
origin_name = "editMessageLiveLocation"
clz_name = "EditMessageLiveLocation"
is_private = false
clz_is_trait = false
clz_description = """ Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  { name = "location", class = "Option<Location>", description = """ New location content of the message; may be null. Pass null to stop sharing the live location. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditMessageLiveLocation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditMessageLiveLocation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditMessageLiveLocation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditMessageLiveLocation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editMessageLiveLocation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditMessageLiveLocation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditMessageLiveLocation.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditMessageMedia]
origin_name = "editMessageMedia"
clz_name = "EditMessageMedia"
is_private = false
clz_is_trait = false
clz_description = """ Edits the content of a message with an animation, an audio, a document, a photo or a video. The media in the message can't be replaced if the message was set to self-destruct. Media can't be replaced by self-destructing media. Media in an album can be edited only to contain a photo or a video. Returns the edited message after the edit is completed on the server side. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ New content of the message. Must be one of the following types: InputMessageAnimation, InputMessageAudio, InputMessageDocument, InputMessagePhoto or InputMessageVideo. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditMessageMedia {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditMessageMedia {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditMessageMedia.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditMessageMedia.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editMessageMedia" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditMessageMedia """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditMessageMedia.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditMessageReplyMarkup]
origin_name = "editMessageReplyMarkup"
clz_name = "EditMessageReplyMarkup"
is_private = false
clz_is_trait = false
clz_description = """ Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditMessageReplyMarkup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditMessageReplyMarkup {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditMessageReplyMarkup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditMessageReplyMarkup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editMessageReplyMarkup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditMessageReplyMarkup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditMessageReplyMarkup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditMessageText]
origin_name = "editMessageText"
clz_name = "EditMessageText"
is_private = false
clz_is_trait = false
clz_description = """ Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ New text content of the message. Should be of type InputMessageText. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditMessageText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditMessageText {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditMessageText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditMessageText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editMessageText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditMessageText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditMessageText.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EditProxy]
origin_name = "editProxy"
clz_name = "EditProxy"
is_private = false
clz_is_trait = false
clz_description = """ Edits an existing proxy server for network requests. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxy_id", class = "Option<i32>", description = """ Proxy identifier. """, tags = [  ] },
  { name = "server", class = "Option<String>", description = """ Proxy server IP address. """, tags = [  ] },
  { name = "port", class = "Option<i32>", description = """ Proxy server port. """, tags = [  ] },
  { name = "enable", class = "Option<bool>", description = """ True, if the proxy should be enabled. """, tags = [  ] },
  { name = "type_", class = "Option<Box<ProxyType>>", description = """ Proxy type. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EditProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for EditProxy {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.EditProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EditProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "editProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EditProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EditProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.EnableProxy]
origin_name = "enableProxy"
clz_name = "EnableProxy"
is_private = false
clz_is_trait = false
clz_description = """ Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxy_id", class = "Option<i32>", description = """ Proxy identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl EnableProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.EnableProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.EnableProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "enableProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::EnableProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.EnableProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.FinishFileGeneration]
origin_name = "finishFileGeneration"
clz_name = "FinishFileGeneration"
is_private = false
clz_is_trait = false
clz_description = """ Finishes the file generation. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "generation_id", class = "Option<i64>", description = """ The identifier of the generation process. """, tags = [  ] },
  { name = "error", class = "Option<Error>", description = """ If set, means that file generation has failed and should be terminated. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl FinishFileGeneration {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.FinishFileGeneration.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.FinishFileGeneration.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "finishFileGeneration" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::FinishFileGeneration """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.FinishFileGeneration.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ForwardMessages]
origin_name = "forwardMessages"
clz_name = "ForwardMessages"
is_private = false
clz_is_trait = false
clz_description = """ Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to which to forward messages. """, tags = [  ] },
  { name = "from_chat_id", class = "Option<i64>", description = """ Identifier of the chat from which to forward messages. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of the messages to forward. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ Pass true to disable notification for the message, doesn't work if messages are forwarded to a secret chat. """, tags = [  ] },
  { name = "from_background", class = "Option<bool>", description = """ Pass true if the message is sent from the background. """, tags = [  ] },
  { name = "as_album", class = "Option<bool>", description = """ True, if the messages should be grouped into an album after forwarding. For this to work, no more than 10 messages may be forwarded, and all of them must be photo or video messages. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ForwardMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ForwardMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ForwardMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "forwardMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ForwardMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ForwardMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GenerateChatInviteLink]
origin_name = "generateChatInviteLink"
clz_name = "GenerateChatInviteLink"
is_private = false
clz_is_trait = false
clz_description = """ Generates a new invite link for a chat; the previously generated link is revoked. Available for basic groups, supergroups, and channels. In basic groups this can be called only by the group's creator; in supergroups and channels this requires appropriate administrator rights. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GenerateChatInviteLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GenerateChatInviteLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GenerateChatInviteLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "generateChatInviteLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GenerateChatInviteLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GenerateChatInviteLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetAccountTtl]
origin_name = "getAccountTtl"
clz_name = "GetAccountTtl"
is_private = false
clz_is_trait = false
clz_description = """ Returns the period of inactivity after which the account of the current user will automatically be deleted. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetAccountTtl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetAccountTtl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetAccountTtl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getAccountTtl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetAccountTtl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetAccountTtl.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetActiveLiveLocationMessages]
origin_name = "getActiveLiveLocationMessages"
clz_name = "GetActiveLiveLocationMessages"
is_private = false
clz_is_trait = false
clz_description = """ Returns all active live locations that should be updated by the client. The list is persistent across application restarts only if the message database is used. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetActiveLiveLocationMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetActiveLiveLocationMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetActiveLiveLocationMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getActiveLiveLocationMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetActiveLiveLocationMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetActiveLiveLocationMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetActiveSessions]
origin_name = "getActiveSessions"
clz_name = "GetActiveSessions"
is_private = false
clz_is_trait = false
clz_description = """ Returns all active sessions of the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetActiveSessions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetActiveSessions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetActiveSessions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getActiveSessions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetActiveSessions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetActiveSessions.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetAllPassportElements]
origin_name = "getAllPassportElements"
clz_name = "GetAllPassportElements"
is_private = false
clz_is_trait = false
clz_description = """ Returns all available Telegram Passport elements. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ Password of the current user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetAllPassportElements {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetAllPassportElements.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetAllPassportElements.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getAllPassportElements" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetAllPassportElements """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetAllPassportElements.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetApplicationConfig]
origin_name = "getApplicationConfig"
clz_name = "GetApplicationConfig"
is_private = false
clz_is_trait = false
clz_description = """ Returns application config, provided by the server. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetApplicationConfig {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetApplicationConfig.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetApplicationConfig.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getApplicationConfig" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetApplicationConfig """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetApplicationConfig.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetArchivedStickerSets]
origin_name = "getArchivedStickerSets"
clz_name = "GetArchivedStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of archived sticker sets. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_masks", class = "Option<bool>", description = """ Pass true to return mask stickers sets; pass false to return ordinary sticker sets. """, tags = [  ] },
  { name = "offset_sticker_set_id", class = "Option<i64>", description = """ Identifier of the sticker set from which to return the result. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of sticker sets to return. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetArchivedStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetArchivedStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetArchivedStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getArchivedStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetArchivedStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetArchivedStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetAttachedStickerSets]
origin_name = "getAttachedStickerSets"
clz_name = "GetAttachedStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of sticker sets attached to a file. Currently only photos and videos can have attached sticker sets. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ File identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetAttachedStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetAttachedStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetAttachedStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getAttachedStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetAttachedStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetAttachedStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetAuthorizationState]
origin_name = "getAuthorizationState"
clz_name = "GetAuthorizationState"
is_private = false
clz_is_trait = false
clz_description = """ Returns the current authorization state; this is an offline request. For informational purposes only. Use  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetAuthorizationState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetAuthorizationState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetAuthorizationState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getAuthorizationState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetAuthorizationState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetAuthorizationState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetBasicGroup]
origin_name = "getBasicGroup"
clz_name = "GetBasicGroup"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Basic group identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetBasicGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetBasicGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetBasicGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getBasicGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetBasicGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetBasicGroup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetBasicGroupFullInfo]
origin_name = "getBasicGroupFullInfo"
clz_name = "GetBasicGroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns full information about a basic group by its identifier. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Basic group identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetBasicGroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetBasicGroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetBasicGroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getBasicGroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetBasicGroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetBasicGroupFullInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetBlockedUsers]
origin_name = "getBlockedUsers"
clz_name = "GetBlockedUsers"
is_private = false
clz_is_trait = false
clz_description = """ Returns users that were blocked by the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "offset", class = "Option<i32>", description = """ Number of users to skip in the result; must be non-negative. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of users to return; up to 100. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetBlockedUsers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetBlockedUsers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetBlockedUsers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getBlockedUsers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetBlockedUsers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetBlockedUsers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetCallbackQueryAnswer]
origin_name = "getCallbackQueryAnswer"
clz_name = "GetCallbackQueryAnswer"
is_private = false
clz_is_trait = false
clz_description = """ Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat with the message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message from which the query originated. """, tags = [  ] },
  { name = "payload", class = "Option<Box<CallbackQueryPayload>>", description = """ Query payload. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetCallbackQueryAnswer {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetCallbackQueryAnswer {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetCallbackQueryAnswer.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetCallbackQueryAnswer.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getCallbackQueryAnswer" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetCallbackQueryAnswer """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetCallbackQueryAnswer.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChat]
origin_name = "getChat"
clz_name = "GetChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a chat by its identifier, this is an offline request if the current user is not a bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatAdministrators]
origin_name = "getChatAdministrators"
clz_name = "GetChatAdministrators"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of users who are administrators of the chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatAdministrators {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatAdministrators.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatAdministrators.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatAdministrators" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatAdministrators """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatAdministrators.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatEventLog]
origin_name = "getChatEventLog"
clz_name = "GetChatEventLog"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only in supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i. e., in order of decreasing event_id). """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Search query by which to filter events. """, tags = [  ] },
  { name = "from_event_id", class = "Option<i64>", description = """ Identifier of an event from which to return results. Use 0 to get results from the latest events. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of events to return; up to 100. """, tags = [  ] },
  { name = "filters", class = "Option<ChatEventLogFilters>", description = """ The types of events to return. By default, all types will be returned. """, tags = [  ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ User identifiers by which to filter events. By default, events relating to all users will be returned. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatEventLog {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatEventLog.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatEventLog.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatEventLog" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatEventLog """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatEventLog.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatHistory]
origin_name = "getChatHistory"
clz_name = "GetChatHistory"
is_private = false
clz_is_trait = false
clz_description = """ Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id). For optimal performance the number of returned messages is chosen by the library. This is an offline request if only_local is true. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "from_message_id", class = "Option<i64>", description = """ Identifier of the message starting from which history must be fetched; use 0 to get results from the last message. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater or equal to -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached. """, tags = [  ] },
  { name = "only_local", class = "Option<bool>", description = """ If true, returns only messages that are available locally without sending network requests. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatHistory {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatHistory.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatHistory.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatHistory" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatHistory """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatHistory.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatMember]
origin_name = "getChatMember"
clz_name = "GetChatMember"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a single member of a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatMember {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatMember.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatMember.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatMember" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatMember """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatMember.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatMessageByDate]
origin_name = "getChatMessageByDate"
clz_name = "GetChatMessageByDate"
is_private = false
clz_is_trait = false
clz_description = """ Returns the last message sent in a chat no later than the specified date. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "date", class = "Option<i32>", description = """ Point in time (Unix timestamp) relative to which to search for messages. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatMessageByDate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatMessageByDate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatMessageByDate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatMessageByDate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatMessageByDate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatMessageByDate.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatMessageCount]
origin_name = "getChatMessageCount"
clz_name = "GetChatMessageCount"
is_private = false
clz_is_trait = false
clz_description = """ Returns approximate number of messages of the specified type in the chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat in which to count messages. """, tags = [  ] },
  { name = "filter", class = "Option<Box<SearchMessagesFilter>>", description = """ Filter for message content; searchMessagesFilterEmpty is unsupported in this function. """, tags = [  ] },
  { name = "return_local", class = "Option<bool>", description = """ If true, returns count that is available locally without sending network requests, returning -1 if the number of messages is unknown. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatMessageCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetChatMessageCount {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetChatMessageCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatMessageCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatMessageCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatMessageCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatMessageCount.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatNotificationSettingsExceptions]
origin_name = "getChatNotificationSettingsExceptions"
clz_name = "GetChatNotificationSettingsExceptions"
is_private = false
clz_is_trait = false
clz_description = """ Returns list of chats with non-default notification settings. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "scope", class = "Option<Box<NotificationSettingsScope>>", description = """ If specified, only chats from the specified scope will be returned. """, tags = [  ] },
  { name = "compare_sound", class = "Option<bool>", description = """ If true, also chats with non-default sound will be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatNotificationSettingsExceptions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetChatNotificationSettingsExceptions {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetChatNotificationSettingsExceptions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatNotificationSettingsExceptions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatNotificationSettingsExceptions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatNotificationSettingsExceptions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatNotificationSettingsExceptions.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatPinnedMessage]
origin_name = "getChatPinnedMessage"
clz_name = "GetChatPinnedMessage"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a pinned chat message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat the message belongs to. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatPinnedMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatPinnedMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatPinnedMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatPinnedMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatPinnedMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatPinnedMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatReportSpamState]
origin_name = "getChatReportSpamState"
clz_name = "GetChatReportSpamState"
is_private = false
clz_is_trait = false
clz_description = """ Returns information on whether the current chat can be reported as spam. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatReportSpamState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatReportSpamState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatReportSpamState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatReportSpamState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatReportSpamState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatReportSpamState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChatStatisticsUrl]
origin_name = "getChatStatisticsUrl"
clz_name = "GetChatStatisticsUrl"
is_private = false
clz_is_trait = false
clz_description = """ Returns URL with the chat statistics. Currently this method can be used only for channels. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "parameters", class = "Option<String>", description = """ Parameters from "tg://statsrefresh?params=******" link. """, tags = [  ] },
  { name = "is_dark", class = "Option<bool>", description = """ Pass true if a URL with the dark theme must be returned. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChatStatisticsUrl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChatStatisticsUrl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChatStatisticsUrl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChatStatisticsUrl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChatStatisticsUrl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChatStatisticsUrl.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetChats]
origin_name = "getChats"
clz_name = "GetChats"
is_private = false
clz_is_trait = false
clz_description = """ Returns an ordered list of chats. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to a biggest signed 64-bit number 9223372036854775807 == 2^63 - 1). For optimal performance the number of returned chats is chosen by the library. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "offset_order", class = "Option<i64>", description = """ Chat order to return chats from. """, tags = [  ] },
  { name = "offset_chat_id", class = "Option<i64>", description = """ Chat identifier to return chats from. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of chats to be returned. It is possible that fewer chats than the limit are returned even if the end of the list is not reached. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetConnectedWebsites]
origin_name = "getConnectedWebsites"
clz_name = "GetConnectedWebsites"
is_private = false
clz_is_trait = false
clz_description = """ Returns all website where the current user used Telegram to log in. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetConnectedWebsites {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetConnectedWebsites.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetConnectedWebsites.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getConnectedWebsites" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetConnectedWebsites """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetConnectedWebsites.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetContacts]
origin_name = "getContacts"
clz_name = "GetContacts"
is_private = false
clz_is_trait = false
clz_description = """ Returns all user contacts. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetCountryCode]
origin_name = "getCountryCode"
clz_name = "GetCountryCode"
is_private = false
clz_is_trait = false
clz_description = """ Uses current user IP to found his country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetCountryCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetCountryCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetCountryCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getCountryCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetCountryCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetCountryCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetCreatedPublicChats]
origin_name = "getCreatedPublicChats"
clz_name = "GetCreatedPublicChats"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of public chats created by the user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetCreatedPublicChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetCreatedPublicChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetCreatedPublicChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getCreatedPublicChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetCreatedPublicChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetCreatedPublicChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetCurrentState]
origin_name = "getCurrentState"
clz_name = "GetCurrentState"
is_private = false
clz_is_trait = false
clz_description = """ Returns all updates needed to restore current TDLib state, i.e. all actual UpdateAuthorizationState/UpdateUser/UpdateNewChat and others. This is especially usefull if TDLib is run in a separate process. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetCurrentState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetCurrentState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetCurrentState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getCurrentState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetCurrentState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetCurrentState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetDatabaseStatistics]
origin_name = "getDatabaseStatistics"
clz_name = "GetDatabaseStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Returns database statistics. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetDatabaseStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetDatabaseStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetDatabaseStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getDatabaseStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetDatabaseStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetDatabaseStatistics.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetDeepLinkInfo]
origin_name = "getDeepLinkInfo"
clz_name = "GetDeepLinkInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a tg:// deep link. Use "tg://need_update_for_some_feature" or "tg:some_unsupported_feature" for testing. Returns a 404 error for unknown links. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "link", class = "Option<String>", description = """ The link. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetDeepLinkInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetDeepLinkInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetDeepLinkInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getDeepLinkInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetDeepLinkInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetDeepLinkInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetFavoriteStickers]
origin_name = "getFavoriteStickers"
clz_name = "GetFavoriteStickers"
is_private = false
clz_is_trait = false
clz_description = """ Returns favorite stickers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetFavoriteStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetFavoriteStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetFavoriteStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getFavoriteStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetFavoriteStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetFavoriteStickers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetFile]
origin_name = "getFile"
clz_name = "GetFile"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a file; this is an offline request. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file to get. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetFileDownloadedPrefixSize]
origin_name = "getFileDownloadedPrefixSize"
clz_name = "GetFileDownloadedPrefixSize"
is_private = false
clz_is_trait = false
clz_description = """ Returns file downloaded prefix size from a given offset. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ Offset from which downloaded prefix size should be calculated. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetFileDownloadedPrefixSize {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetFileDownloadedPrefixSize.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetFileDownloadedPrefixSize.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getFileDownloadedPrefixSize" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetFileDownloadedPrefixSize """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetFileDownloadedPrefixSize.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetFileExtension]
origin_name = "getFileExtension"
clz_name = "GetFileExtension"
is_private = false
clz_is_trait = false
clz_description = """ Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "mime_type", class = "Option<String>", description = """ The MIME type of the file. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetFileExtension {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetFileExtension.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetFileExtension.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getFileExtension" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetFileExtension """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetFileExtension.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetFileMimeType]
origin_name = "getFileMimeType"
clz_name = "GetFileMimeType"
is_private = false
clz_is_trait = false
clz_description = """ Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_name", class = "Option<String>", description = """ The name of the file or path to the file. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetFileMimeType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetFileMimeType.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetFileMimeType.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getFileMimeType" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetFileMimeType """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetFileMimeType.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetGameHighScores]
origin_name = "getGameHighScores"
clz_name = "GetGameHighScores"
is_private = false
clz_is_trait = false
clz_description = """ Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat that contains the message with the game. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetGameHighScores {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetGameHighScores.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetGameHighScores.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getGameHighScores" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetGameHighScores """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetGameHighScores.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetGroupsInCommon]
origin_name = "getGroupsInCommon"
clz_name = "GetGroupsInCommon"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of common group chats with a given user. Chats are sorted by their type and creation date. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "offset_chat_id", class = "Option<i64>", description = """ Chat identifier starting from which to return chats; use 0 for the first request. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of chats to be returned; up to 100. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetGroupsInCommon {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetGroupsInCommon.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetGroupsInCommon.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getGroupsInCommon" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetGroupsInCommon """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetGroupsInCommon.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetImportedContactCount]
origin_name = "getImportedContactCount"
clz_name = "GetImportedContactCount"
is_private = false
clz_is_trait = false
clz_description = """ Returns the total number of imported contacts. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetImportedContactCount {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetImportedContactCount.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetImportedContactCount.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getImportedContactCount" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetImportedContactCount """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetImportedContactCount.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetInlineGameHighScores]
origin_name = "getInlineGameHighScores"
clz_name = "GetInlineGameHighScores"
is_private = false
clz_is_trait = false
clz_description = """ Returns game high scores and some part of the high score table in the range of the specified user; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetInlineGameHighScores {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetInlineGameHighScores.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetInlineGameHighScores.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getInlineGameHighScores" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetInlineGameHighScores """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetInlineGameHighScores.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetInlineQueryResults]
origin_name = "getInlineQueryResults"
clz_name = "GetInlineQueryResults"
is_private = false
clz_is_trait = false
clz_description = """ Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bot_user_id", class = "Option<i32>", description = """ The identifier of the target bot. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat, where the query was sent. """, tags = [  ] },
  { name = "user_location", class = "Option<Location>", description = """ Location of the user, only if needed. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Text of the query. """, tags = [  ] },
  { name = "offset", class = "Option<String>", description = """ Offset of the first entry to return. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetInlineQueryResults {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetInlineQueryResults.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetInlineQueryResults.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getInlineQueryResults" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetInlineQueryResults """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetInlineQueryResults.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetInstalledStickerSets]
origin_name = "getInstalledStickerSets"
clz_name = "GetInstalledStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of installed sticker sets. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_masks", class = "Option<bool>", description = """ Pass true to return mask sticker sets; pass false to return ordinary sticker sets. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetInstalledStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetInstalledStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetInstalledStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getInstalledStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetInstalledStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetInstalledStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetInviteText]
origin_name = "getInviteText"
clz_name = "GetInviteText"
is_private = false
clz_is_trait = false
clz_description = """ Returns the default text for invitation messages to be used as a placeholder when the current user invites friends to Telegram. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetInviteText {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetInviteText.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetInviteText.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getInviteText" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetInviteText """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetInviteText.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLanguagePackInfo]
origin_name = "getLanguagePackInfo"
clz_name = "GetLanguagePackInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Language pack identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLanguagePackInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLanguagePackInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLanguagePackInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLanguagePackInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLanguagePackInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLanguagePackInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLanguagePackString]
origin_name = "getLanguagePackString"
clz_name = "GetLanguagePackString"
is_private = false
clz_is_trait = false
clz_description = """ Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_database_path", class = "Option<String>", description = """ Path to the language pack database in which strings are stored. """, tags = [  ] },
  { name = "localization_target", class = "Option<String>", description = """ Localization target to which the language pack belongs. """, tags = [  ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Language pack identifier. """, tags = [  ] },
  { name = "key", class = "Option<String>", description = """ Language pack key of the string to be returned. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLanguagePackString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLanguagePackString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLanguagePackString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLanguagePackString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLanguagePackString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLanguagePackString.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLanguagePackStrings]
origin_name = "getLanguagePackStrings"
clz_name = "GetLanguagePackStrings"
is_private = false
clz_is_trait = false
clz_description = """ Returns strings from a language pack in the current localization target by their keys. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Language pack identifier of the strings to be returned. """, tags = [  ] },
  { name = "keys", class = "Option<Vec<String>>", description = """ Language pack keys of the strings to be returned; leave empty to request all available strings. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLanguagePackStrings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLanguagePackStrings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLanguagePackStrings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLanguagePackStrings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLanguagePackStrings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLanguagePackStrings.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLocalizationTargetInfo]
origin_name = "getLocalizationTargetInfo"
clz_name = "GetLocalizationTargetInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about the current localization target. This is an offline request if only_local is true. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "only_local", class = "Option<bool>", description = """ If true, returns only locally available information without sending network requests. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLocalizationTargetInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLocalizationTargetInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLocalizationTargetInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLocalizationTargetInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLocalizationTargetInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLocalizationTargetInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLogStream]
origin_name = "getLogStream"
clz_name = "GetLogStream"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about currently used log stream for internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLogStream {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLogStream.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLogStream.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLogStream" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLogStream """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLogStream.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLogTagVerbosityLevel]
origin_name = "getLogTagVerbosityLevel"
clz_name = "GetLogTagVerbosityLevel"
is_private = false
clz_is_trait = false
clz_description = """ Returns current verbosity level for a specified TDLib internal log tag. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "tag", class = "Option<String>", description = """ Logging tag to change verbosity level. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLogTagVerbosityLevel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLogTagVerbosityLevel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLogTagVerbosityLevel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLogTagVerbosityLevel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLogTagVerbosityLevel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLogTagVerbosityLevel.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLogTags]
origin_name = "getLogTags"
clz_name = "GetLogTags"
is_private = false
clz_is_trait = false
clz_description = """ Returns list of available TDLib internal log tags, for example, ["actor", "binlog", "connections", "notifications", "proxy"]. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLogTags {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLogTags.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLogTags.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLogTags" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLogTags """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLogTags.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetLogVerbosityLevel]
origin_name = "getLogVerbosityLevel"
clz_name = "GetLogVerbosityLevel"
is_private = false
clz_is_trait = false
clz_description = """ Returns current verbosity level of the internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetLogVerbosityLevel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetLogVerbosityLevel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetLogVerbosityLevel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getLogVerbosityLevel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetLogVerbosityLevel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetLogVerbosityLevel.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMapThumbnailFile]
origin_name = "getMapThumbnailFile"
clz_name = "GetMapThumbnailFile"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "location", class = "Option<Location>", description = """ Location of the map center. """, tags = [  ] },
  { name = "zoom", class = "Option<i32>", description = """ Map zoom level; 13-20. """, tags = [  ] },
  { name = "width", class = "Option<i32>", description = """ Map width in pixels before applying scale; 16-1024. """, tags = [  ] },
  { name = "height", class = "Option<i32>", description = """ Map height in pixels before applying scale; 16-1024. """, tags = [  ] },
  { name = "scale", class = "Option<i32>", description = """ Map scale; 1-3. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of a chat, in which the thumbnail will be shown. Use 0 if unknown. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMapThumbnailFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMapThumbnailFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMapThumbnailFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMapThumbnailFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMapThumbnailFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMapThumbnailFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMe]
origin_name = "getMe"
clz_name = "GetMe"
is_private = false
clz_is_trait = false
clz_description = """ Returns the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMe {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMe.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMe.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMe" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMe """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMe.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMessage]
origin_name = "getMessage"
clz_name = "GetMessage"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message to get. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMessageLink]
origin_name = "getMessageLink"
clz_name = "GetMessageLink"
is_private = false
clz_is_trait = false
clz_description = """ Returns a private HTTPS link to a message in a chat. Available only for already sent messages in supergroups and channels. The link will work only for members of the chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to which the message belongs. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMessageLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMessageLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMessageLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMessageLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMessageLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMessageLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMessageLocally]
origin_name = "getMessageLocally"
clz_name = "GetMessageLocally"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a message, if it is available locally without sending network request. This is an offline request. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message to get. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMessageLocally {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMessageLocally.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMessageLocally.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMessageLocally" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMessageLocally """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMessageLocally.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetMessages]
origin_name = "getMessages"
clz_name = "GetMessages"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about messages. If a message is not found, returns null on the corresponding position of the result. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat the messages belong to. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of the messages to get. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetNetworkStatistics]
origin_name = "getNetworkStatistics"
clz_name = "GetNetworkStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Returns network data usage statistics. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "only_current", class = "Option<bool>", description = """ If true, returns only data for the current library launch. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetNetworkStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetNetworkStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetNetworkStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getNetworkStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetNetworkStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetNetworkStatistics.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetOption]
origin_name = "getOption"
clz_name = "GetOption"
is_private = false
clz_is_trait = false
clz_description = """ Returns the value of an option by its name. (Check the list of available options on  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ The name of the option. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetOption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetOption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetOption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getOption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetOption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetOption.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPassportAuthorizationForm]
origin_name = "getPassportAuthorizationForm"
clz_name = "GetPassportAuthorizationForm"
is_private = false
clz_is_trait = false
clz_description = """ Returns a Telegram Passport authorization form for sharing data with a service. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bot_user_id", class = "Option<i32>", description = """ User identifier of the service's bot. """, tags = [  ] },
  { name = "scope", class = "Option<String>", description = """ Telegram Passport element types requested by the service. """, tags = [  ] },
  { name = "public_key", class = "Option<String>", description = """ Service's public_key. """, tags = [  ] },
  { name = "nonce", class = "Option<String>", description = """ Authorization form nonce provided by the service. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPassportAuthorizationForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPassportAuthorizationForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPassportAuthorizationForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPassportAuthorizationForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPassportAuthorizationForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPassportAuthorizationForm.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPassportAuthorizationFormAvailableElements]
origin_name = "getPassportAuthorizationFormAvailableElements"
clz_name = "GetPassportAuthorizationFormAvailableElements"
is_private = false
clz_is_trait = false
clz_description = """ Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "autorization_form_id", class = "Option<i32>", description = """ Authorization form identifier. """, tags = [  ] },
  { name = "password", class = "Option<String>", description = """ Password of the current user. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPassportAuthorizationFormAvailableElements {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPassportAuthorizationFormAvailableElements.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPassportAuthorizationFormAvailableElements.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPassportAuthorizationFormAvailableElements" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPassportAuthorizationFormAvailableElements """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPassportAuthorizationFormAvailableElements.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPassportElement]
origin_name = "getPassportElement"
clz_name = "GetPassportElement"
is_private = false
clz_is_trait = false
clz_description = """ Returns one of the available Telegram Passport elements. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<PassportElementType>>", description = """ Telegram Passport element type. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ Password of the current user. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetPassportElement {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetPassportElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPassportElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPassportElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPassportElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPassportElement.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPasswordState]
origin_name = "getPasswordState"
clz_name = "GetPasswordState"
is_private = false
clz_is_trait = false
clz_description = """ Returns the current state of 2-step verification. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPasswordState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPasswordState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPasswordState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPasswordState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPasswordState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPasswordState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPaymentForm]
origin_name = "getPaymentForm"
clz_name = "GetPaymentForm"
is_private = false
clz_is_trait = false
clz_description = """ Returns an invoice payment form. This method should be called when the user presses inlineKeyboardButtonBuy. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the Invoice message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPaymentForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPaymentForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPaymentForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPaymentForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPaymentForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPaymentForm.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPaymentReceipt]
origin_name = "getPaymentReceipt"
clz_name = "GetPaymentReceipt"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a successful payment. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the PaymentSuccessful message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPaymentReceipt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPaymentReceipt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPaymentReceipt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPaymentReceipt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPaymentReceipt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPaymentReceipt.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPreferredCountryLanguage]
origin_name = "getPreferredCountryLanguage"
clz_name = "GetPreferredCountryLanguage"
is_private = false
clz_is_trait = false
clz_description = """ Returns an IETF language tag of the language preferred in the country, which should be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "country_code", class = "Option<String>", description = """ A two-letter ISO 3166-1 alpha-2 country code. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPreferredCountryLanguage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPreferredCountryLanguage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPreferredCountryLanguage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPreferredCountryLanguage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPreferredCountryLanguage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPreferredCountryLanguage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetProxies]
origin_name = "getProxies"
clz_name = "GetProxies"
is_private = false
clz_is_trait = false
clz_description = """ Returns list of proxies that are currently set up. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetProxies {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetProxies.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetProxies.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getProxies" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetProxies """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetProxies.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetProxyLink]
origin_name = "getProxyLink"
clz_name = "GetProxyLink"
is_private = false
clz_is_trait = false
clz_description = """ Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxy_id", class = "Option<i32>", description = """ Proxy identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetProxyLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetProxyLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetProxyLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getProxyLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetProxyLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetProxyLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPublicMessageLink]
origin_name = "getPublicMessageLink"
clz_name = "GetPublicMessageLink"
is_private = false
clz_is_trait = false
clz_description = """ Returns a public HTTPS link to a message. Available only for messages in public supergroups and channels. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to which the message belongs. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "for_album", class = "Option<bool>", description = """ Pass true if a link for a whole media album should be returned. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPublicMessageLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPublicMessageLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPublicMessageLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPublicMessageLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPublicMessageLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPublicMessageLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetPushReceiverId]
origin_name = "getPushReceiverId"
clz_name = "GetPushReceiverId"
is_private = false
clz_is_trait = false
clz_description = """ Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "payload", class = "Option<String>", description = """ JSON-encoded push notification payload. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetPushReceiverId {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetPushReceiverId.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetPushReceiverId.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getPushReceiverId" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetPushReceiverId """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetPushReceiverId.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRecentInlineBots]
origin_name = "getRecentInlineBots"
clz_name = "GetRecentInlineBots"
is_private = false
clz_is_trait = false
clz_description = """ Returns up to 20 recently used inline bots in the order of their last usage. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRecentInlineBots {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetRecentInlineBots.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRecentInlineBots.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRecentInlineBots" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRecentInlineBots """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRecentInlineBots.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRecentStickers]
origin_name = "getRecentStickers"
clz_name = "GetRecentStickers"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of recently used stickers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_attached", class = "Option<bool>", description = """ Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRecentStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetRecentStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRecentStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRecentStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRecentStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRecentStickers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRecentlyVisitedTMeUrls]
origin_name = "getRecentlyVisitedTMeUrls"
clz_name = "GetRecentlyVisitedTMeUrls"
is_private = false
clz_is_trait = false
clz_description = """ Returns t.me URLs recently visited by a newly registered user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "referrer", class = "Option<String>", description = """ Google Play referrer to identify the user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRecentlyVisitedTMeUrls {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetRecentlyVisitedTMeUrls.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRecentlyVisitedTMeUrls.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRecentlyVisitedTMeUrls" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRecentlyVisitedTMeUrls """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRecentlyVisitedTMeUrls.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRecoveryEmailAddress]
origin_name = "getRecoveryEmailAddress"
clz_name = "GetRecoveryEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ The password for the current user. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRecoveryEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetRecoveryEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRecoveryEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRecoveryEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRecoveryEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRecoveryEmailAddress.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRemoteFile]
origin_name = "getRemoteFile"
clz_name = "GetRemoteFile"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "remote_file_id", class = "Option<String>", description = """ Remote identifier of the file to get. """, tags = [  ] },
  { name = "file_type", class = "Option<Box<FileType>>", description = """ File type, if known. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRemoteFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetRemoteFile {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetRemoteFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRemoteFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRemoteFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRemoteFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRemoteFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetRepliedMessage]
origin_name = "getRepliedMessage"
clz_name = "GetRepliedMessage"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a message that is replied by given message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat the message belongs to. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message reply to which get. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetRepliedMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetRepliedMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetRepliedMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getRepliedMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetRepliedMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetRepliedMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSavedAnimations]
origin_name = "getSavedAnimations"
clz_name = "GetSavedAnimations"
is_private = false
clz_is_trait = false
clz_description = """ Returns saved animations. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSavedAnimations {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSavedAnimations.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSavedAnimations.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSavedAnimations" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSavedAnimations """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSavedAnimations.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSavedOrderInfo]
origin_name = "getSavedOrderInfo"
clz_name = "GetSavedOrderInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns saved order info, if any. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSavedOrderInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSavedOrderInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSavedOrderInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSavedOrderInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSavedOrderInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSavedOrderInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetScopeNotificationSettings]
origin_name = "getScopeNotificationSettings"
clz_name = "GetScopeNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Returns the notification settings for chats of a given type. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "scope", class = "Option<Box<NotificationSettingsScope>>", description = """ Types of chats for which to return the notification settings information. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetScopeNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetScopeNotificationSettings {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetScopeNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetScopeNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getScopeNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetScopeNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetScopeNotificationSettings.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSecretChat]
origin_name = "getSecretChat"
clz_name = "GetSecretChat"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a secret chat by its identifier. This is an offline request. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "secret_chat_id", class = "Option<i32>", description = """ Secret chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSecretChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSecretChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSecretChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSecretChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSecretChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSecretChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetStickerEmojis]
origin_name = "getStickerEmojis"
clz_name = "GetStickerEmojis"
is_private = false
clz_is_trait = false
clz_description = """ Returns emoji corresponding to a sticker. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker file identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetStickerEmojis {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetStickerEmojis {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetStickerEmojis.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetStickerEmojis.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getStickerEmojis" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetStickerEmojis """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetStickerEmojis.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetStickerSet]
origin_name = "getStickerSet"
clz_name = "GetStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a sticker set by its identifier. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "set_id", class = "Option<i64>", description = """ Identifier of the sticker set. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetStickerSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetStickers]
origin_name = "getStickers"
clz_name = "GetStickers"
is_private = false
clz_is_trait = false
clz_description = """ Returns stickers from the installed sticker sets that correspond to a given emoji. If the emoji is not empty, favorite and recently used stickers may also be returned. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "emoji", class = "Option<String>", description = """ String representation of emoji. If empty, returns all known installed stickers. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of stickers to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetStickers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetStorageStatistics]
origin_name = "getStorageStatistics"
clz_name = "GetStorageStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Returns storage usage statistics. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_limit", class = "Option<i32>", description = """ Maximum number of chats with the largest storage usage for which separate statistics should be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetStorageStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetStorageStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetStorageStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getStorageStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetStorageStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetStorageStatistics.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetStorageStatisticsFast]
origin_name = "getStorageStatisticsFast"
clz_name = "GetStorageStatisticsFast"
is_private = false
clz_is_trait = false
clz_description = """ Quickly returns approximate storage usage statistics. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetStorageStatisticsFast {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetStorageStatisticsFast.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetStorageStatisticsFast.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getStorageStatisticsFast" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetStorageStatisticsFast """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetStorageStatisticsFast.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSupergroup]
origin_name = "getSupergroup"
clz_name = "GetSupergroup"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a supergroup or channel by its identifier. This is an offline request if the current user is not a bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Supergroup or channel identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSupergroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSupergroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSupergroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSupergroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSupergroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSupergroup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSupergroupFullInfo]
origin_name = "getSupergroupFullInfo"
clz_name = "GetSupergroupFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns full information about a supergroup or channel by its identifier, cached for up to 1 minute. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Supergroup or channel identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSupergroupFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSupergroupFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSupergroupFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSupergroupFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSupergroupFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSupergroupFullInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSupergroupMembers]
origin_name = "getSupergroupMembers"
clz_name = "GetSupergroupMembers"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  { name = "filter", class = "Option<Box<SupergroupMembersFilter>>", description = """ The type of users to return. By default, supergroupMembersRecent. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ Number of users to skip. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of users be returned; up to 200. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSupergroupMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetSupergroupMembers {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetSupergroupMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSupergroupMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSupergroupMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSupergroupMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSupergroupMembers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetSupportUser]
origin_name = "getSupportUser"
clz_name = "GetSupportUser"
is_private = false
clz_is_trait = false
clz_description = """ Returns a user that can be contacted to get support. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetSupportUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetSupportUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetSupportUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getSupportUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetSupportUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetSupportUser.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetTemporaryPasswordState]
origin_name = "getTemporaryPasswordState"
clz_name = "GetTemporaryPasswordState"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about the current temporary password. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetTemporaryPasswordState {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetTemporaryPasswordState.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetTemporaryPasswordState.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getTemporaryPasswordState" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetTemporaryPasswordState """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetTemporaryPasswordState.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetTextEntities]
origin_name = "getTextEntities"
clz_name = "GetTextEntities"
is_private = false
clz_is_trait = false
clz_description = """ Returns all entities (mentions, hashtags, cashtags, bot commands, URLs, and email addresses) contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ The text in which to look for entites. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetTextEntities {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetTextEntities.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetTextEntities.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getTextEntities" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetTextEntities """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetTextEntities.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetTopChats]
origin_name = "getTopChats"
clz_name = "GetTopChats"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of frequently used chats. Supported only if the chat info database is enabled. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "category", class = "Option<Box<TopChatCategory>>", description = """ Category of chats to be returned. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of chats to be returned; up to 30. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetTopChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetTopChats {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetTopChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetTopChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getTopChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetTopChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetTopChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetTrendingStickerSets]
origin_name = "getTrendingStickerSets"
clz_name = "GetTrendingStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Returns a list of trending sticker sets. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetTrendingStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetTrendingStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetTrendingStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getTrendingStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetTrendingStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetTrendingStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetUser]
origin_name = "getUser"
clz_name = "GetUser"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about a user by their identifier. This is an offline request if the current user is not a bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetUser.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetUserFullInfo]
origin_name = "getUserFullInfo"
clz_name = "GetUserFullInfo"
is_private = false
clz_is_trait = false
clz_description = """ Returns full information about a user by their identifier. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetUserFullInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetUserFullInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetUserFullInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getUserFullInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetUserFullInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetUserFullInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetUserPrivacySettingRules]
origin_name = "getUserPrivacySettingRules"
clz_name = "GetUserPrivacySettingRules"
is_private = false
clz_is_trait = false
clz_description = """ Returns the current privacy settings. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "setting", class = "Option<Box<UserPrivacySetting>>", description = """ The privacy setting. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetUserPrivacySettingRules {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for GetUserPrivacySettingRules {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.GetUserPrivacySettingRules.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetUserPrivacySettingRules.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getUserPrivacySettingRules" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetUserPrivacySettingRules """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetUserPrivacySettingRules.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetUserProfilePhotos]
origin_name = "getUserProfilePhotos"
clz_name = "GetUserProfilePhotos"
is_private = false
clz_is_trait = false
clz_description = """ Returns the profile photos of a user. The result of this query may be outdated: some photos might have been deleted already. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ The number of photos to skip; must be non-negative. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of photos to be returned; up to 100. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetUserProfilePhotos {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetUserProfilePhotos.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetUserProfilePhotos.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getUserProfilePhotos" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetUserProfilePhotos """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetUserProfilePhotos.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetWallpapers]
origin_name = "getWallpapers"
clz_name = "GetWallpapers"
is_private = false
clz_is_trait = false
clz_description = """ Returns background wallpapers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetWallpapers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetWallpapers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetWallpapers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getWallpapers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetWallpapers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetWallpapers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetWebPageInstantView]
origin_name = "getWebPageInstantView"
clz_name = "GetWebPageInstantView"
is_private = false
clz_is_trait = false
clz_description = """ Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "url", class = "Option<String>", description = """ The web page URL. """, tags = [  ] },
  { name = "force_full", class = "Option<bool>", description = """ If true, the full instant view for the web page will be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetWebPageInstantView {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetWebPageInstantView.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetWebPageInstantView.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getWebPageInstantView" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetWebPageInstantView """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetWebPageInstantView.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.GetWebPagePreview]
origin_name = "getWebPagePreview"
clz_name = "GetWebPagePreview"
is_private = false
clz_is_trait = false
clz_description = """ Returns a web page preview by the text of the message. Do not call this function too often. Returns a 404 error if the web page has no preview. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<FormattedText>", description = """ Message text with formatting. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl GetWebPagePreview {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.GetWebPagePreview.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.GetWebPagePreview.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "getWebPagePreview" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::GetWebPagePreview """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.GetWebPagePreview.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ImportContacts]
origin_name = "importContacts"
clz_name = "ImportContacts"
is_private = false
clz_is_trait = false
clz_description = """ Adds new contacts or edits existing contacts; contacts' user identifiers are ignored. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "contacts", class = "Option<Vec<Contact>>", description = """ The list of contacts to import or edit, contact's vCard are ignored and are not imported. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ImportContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ImportContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ImportContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "importContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ImportContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ImportContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.JoinChat]
origin_name = "joinChat"
clz_name = "JoinChat"
is_private = false
clz_is_trait = false
clz_description = """ Adds current user as a new member to a chat. Private and secret chats can't be joined using this method. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl JoinChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.JoinChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.JoinChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "joinChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::JoinChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.JoinChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.JoinChatByInviteLink]
origin_name = "joinChatByInviteLink"
clz_name = "JoinChatByInviteLink"
is_private = false
clz_is_trait = false
clz_description = """ Uses an invite link to add the current user to the chat if possible. The new member will not be added until the chat state has been synchronized with the server. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "invite_link", class = "Option<String>", description = """ Invite link to import; should begin with "https://t.me/joinchat/", "https://telegram.me/joinchat/", or "https://telegram.dog/joinchat/". """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl JoinChatByInviteLink {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.JoinChatByInviteLink.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.JoinChatByInviteLink.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "joinChatByInviteLink" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::JoinChatByInviteLink """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.JoinChatByInviteLink.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.LeaveChat]
origin_name = "leaveChat"
clz_name = "LeaveChat"
is_private = false
clz_is_trait = false
clz_description = """ Removes current user from chat members. Private and secret chats can't be left using this method. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LeaveChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LeaveChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LeaveChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "leaveChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LeaveChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LeaveChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.LogOut]
origin_name = "logOut"
clz_name = "LogOut"
is_private = false
clz_is_trait = false
clz_description = """ Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl LogOut {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.LogOut.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.LogOut.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "logOut" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::LogOut """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.LogOut.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.OpenChat]
origin_name = "openChat"
clz_name = "OpenChat"
is_private = false
clz_is_trait = false
clz_description = """ Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats). """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OpenChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OpenChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OpenChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "openChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OpenChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OpenChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.OpenMessageContent]
origin_name = "openMessageContent"
clz_name = "OpenMessageContent"
is_private = false
clz_is_trait = false
clz_description = """ Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message with the opened content. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OpenMessageContent {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.OpenMessageContent.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OpenMessageContent.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "openMessageContent" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OpenMessageContent """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OpenMessageContent.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.OptimizeStorage]
origin_name = "optimizeStorage"
clz_name = "OptimizeStorage"
is_private = false
clz_is_trait = false
clz_description = """ Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "size", class = "Option<i64>", description = """ Limit on the total size of files after deletion. Pass -1 to use the default limit. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit. """, tags = [  ] },
  { name = "count", class = "Option<i32>", description = """ Limit on the total count of files after deletion. Pass -1 to use the default limit. """, tags = [  ] },
  { name = "immunity_delay", class = "Option<i32>", description = """ The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value. """, tags = [  ] },
  { name = "file_types", class = "Option<Vec<Box<FileType>>>", description = """ If not empty, only files with the given type(s) are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted. """, tags = [  ] },
  { name = "chat_ids", class = "Option<Vec<i64>>", description = """ If not empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos). """, tags = [  ] },
  { name = "exclude_chat_ids", class = "Option<Vec<i64>>", description = """ If not empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos). """, tags = [  ] },
  { name = "chat_limit", class = "Option<i32>", description = """ Same as in getStorageStatistics. Affects only returned statistics. """, tags = [  ] },
  
]
fields_size = 9
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl OptimizeStorage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for OptimizeStorage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.OptimizeStorage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.OptimizeStorage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "optimizeStorage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::OptimizeStorage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.OptimizeStorage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ParseTextEntities]
origin_name = "parseTextEntities"
clz_name = "ParseTextEntities"
is_private = false
clz_is_trait = false
clz_description = """ Parses Bold, Italic, Code, Pre, PreCode and TextUrl entities contained in the text. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "text", class = "Option<String>", description = """ The text which should be parsed. """, tags = [  ] },
  { name = "parse_mode", class = "Option<Box<TextParseMode>>", description = """ Text parse mode. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ParseTextEntities {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ParseTextEntities {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ParseTextEntities.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ParseTextEntities.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "parseTextEntities" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ParseTextEntities """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ParseTextEntities.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.PinChatMessage]
origin_name = "pinChatMessage"
clz_name = "PinChatMessage"
is_private = false
clz_is_trait = false
clz_description = """ Pins a message in a chat; requires appropriate administrator rights in the group or channel. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the new pinned message. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ True, if there should be no notification about the pinned message. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PinChatMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PinChatMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PinChatMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pinChatMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PinChatMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PinChatMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.PingProxy]
origin_name = "pingProxy"
clz_name = "PingProxy"
is_private = false
clz_is_trait = false
clz_description = """ Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxy_id", class = "Option<i32>", description = """ Proxy identifier. Use 0 to ping a Telegram server without a proxy. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl PingProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.PingProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.PingProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "pingProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::PingProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.PingProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ProcessPushNotification]
origin_name = "processPushNotification"
clz_name = "ProcessPushNotification"
is_private = false
clz_is_trait = false
clz_description = """ Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "payload", class = "Option<String>", description = """ JSON-encoded push notification payload with all fields sent by the server, and "google.sent_time" and "google.notification.sound" fields added. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ProcessPushNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ProcessPushNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ProcessPushNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "processPushNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ProcessPushNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ProcessPushNotification.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ReadAllChatMentions]
origin_name = "readAllChatMentions"
clz_name = "ReadAllChatMentions"
is_private = false
clz_is_trait = false
clz_description = """ Marks all mentions in a chat as read. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReadAllChatMentions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReadAllChatMentions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReadAllChatMentions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "readAllChatMentions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReadAllChatMentions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReadAllChatMentions.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ReadFilePart]
origin_name = "readFilePart"
clz_name = "ReadFilePart"
is_private = false
clz_is_trait = false
clz_description = """ Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the client has no direct access to TDLib's file system, because it is usually slower than a direct read from the file. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file_id", class = "Option<i32>", description = """ Identifier of the file. The file must be located in the TDLib file cache. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ The offset from which to read the file. """, tags = [  ] },
  { name = "count", class = "Option<i32>", description = """ Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReadFilePart {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReadFilePart.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReadFilePart.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "readFilePart" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReadFilePart """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReadFilePart.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RecoverAuthenticationPassword]
origin_name = "recoverAuthenticationPassword"
clz_name = "RecoverAuthenticationPassword"
is_private = false
clz_is_trait = false
clz_description = """ Recovers the password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "recovery_code", class = "Option<String>", description = """ Recovery code to check. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RecoverAuthenticationPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RecoverAuthenticationPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RecoverAuthenticationPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "recoverAuthenticationPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RecoverAuthenticationPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RecoverAuthenticationPassword.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RecoverPassword]
origin_name = "recoverPassword"
clz_name = "RecoverPassword"
is_private = false
clz_is_trait = false
clz_description = """ Recovers the password using a recovery code sent to an email address that was previously set up. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "recovery_code", class = "Option<String>", description = """ Recovery code to check. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RecoverPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RecoverPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RecoverPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "recoverPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RecoverPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RecoverPassword.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RegisterDevice]
origin_name = "registerDevice"
clz_name = "RegisterDevice"
is_private = false
clz_is_trait = false
clz_description = """ Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "device_token", class = "Option<Box<DeviceToken>>", description = """ Device token. """, tags = [  ] },
  { name = "other_user_ids", class = "Option<Vec<i32>>", description = """ List of user identifiers of other users currently using the client. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RegisterDevice {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RegisterDevice {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RegisterDevice.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RegisterDevice.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "registerDevice" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RegisterDevice """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RegisterDevice.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveContacts]
origin_name = "removeContacts"
clz_name = "RemoveContacts"
is_private = false
clz_is_trait = false
clz_description = """ Removes users from the contact list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_ids", class = "Option<Vec<i32>>", description = """ Identifiers of users to be deleted. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveFavoriteSticker]
origin_name = "removeFavoriteSticker"
clz_name = "RemoveFavoriteSticker"
is_private = false
clz_is_trait = false
clz_description = """ Removes a sticker from the list of favorite stickers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker file to delete from the list. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveFavoriteSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RemoveFavoriteSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RemoveFavoriteSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveFavoriteSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeFavoriteSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveFavoriteSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveFavoriteSticker.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveNotification]
origin_name = "removeNotification"
clz_name = "RemoveNotification"
is_private = false
clz_is_trait = false
clz_description = """ Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "notification_group_id", class = "Option<i32>", description = """ Identifier of notification group to which the notification belongs. """, tags = [  ] },
  { name = "notification_id", class = "Option<i32>", description = """ Identifier of removed notification. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveNotification.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveNotificationGroup]
origin_name = "removeNotificationGroup"
clz_name = "RemoveNotificationGroup"
is_private = false
clz_is_trait = false
clz_description = """ Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "notification_group_id", class = "Option<i32>", description = """ Notification group identifier. """, tags = [  ] },
  { name = "max_notification_id", class = "Option<i32>", description = """ Maximum identifier of removed notifications. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveNotificationGroup {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveNotificationGroup.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveNotificationGroup.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeNotificationGroup" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveNotificationGroup """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveNotificationGroup.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveProxy]
origin_name = "removeProxy"
clz_name = "RemoveProxy"
is_private = false
clz_is_trait = false
clz_description = """ Removes a proxy server. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "proxy_id", class = "Option<i32>", description = """ Proxy identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveProxy {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveProxy.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveProxy.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeProxy" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveProxy """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveProxy.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveRecentHashtag]
origin_name = "removeRecentHashtag"
clz_name = "RemoveRecentHashtag"
is_private = false
clz_is_trait = false
clz_description = """ Removes a hashtag from the list of recently used hashtags. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "hashtag", class = "Option<String>", description = """ Hashtag to delete. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveRecentHashtag {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveRecentHashtag.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveRecentHashtag.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeRecentHashtag" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveRecentHashtag """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveRecentHashtag.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveRecentSticker]
origin_name = "removeRecentSticker"
clz_name = "RemoveRecentSticker"
is_private = false
clz_is_trait = false
clz_description = """ Removes a sticker from the list of recently used stickers. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_attached", class = "Option<bool>", description = """ Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers. """, tags = [  ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker file to delete. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveRecentSticker {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RemoveRecentSticker {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RemoveRecentSticker.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveRecentSticker.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeRecentSticker" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveRecentSticker """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveRecentSticker.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveRecentlyFoundChat]
origin_name = "removeRecentlyFoundChat"
clz_name = "RemoveRecentlyFoundChat"
is_private = false
clz_is_trait = false
clz_description = """ Removes a chat from the list of recently found chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to be removed. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveRecentlyFoundChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RemoveRecentlyFoundChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveRecentlyFoundChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeRecentlyFoundChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveRecentlyFoundChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveRecentlyFoundChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveSavedAnimation]
origin_name = "removeSavedAnimation"
clz_name = "RemoveSavedAnimation"
is_private = false
clz_is_trait = false
clz_description = """ Removes an animation from the list of saved animations. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "animation", class = "Option<Box<InputFile>>", description = """ Animation file to be removed. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveSavedAnimation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RemoveSavedAnimation {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RemoveSavedAnimation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveSavedAnimation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeSavedAnimation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveSavedAnimation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveSavedAnimation.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveStickerFromSet]
origin_name = "removeStickerFromSet"
clz_name = "RemoveStickerFromSet"
is_private = false
clz_is_trait = false
clz_description = """ Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveStickerFromSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RemoveStickerFromSet {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RemoveStickerFromSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveStickerFromSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeStickerFromSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveStickerFromSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveStickerFromSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RemoveTopChat]
origin_name = "removeTopChat"
clz_name = "RemoveTopChat"
is_private = false
clz_is_trait = false
clz_description = """ Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "category", class = "Option<Box<TopChatCategory>>", description = """ Category of frequently used chats. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RemoveTopChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for RemoveTopChat {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.RemoveTopChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RemoveTopChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "removeTopChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RemoveTopChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RemoveTopChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ReorderInstalledStickerSets]
origin_name = "reorderInstalledStickerSets"
clz_name = "ReorderInstalledStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Changes the order of installed sticker sets. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_masks", class = "Option<bool>", description = """ Pass true to change the order of mask sticker sets; pass false to change the order of ordinary sticker sets. """, tags = [  ] },
  { name = "sticker_set_ids", class = "Option<Vec<i64>>", description = """ Identifiers of installed sticker sets in the new correct order. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReorderInstalledStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReorderInstalledStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReorderInstalledStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "reorderInstalledStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReorderInstalledStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReorderInstalledStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ReportChat]
origin_name = "reportChat"
clz_name = "ReportChat"
is_private = false
clz_is_trait = false
clz_description = """ Reports a chat to the Telegram moderators. Supported only for supergroups, channels, or private chats with bots, since other chats can't be checked by moderators. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "reason", class = "Option<Box<ChatReportReason>>", description = """ The reason for reporting the chat. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of reported messages, if any. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReportChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for ReportChat {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.ReportChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReportChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "reportChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReportChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReportChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ReportSupergroupSpam]
origin_name = "reportSupergroupSpam"
clz_name = "ReportSupergroupSpam"
is_private = false
clz_is_trait = false
clz_description = """ Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Supergroup identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ Identifiers of messages sent in the supergroup by the user. This list must be non-empty. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ReportSupergroupSpam {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ReportSupergroupSpam.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ReportSupergroupSpam.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "reportSupergroupSpam" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ReportSupergroupSpam """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ReportSupergroupSpam.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RequestAuthenticationPasswordRecovery]
origin_name = "requestAuthenticationPasswordRecovery"
clz_name = "RequestAuthenticationPasswordRecovery"
is_private = false
clz_is_trait = false
clz_description = """ Requests to send a password recovery code to an email address that was previously set up. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RequestAuthenticationPasswordRecovery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RequestAuthenticationPasswordRecovery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RequestAuthenticationPasswordRecovery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "requestAuthenticationPasswordRecovery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RequestAuthenticationPasswordRecovery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RequestAuthenticationPasswordRecovery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.RequestPasswordRecovery]
origin_name = "requestPasswordRecovery"
clz_name = "RequestPasswordRecovery"
is_private = false
clz_is_trait = false
clz_description = """ Requests to send a password recovery code to an email address that was previously set up. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl RequestPasswordRecovery {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.RequestPasswordRecovery.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.RequestPasswordRecovery.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "requestPasswordRecovery" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::RequestPasswordRecovery """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.RequestPasswordRecovery.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendAuthenticationCode]
origin_name = "resendAuthenticationCode"
clz_name = "ResendAuthenticationCode"
is_private = false
clz_is_trait = false
clz_description = """ Re-sends an authentication code to the user. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendAuthenticationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendAuthenticationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendAuthenticationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendAuthenticationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendAuthenticationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendAuthenticationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendChangePhoneNumberCode]
origin_name = "resendChangePhoneNumberCode"
clz_name = "ResendChangePhoneNumberCode"
is_private = false
clz_is_trait = false
clz_description = """ Re-sends the authentication code sent to confirm a new phone number for the user. Works only if the previously received  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendChangePhoneNumberCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendChangePhoneNumberCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendChangePhoneNumberCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendChangePhoneNumberCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendChangePhoneNumberCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendChangePhoneNumberCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendEmailAddressVerificationCode]
origin_name = "resendEmailAddressVerificationCode"
clz_name = "ResendEmailAddressVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Re-sends the code to verify an email address to be added to a user's Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendEmailAddressVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendEmailAddressVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendEmailAddressVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendEmailAddressVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendEmailAddressVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendEmailAddressVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendPhoneNumberConfirmationCode]
origin_name = "resendPhoneNumberConfirmationCode"
clz_name = "ResendPhoneNumberConfirmationCode"
is_private = false
clz_is_trait = false
clz_description = """ Resends phone number confirmation code. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendPhoneNumberConfirmationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendPhoneNumberConfirmationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendPhoneNumberConfirmationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendPhoneNumberConfirmationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendPhoneNumberConfirmationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendPhoneNumberConfirmationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendPhoneNumberVerificationCode]
origin_name = "resendPhoneNumberVerificationCode"
clz_name = "ResendPhoneNumberVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Re-sends the code to verify a phone number to be added to a user's Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendPhoneNumberVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendPhoneNumberVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendPhoneNumberVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendPhoneNumberVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendPhoneNumberVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendPhoneNumberVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResendRecoveryEmailAddressCode]
origin_name = "resendRecoveryEmailAddressCode"
clz_name = "ResendRecoveryEmailAddressCode"
is_private = false
clz_is_trait = false
clz_description = """ Resends the 2-step verification recovery email address verification code. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResendRecoveryEmailAddressCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResendRecoveryEmailAddressCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResendRecoveryEmailAddressCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resendRecoveryEmailAddressCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResendRecoveryEmailAddressCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResendRecoveryEmailAddressCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResetAllNotificationSettings]
origin_name = "resetAllNotificationSettings"
clz_name = "ResetAllNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Resets all notification settings to their default values. By default, all chats are unmuted, the sound is set to "default" and message previews are shown. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResetAllNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResetAllNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResetAllNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resetAllNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResetAllNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResetAllNotificationSettings.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ResetNetworkStatistics]
origin_name = "resetNetworkStatistics"
clz_name = "ResetNetworkStatistics"
is_private = false
clz_is_trait = false
clz_description = """ Resets all network data usage statistics to zero. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ResetNetworkStatistics {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ResetNetworkStatistics.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ResetNetworkStatistics.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "resetNetworkStatistics" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ResetNetworkStatistics """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ResetNetworkStatistics.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchCallMessages]
origin_name = "searchCallMessages"
clz_name = "SearchCallMessages"
is_private = false
clz_is_trait = false
clz_description = """ Searches for call messages. Returns the results in reverse chronological order (i. e., in order of decreasing message_id). For optimal performance the number of returned messages is chosen by the library. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "from_message_id", class = "Option<i64>", description = """ Identifier of the message from which to search; use 0 to get results from the last message. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached. """, tags = [  ] },
  { name = "only_missed", class = "Option<bool>", description = """ If true, returns only messages with missed calls. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchCallMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchCallMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchCallMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchCallMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchCallMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchCallMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchChatMembers]
origin_name = "searchChatMembers"
clz_name = "SearchChatMembers"
is_private = false
clz_is_trait = false
clz_description = """ Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of users to be returned. """, tags = [  ] },
  { name = "filter", class = "Option<Box<ChatMembersFilter>>", description = """ The type of users to return. By default, chatMembersFilterMembers. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchChatMembers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SearchChatMembers {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SearchChatMembers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchChatMembers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchChatMembers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchChatMembers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchChatMembers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchChatMessages]
origin_name = "searchChatMessages"
clz_name = "SearchChatMessages"
is_private = false
clz_is_trait = false
clz_description = """ Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query ( """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat in which to search messages. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  { name = "sender_user_id", class = "Option<i32>", description = """ If not 0, only messages sent by the specified user will be returned. Not supported in secret chats. """, tags = [  ] },
  { name = "from_message_id", class = "Option<i64>", description = """ Identifier of the message starting from which history must be fetched; use 0 to get results from the last message. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached. """, tags = [  ] },
  { name = "filter", class = "Option<Box<SearchMessagesFilter>>", description = """ Filter for message content in the search results. """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchChatMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SearchChatMessages {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SearchChatMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchChatMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchChatMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchChatMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchChatMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchChatRecentLocationMessages]
origin_name = "searchChatRecentLocationMessages"
clz_name = "SearchChatRecentLocationMessages"
is_private = false
clz_is_trait = false
clz_description = """ Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of messages to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchChatRecentLocationMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchChatRecentLocationMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchChatRecentLocationMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchChatRecentLocationMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchChatRecentLocationMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchChatRecentLocationMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchChats]
origin_name = "searchChats"
clz_name = "SearchChats"
is_private = false
clz_is_trait = false
clz_description = """ Searches for the specified query in the title and username of already known chats, this is an offline request. Returns chats in the order seen in the chat list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. If the query is empty, returns up to 20 recently found chats. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of chats to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchChatsOnServer]
origin_name = "searchChatsOnServer"
clz_name = "SearchChatsOnServer"
is_private = false
clz_is_trait = false
clz_description = """ Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the chat list. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of chats to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchChatsOnServer {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchChatsOnServer.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchChatsOnServer.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchChatsOnServer" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchChatsOnServer """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchChatsOnServer.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchContacts]
origin_name = "searchContacts"
clz_name = "SearchContacts"
is_private = false
clz_is_trait = false
clz_description = """ Searches for the specified query in the first names, last names and usernames of the known user contacts. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for; may be empty to return all contacts. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of users to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchContacts {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchContacts.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchContacts.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchContacts" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchContacts """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchContacts.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchHashtags]
origin_name = "searchHashtags"
clz_name = "SearchHashtags"
is_private = false
clz_is_trait = false
clz_description = """ Searches for recently used hashtags by their prefix. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "prefix", class = "Option<String>", description = """ Hashtag prefix to search for. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of hashtags to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchHashtags {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchHashtags.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchHashtags.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchHashtags" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchHashtags """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchHashtags.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchInstalledStickerSets]
origin_name = "searchInstalledStickerSets"
clz_name = "SearchInstalledStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Searches for installed sticker sets by looking for specified query in their title and name. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "is_masks", class = "Option<bool>", description = """ Pass true to return mask sticker sets; pass false to return ordinary sticker sets. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of sticker sets to return. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchInstalledStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchInstalledStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchInstalledStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchInstalledStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchInstalledStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchInstalledStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchMessages]
origin_name = "searchMessages"
clz_name = "SearchMessages"
is_private = false
clz_is_trait = false
clz_description = """ Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance the number of returned messages is chosen by the library. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  { name = "offset_date", class = "Option<i32>", description = """ The date of the message starting from which the results should be fetched. Use 0 or any date in the future to get results from the last message. """, tags = [  ] },
  { name = "offset_chat_id", class = "Option<i64>", description = """ The chat identifier of the last found message, or 0 for the first request. """, tags = [  ] },
  { name = "offset_message_id", class = "Option<i64>", description = """ The message identifier of the last found message, or 0 for the first request. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ The maximum number of messages to be returned, up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchPublicChat]
origin_name = "searchPublicChat"
clz_name = "SearchPublicChat"
is_private = false
clz_is_trait = false
clz_description = """ Searches a public chat by its username. Currently only private chats, supergroups and channels can be public. Returns the chat if found; otherwise an error is returned. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "username", class = "Option<String>", description = """ Username to be resolved. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchPublicChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchPublicChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchPublicChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchPublicChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchPublicChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchPublicChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchPublicChats]
origin_name = "searchPublicChats"
clz_name = "SearchPublicChats"
is_private = false
clz_is_trait = false
clz_description = """ Searches public chats by looking for specified query in their username and title. Currently only private chats, supergroups and channels can be public. Returns a meaningful number of results. Returns nothing if the length of the searched username prefix is less than 5. Excludes private chats with contacts and chats from the chat list from the results. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchPublicChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchPublicChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchPublicChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchPublicChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchPublicChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchPublicChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchSecretMessages]
origin_name = "searchSecretMessages"
clz_name = "SearchSecretMessages"
is_private = false
clz_is_trait = false
clz_description = """ Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance the number of returned messages is chosen by the library. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat in which to search. Specify 0 to search in all secret chats. """, tags = [  ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. If empty, searchChatMessages should be used instead. """, tags = [  ] },
  { name = "from_search_id", class = "Option<i64>", description = """ The identifier from the result of a previous request, use 0 to get results from the last message. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of messages to be returned; up to 100. Fewer messages may be returned than specified by the limit, even if the end of the message history has not been reached. """, tags = [  ] },
  { name = "filter", class = "Option<Box<SearchMessagesFilter>>", description = """ A filter for the content of messages in the search results. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchSecretMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SearchSecretMessages {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SearchSecretMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchSecretMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchSecretMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchSecretMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchSecretMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchStickerSet]
origin_name = "searchStickerSet"
clz_name = "SearchStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Searches for a sticker set by its name. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ Name of the sticker set. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchStickerSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchStickerSets]
origin_name = "searchStickerSets"
clz_name = "SearchStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Searches for ordinary sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "query", class = "Option<String>", description = """ Query to search for. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SearchStickers]
origin_name = "searchStickers"
clz_name = "SearchStickers"
is_private = false
clz_is_trait = false
clz_description = """ Searches for stickers from public sticker sets that correspond to a given emoji. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "emoji", class = "Option<String>", description = """ String representation of emoji; must be non-empty. """, tags = [  ] },
  { name = "limit", class = "Option<i32>", description = """ Maximum number of stickers to be returned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SearchStickers {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SearchStickers.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SearchStickers.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "searchStickers" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SearchStickers """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SearchStickers.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendBotStartMessage]
origin_name = "sendBotStartMessage"
clz_name = "SendBotStartMessage"
is_private = false
clz_is_trait = false
clz_description = """ Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bot_user_id", class = "Option<i32>", description = """ Identifier of the bot. """, tags = [  ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the target chat. """, tags = [  ] },
  { name = "parameter", class = "Option<String>", description = """ A hidden parameter sent to the bot for deep linking purposes (https://api.telegram.org/bots#deep-linking). """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendBotStartMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendBotStartMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendBotStartMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendBotStartMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendBotStartMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendBotStartMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendCallDebugInformation]
origin_name = "sendCallDebugInformation"
clz_name = "SendCallDebugInformation"
is_private = false
clz_is_trait = false
clz_description = """ Sends debug information for a call. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call_id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  { name = "debug_information", class = "Option<String>", description = """ Debug information in application-specific format. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendCallDebugInformation {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendCallDebugInformation.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendCallDebugInformation.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendCallDebugInformation" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendCallDebugInformation """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendCallDebugInformation.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendCallRating]
origin_name = "sendCallRating"
clz_name = "SendCallRating"
is_private = false
clz_is_trait = false
clz_description = """ Sends a call rating. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "call_id", class = "Option<i32>", description = """ Call identifier. """, tags = [  ] },
  { name = "rating", class = "Option<i32>", description = """ Call rating; 1-5. """, tags = [  ] },
  { name = "comment", class = "Option<String>", description = """ An optional user comment if the rating is less than 5. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendCallRating {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendCallRating.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendCallRating.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendCallRating" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendCallRating """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendCallRating.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendChatAction]
origin_name = "sendChatAction"
clz_name = "SendChatAction"
is_private = false
clz_is_trait = false
clz_description = """ Sends a notification about user activity in a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "action", class = "Option<Box<ChatAction>>", description = """ The action description. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendChatAction {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SendChatAction {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SendChatAction.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendChatAction.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendChatAction" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendChatAction """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendChatAction.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendChatScreenshotTakenNotification]
origin_name = "sendChatScreenshotTakenNotification"
clz_name = "SendChatScreenshotTakenNotification"
is_private = false
clz_is_trait = false
clz_description = """ Sends a notification about a screenshot taken in a chat. Supported only in private and secret chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendChatScreenshotTakenNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendChatScreenshotTakenNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendChatScreenshotTakenNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendChatScreenshotTakenNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendChatScreenshotTakenNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendChatScreenshotTakenNotification.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendChatSetTtlMessage]
origin_name = "sendChatSetTtlMessage"
clz_name = "SendChatSetTtlMessage"
is_private = false
clz_is_trait = false
clz_description = """ Changes the current TTL setting (sets a new self-destruct timer) in a secret chat and sends the corresponding message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "ttl", class = "Option<i32>", description = """ New TTL value, in seconds. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendChatSetTtlMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendChatSetTtlMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendChatSetTtlMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendChatSetTtlMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendChatSetTtlMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendChatSetTtlMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendCustomRequest]
origin_name = "sendCustomRequest"
clz_name = "SendCustomRequest"
is_private = false
clz_is_trait = false
clz_description = """ Sends a custom request; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "method", class = "Option<String>", description = """ The method name. """, tags = [  ] },
  { name = "parameters", class = "Option<String>", description = """ JSON-serialized method parameters. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendCustomRequest {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendCustomRequest.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendCustomRequest.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendCustomRequest" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendCustomRequest """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendCustomRequest.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendEmailAddressVerificationCode]
origin_name = "sendEmailAddressVerificationCode"
clz_name = "SendEmailAddressVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Sends a code to verify an email address to be added to a user's Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "email_address", class = "Option<String>", description = """ Email address. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendEmailAddressVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendEmailAddressVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendEmailAddressVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendEmailAddressVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendEmailAddressVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendEmailAddressVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendInlineQueryResultMessage]
origin_name = "sendInlineQueryResultMessage"
clz_name = "SendInlineQueryResultMessage"
is_private = false
clz_is_trait = false
clz_description = """ Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Target chat. """, tags = [  ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ Identifier of a message to reply to or 0. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ Pass true to disable notification for the message. Not supported in secret chats. """, tags = [  ] },
  { name = "from_background", class = "Option<bool>", description = """ Pass true if the message is sent from background. """, tags = [  ] },
  { name = "query_id", class = "Option<i64>", description = """ Identifier of the inline query. """, tags = [  ] },
  { name = "result_id", class = "Option<String>", description = """ Identifier of the inline result. """, tags = [  ] },
  { name = "hide_via_bot", class = "Option<bool>", description = """ If true, there will be no mention of a bot, via which the message is sent. Can be used only for bots GetOption("animation_search_bot_username"), GetOption("photo_search_bot_username") and GetOption("venue_search_bot_username"). """, tags = [  ] },
  
]
fields_size = 8
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendInlineQueryResultMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendInlineQueryResultMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendInlineQueryResultMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendInlineQueryResultMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendInlineQueryResultMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendInlineQueryResultMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendMessage]
origin_name = "sendMessage"
clz_name = "SendMessage"
is_private = false
clz_is_trait = false
clz_description = """ Sends a message. Returns the sent message. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Target chat. """, tags = [  ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ Identifier of the message to reply to or 0. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ Pass true to disable notification for the message. Not supported in secret chats. """, tags = [  ] },
  { name = "from_background", class = "Option<bool>", description = """ Pass true if the message is sent from the background. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ Markup for replying to the message; for bots only. """, tags = [  ] },
  { name = "input_message_content", class = "Option<Box<InputMessageContent>>", description = """ The content of the message to be sent. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SendMessage {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SendMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendMessageAlbum]
origin_name = "sendMessageAlbum"
clz_name = "SendMessageAlbum"
is_private = false
clz_is_trait = false
clz_description = """ Sends messages grouped together into an album. Currently only photo and video messages can be grouped into an album. Returns sent messages. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Target chat. """, tags = [  ] },
  { name = "reply_to_message_id", class = "Option<i64>", description = """ Identifier of a message to reply to or 0. """, tags = [  ] },
  { name = "disable_notification", class = "Option<bool>", description = """ Pass true to disable notification for the messages. Not supported in secret chats. """, tags = [  ] },
  { name = "from_background", class = "Option<bool>", description = """ Pass true if the messages are sent from the background. """, tags = [  ] },
  { name = "input_message_contents", class = "Option<Vec<Box<InputMessageContent>>>", description = """ Contents of messages to be sent. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendMessageAlbum {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SendMessageAlbum {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SendMessageAlbum.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendMessageAlbum.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendMessageAlbum" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendMessageAlbum """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendMessageAlbum.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendPassportAuthorizationForm]
origin_name = "sendPassportAuthorizationForm"
clz_name = "SendPassportAuthorizationForm"
is_private = false
clz_is_trait = false
clz_description = """ Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "autorization_form_id", class = "Option<i32>", description = """ Authorization form identifier. """, tags = [  ] },
  { name = "types", class = "Option<Vec<Box<PassportElementType>>>", description = """ Types of Telegram Passport elements chosen by user to complete the authorization form. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendPassportAuthorizationForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SendPassportAuthorizationForm {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SendPassportAuthorizationForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendPassportAuthorizationForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendPassportAuthorizationForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendPassportAuthorizationForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendPassportAuthorizationForm.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendPaymentForm]
origin_name = "sendPaymentForm"
clz_name = "SendPaymentForm"
is_private = false
clz_is_trait = false
clz_description = """ Sends a filled-out payment form to the bot for final verification. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the Invoice message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "order_info_id", class = "Option<String>", description = """ Identifier returned by ValidateOrderInfo, or an empty string. """, tags = [  ] },
  { name = "shipping_option_id", class = "Option<String>", description = """ Identifier of a chosen shipping option, if applicable. """, tags = [  ] },
  { name = "credentials", class = "Option<Box<InputCredentials>>", description = """ The credentials chosen by user for payment. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendPaymentForm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SendPaymentForm {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SendPaymentForm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendPaymentForm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendPaymentForm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendPaymentForm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendPaymentForm.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendPhoneNumberConfirmationCode]
origin_name = "sendPhoneNumberConfirmationCode"
clz_name = "SendPhoneNumberConfirmationCode"
is_private = false
clz_is_trait = false
clz_description = """ Sends phone number confirmation code. Should be called when user presses " """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "hash", class = "Option<String>", description = """ Value of the "hash" parameter from the link. """, tags = [  ] },
  { name = "phone_number", class = "Option<String>", description = """ Value of the "phone" parameter from the link. """, tags = [  ] },
  { name = "allow_flash_call", class = "Option<bool>", description = """ Pass true if the authentication code may be sent via flash call to the specified phone number. """, tags = [  ] },
  { name = "is_current_phone_number", class = "Option<bool>", description = """ Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendPhoneNumberConfirmationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendPhoneNumberConfirmationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendPhoneNumberConfirmationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendPhoneNumberConfirmationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendPhoneNumberConfirmationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendPhoneNumberConfirmationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SendPhoneNumberVerificationCode]
origin_name = "sendPhoneNumberVerificationCode"
clz_name = "SendPhoneNumberVerificationCode"
is_private = false
clz_is_trait = false
clz_description = """ Sends a code to verify a phone number to be added to a user's Telegram Passport. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ The phone number of the user, in international format. """, tags = [  ] },
  { name = "allow_flash_call", class = "Option<bool>", description = """ Pass true if the authentication code may be sent via flash call to the specified phone number. """, tags = [  ] },
  { name = "is_current_phone_number", class = "Option<bool>", description = """ Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SendPhoneNumberVerificationCode {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SendPhoneNumberVerificationCode.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SendPhoneNumberVerificationCode.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "sendPhoneNumberVerificationCode" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SendPhoneNumberVerificationCode """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SendPhoneNumberVerificationCode.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetAccountTtl]
origin_name = "setAccountTtl"
clz_name = "SetAccountTtl"
is_private = false
clz_is_trait = false
clz_description = """ Changes the period of inactivity after which the account of the current user will automatically be deleted. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "ttl", class = "Option<AccountTtl>", description = """ New account TTL. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetAccountTtl {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetAccountTtl.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetAccountTtl.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setAccountTtl" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetAccountTtl """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetAccountTtl.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetAlarm]
origin_name = "setAlarm"
clz_name = "SetAlarm"
is_private = false
clz_is_trait = false
clz_description = """ Succeeds after a specified amount of time has passed. Can be called before authorization. Can be called before initialization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "seconds", class = "Option<f64>", description = """ Number of seconds before the function returns. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetAlarm {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetAlarm.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetAlarm.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setAlarm" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetAlarm """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetAlarm.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetAuthenticationPhoneNumber]
origin_name = "setAuthenticationPhoneNumber"
clz_name = "SetAuthenticationPhoneNumber"
is_private = false
clz_is_trait = false
clz_description = """ Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "phone_number", class = "Option<String>", description = """ The phone number of the user, in international format. """, tags = [  ] },
  { name = "allow_flash_call", class = "Option<bool>", description = """ Pass true if the authentication code may be sent via flash call to the specified phone number. """, tags = [  ] },
  { name = "is_current_phone_number", class = "Option<bool>", description = """ Pass true if the phone number is used on the current device. Ignored if allow_flash_call is false. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetAuthenticationPhoneNumber {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetAuthenticationPhoneNumber.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetAuthenticationPhoneNumber.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setAuthenticationPhoneNumber" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetAuthenticationPhoneNumber """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetAuthenticationPhoneNumber.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetBio]
origin_name = "setBio"
clz_name = "SetBio"
is_private = false
clz_is_trait = false
clz_description = """ Changes the bio of the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "bio", class = "Option<String>", description = """ The new value of the user bio; 0-70 characters without line feeds. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetBio {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetBio.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetBio.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setBio" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetBio """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetBio.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetBotUpdatesStatus]
origin_name = "setBotUpdatesStatus"
clz_name = "SetBotUpdatesStatus"
is_private = false
clz_is_trait = false
clz_description = """ Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "pending_update_count", class = "Option<i32>", description = """ The number of pending updates. """, tags = [  ] },
  { name = "error_message", class = "Option<String>", description = """ The last error message. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetBotUpdatesStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetBotUpdatesStatus.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetBotUpdatesStatus.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setBotUpdatesStatus" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetBotUpdatesStatus """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetBotUpdatesStatus.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatClientData]
origin_name = "setChatClientData"
clz_name = "SetChatClientData"
is_private = false
clz_is_trait = false
clz_description = """ Changes client data associated with a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "client_data", class = "Option<String>", description = """ New value of client_data. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatClientData {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetChatClientData.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatClientData.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatClientData" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatClientData """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatClientData.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatDraftMessage]
origin_name = "setChatDraftMessage"
clz_name = "SetChatDraftMessage"
is_private = false
clz_is_trait = false
clz_description = """ Changes the draft message in a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "draft_message", class = "Option<DraftMessage>", description = """ New draft message; may be null. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatDraftMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetChatDraftMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatDraftMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatDraftMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatDraftMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatDraftMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatMemberStatus]
origin_name = "setChatMemberStatus"
clz_name = "SetChatMemberStatus"
is_private = false
clz_is_trait = false
clz_description = """ Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for adding new members to the chat; instead, use  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "status", class = "Option<Box<ChatMemberStatus>>", description = """ The new status of the member in the chat. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatMemberStatus {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetChatMemberStatus {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetChatMemberStatus.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatMemberStatus.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatMemberStatus" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatMemberStatus """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatMemberStatus.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatNotificationSettings]
origin_name = "setChatNotificationSettings"
clz_name = "SetChatNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Changes the notification settings of a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "notification_settings", class = "Option<ChatNotificationSettings>", description = """ New notification settings for the chat. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetChatNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatNotificationSettings.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatPhoto]
origin_name = "setChatPhoto"
clz_name = "SetChatPhoto"
is_private = false
clz_is_trait = false
clz_description = """ Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The photo will not be changed before request to the server has been completed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "photo", class = "Option<Box<InputFile>>", description = """ New chat photo. You can use a zero InputFileId to delete the chat photo. Files that are accessible only by HTTP URL are not acceptable. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatPhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetChatPhoto {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetChatPhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatPhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatPhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatPhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatPhoto.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetChatTitle]
origin_name = "setChatTitle"
clz_name = "SetChatTitle"
is_private = false
clz_is_trait = false
clz_description = """ Changes the chat title. Supported only for basic groups, supergroups and channels. Requires administrator rights in basic groups and the appropriate administrator rights in supergroups and channels. The title will not be changed until the request to the server has been completed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "title", class = "Option<String>", description = """ New title of the chat; 1-128 characters. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetChatTitle {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetChatTitle.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetChatTitle.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setChatTitle" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetChatTitle """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetChatTitle.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetCustomLanguagePack]
origin_name = "setCustomLanguagePack"
clz_name = "SetCustomLanguagePack"
is_private = false
clz_is_trait = false
clz_description = """ Adds or changes a custom local language pack to the current localization target. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "info", class = "Option<LanguagePackInfo>", description = """ Information about the language pack. Language pack ID must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization. """, tags = [  ] },
  { name = "strings", class = "Option<Vec<LanguagePackString>>", description = """ Strings of the new language pack. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetCustomLanguagePack {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetCustomLanguagePack.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetCustomLanguagePack.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setCustomLanguagePack" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetCustomLanguagePack """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetCustomLanguagePack.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetCustomLanguagePackString]
origin_name = "setCustomLanguagePackString"
clz_name = "SetCustomLanguagePackString"
is_private = false
clz_is_trait = false
clz_description = """ Adds, edits or deletes a string in a custom local language pack. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Identifier of a previously added custom local language pack in the current localization target. """, tags = [  ] },
  { name = "new_string", class = "Option<LanguagePackString>", description = """ New language pack string. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetCustomLanguagePackString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetCustomLanguagePackString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetCustomLanguagePackString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setCustomLanguagePackString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetCustomLanguagePackString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetCustomLanguagePackString.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetDatabaseEncryptionKey]
origin_name = "setDatabaseEncryptionKey"
clz_name = "SetDatabaseEncryptionKey"
is_private = false
clz_is_trait = false
clz_description = """ Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "new_encryption_key", class = "Option<String>", description = """ New encryption key. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetDatabaseEncryptionKey {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetDatabaseEncryptionKey.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetDatabaseEncryptionKey.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setDatabaseEncryptionKey" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetDatabaseEncryptionKey """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetDatabaseEncryptionKey.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetFileGenerationProgress]
origin_name = "setFileGenerationProgress"
clz_name = "SetFileGenerationProgress"
is_private = false
clz_is_trait = false
clz_description = """ Informs TDLib on a file generation prograss. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "generation_id", class = "Option<i64>", description = """ The identifier of the generation process. """, tags = [  ] },
  { name = "expected_size", class = "Option<i32>", description = """ Expected size of the generated file, in bytes; 0 if unknown. """, tags = [  ] },
  { name = "local_prefix_size", class = "Option<i32>", description = """ The number of bytes already generated. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetFileGenerationProgress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetFileGenerationProgress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetFileGenerationProgress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setFileGenerationProgress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetFileGenerationProgress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetFileGenerationProgress.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetGameScore]
origin_name = "setGameScore"
clz_name = "SetGameScore"
is_private = false
clz_is_trait = false
clz_description = """ Updates the game score of the specified user in the game; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ The chat to which the message with the game belongs. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message. """, tags = [  ] },
  { name = "edit_message", class = "Option<bool>", description = """ True, if the message should be edited. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "score", class = "Option<i32>", description = """ The new score. """, tags = [  ] },
  { name = "force", class = "Option<bool>", description = """ Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table. """, tags = [  ] },
  
]
fields_size = 7
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetGameScore {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetGameScore.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetGameScore.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setGameScore" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetGameScore """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetGameScore.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetInlineGameScore]
origin_name = "setInlineGameScore"
clz_name = "SetInlineGameScore"
is_private = false
clz_is_trait = false
clz_description = """ Updates the game score of the specified user in a game; for bots only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "inline_message_id", class = "Option<String>", description = """ Inline message identifier. """, tags = [  ] },
  { name = "edit_message", class = "Option<bool>", description = """ True, if the message should be edited. """, tags = [  ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "score", class = "Option<i32>", description = """ The new score. """, tags = [  ] },
  { name = "force", class = "Option<bool>", description = """ Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetInlineGameScore {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetInlineGameScore.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetInlineGameScore.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setInlineGameScore" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetInlineGameScore """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetInlineGameScore.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetLogStream]
origin_name = "setLogStream"
clz_name = "SetLogStream"
is_private = false
clz_is_trait = false
clz_description = """ Sets new log stream for internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "log_stream", class = "Option<Box<LogStream>>", description = """ New log stream. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetLogStream {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetLogStream {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetLogStream.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetLogStream.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setLogStream" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetLogStream """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetLogStream.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetLogTagVerbosityLevel]
origin_name = "setLogTagVerbosityLevel"
clz_name = "SetLogTagVerbosityLevel"
is_private = false
clz_is_trait = false
clz_description = """ Sets the verbosity level for a specified TDLib internal log tag. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "tag", class = "Option<String>", description = """ Logging tag to change verbosity level. """, tags = [  ] },
  { name = "new_verbosity_level", class = "Option<i32>", description = """ New verbosity level; 1-1024. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetLogTagVerbosityLevel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetLogTagVerbosityLevel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetLogTagVerbosityLevel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setLogTagVerbosityLevel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetLogTagVerbosityLevel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetLogTagVerbosityLevel.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetLogVerbosityLevel]
origin_name = "setLogVerbosityLevel"
clz_name = "SetLogVerbosityLevel"
is_private = false
clz_is_trait = false
clz_description = """ Sets the verbosity level of the internal logging of TDLib. This is an offline method. Can be called before authorization. Can be called synchronously. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "new_verbosity_level", class = "Option<i32>", description = """ New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetLogVerbosityLevel {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetLogVerbosityLevel.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetLogVerbosityLevel.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setLogVerbosityLevel" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetLogVerbosityLevel """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetLogVerbosityLevel.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetName]
origin_name = "setName"
clz_name = "SetName"
is_private = false
clz_is_trait = false
clz_description = """ Changes the first and last name of the current user. If something changes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "first_name", class = "Option<String>", description = """ The new value of the first name for the user; 1-64 characters. """, tags = [  ] },
  { name = "last_name", class = "Option<String>", description = """ The new value of the optional last name for the user; 0-64 characters. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetName {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetName.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetName.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setName" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetName """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetName.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetNetworkType]
origin_name = "setNetworkType"
clz_name = "SetNetworkType"
is_private = false
clz_is_trait = false
clz_description = """ Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it should be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "type_", class = "Option<Box<NetworkType>>", description = """ The new network type. By default, networkTypeOther. """, tags = [ """ #[serde(rename(serialize = "type", deserialize = "type"))] """ ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetNetworkType {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetNetworkType {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetNetworkType.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetNetworkType.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setNetworkType" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetNetworkType """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetNetworkType.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetOption]
origin_name = "setOption"
clz_name = "SetOption"
is_private = false
clz_is_trait = false
clz_description = """ Sets the value of an option. (Check the list of available options on  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "name", class = "Option<String>", description = """ The name of the option. """, tags = [  ] },
  { name = "value", class = "Option<Box<OptionValue>>", description = """ The new value of the option. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetOption {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetOption {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetOption.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetOption.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setOption" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetOption """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetOption.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetPassportElement]
origin_name = "setPassportElement"
clz_name = "SetPassportElement"
is_private = false
clz_is_trait = false
clz_description = """ Adds an element to the user's Telegram Passport. May return an error with a message "PHONE_VERIFICATION_NEEDED" or "EMAIL_VERIFICATION_NEEDED" if the chosen phone number or the chosen email address must be verified first. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "element", class = "Option<Box<InputPassportElement>>", description = """ Input Telegram Passport element. """, tags = [  ] },
  { name = "password", class = "Option<String>", description = """ Password of the current user. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetPassportElement {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetPassportElement {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetPassportElement.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetPassportElement.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setPassportElement" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetPassportElement """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetPassportElement.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetPassportElementErrors]
origin_name = "setPassportElementErrors"
clz_name = "SetPassportElementErrors"
is_private = false
clz_is_trait = false
clz_description = """ Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  { name = "errors", class = "Option<Vec<InputPassportElementError>>", description = """ The errors. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetPassportElementErrors {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetPassportElementErrors.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetPassportElementErrors.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setPassportElementErrors" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetPassportElementErrors """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetPassportElementErrors.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetPassword]
origin_name = "setPassword"
clz_name = "SetPassword"
is_private = false
clz_is_trait = false
clz_description = """ Changes the password for the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "old_password", class = "Option<String>", description = """ Previous password of the user. """, tags = [  ] },
  { name = "new_password", class = "Option<String>", description = """ New password of the user; may be empty to remove the password. """, tags = [  ] },
  { name = "new_hint", class = "Option<String>", description = """ New password hint; may be empty. """, tags = [  ] },
  { name = "set_recovery_email_address", class = "Option<bool>", description = """ Pass true if the recovery email address should be changed. """, tags = [  ] },
  { name = "new_recovery_email_address", class = "Option<String>", description = """ New recovery email address; may be empty. """, tags = [  ] },
  
]
fields_size = 6
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetPassword {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetPassword.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetPassword.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setPassword" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetPassword """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetPassword.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetPinnedChats]
origin_name = "setPinnedChats"
clz_name = "SetPinnedChats"
is_private = false
clz_is_trait = false
clz_description = """ Changes the order of pinned chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_ids", class = "Option<Vec<i64>>", description = """ The new list of pinned chats. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetPinnedChats {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetPinnedChats.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetPinnedChats.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setPinnedChats" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetPinnedChats """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetPinnedChats.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetPollAnswer]
origin_name = "setPollAnswer"
clz_name = "SetPollAnswer"
is_private = false
clz_is_trait = false
clz_description = """ Changes user answer to a poll. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to which the poll belongs. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message containing the poll. """, tags = [  ] },
  { name = "option_ids", class = "Option<Vec<i32>>", description = """ 0-based identifiers of options, chosen by the user. Currently user can't choose more than 1 option. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetPollAnswer {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetPollAnswer.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetPollAnswer.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setPollAnswer" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetPollAnswer """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetPollAnswer.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetProfilePhoto]
origin_name = "setProfilePhoto"
clz_name = "SetProfilePhoto"
is_private = false
clz_is_trait = false
clz_description = """ Uploads a new profile photo for the current user. If something changes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "photo", class = "Option<Box<InputFile>>", description = """ Profile photo to set. inputFileId and inputFileRemote may still be unsupported. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetProfilePhoto {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetProfilePhoto {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetProfilePhoto.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetProfilePhoto.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setProfilePhoto" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetProfilePhoto """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetProfilePhoto.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetRecoveryEmailAddress]
origin_name = "setRecoveryEmailAddress"
clz_name = "SetRecoveryEmailAddress"
is_private = false
clz_is_trait = false
clz_description = """ Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "password", class = "Option<String>", description = """ Password of the current user. """, tags = [  ] },
  { name = "new_recovery_email_address", class = "Option<String>", description = """ New recovery email address. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetRecoveryEmailAddress {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetRecoveryEmailAddress.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetRecoveryEmailAddress.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setRecoveryEmailAddress" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetRecoveryEmailAddress """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetRecoveryEmailAddress.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetScopeNotificationSettings]
origin_name = "setScopeNotificationSettings"
clz_name = "SetScopeNotificationSettings"
is_private = false
clz_is_trait = false
clz_description = """ Changes notification settings for chats of a given type. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "scope", class = "Option<Box<NotificationSettingsScope>>", description = """ Types of chats for which to change the notification settings. """, tags = [  ] },
  { name = "notification_settings", class = "Option<ScopeNotificationSettings>", description = """ The new notification settings for the given scope. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetScopeNotificationSettings {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetScopeNotificationSettings {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetScopeNotificationSettings.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetScopeNotificationSettings.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setScopeNotificationSettings" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetScopeNotificationSettings """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetScopeNotificationSettings.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetStickerPositionInSet]
origin_name = "setStickerPositionInSet"
clz_name = "SetStickerPositionInSet"
is_private = false
clz_is_trait = false
clz_description = """ Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker", class = "Option<Box<InputFile>>", description = """ Sticker. """, tags = [  ] },
  { name = "position", class = "Option<i32>", description = """ New position of the sticker in the set, zero-based. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetStickerPositionInSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetStickerPositionInSet {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetStickerPositionInSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetStickerPositionInSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setStickerPositionInSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetStickerPositionInSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetStickerPositionInSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetSupergroupDescription]
origin_name = "setSupergroupDescription"
clz_name = "SetSupergroupDescription"
is_private = false
clz_is_trait = false
clz_description = """ Changes information about a supergroup or channel; requires appropriate administrator rights. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  { name = "description", class = "Option<String>", description = """ New supergroup or channel description; 0-255 characters. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetSupergroupDescription {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetSupergroupDescription.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetSupergroupDescription.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setSupergroupDescription" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetSupergroupDescription """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetSupergroupDescription.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetSupergroupStickerSet]
origin_name = "setSupergroupStickerSet"
clz_name = "SetSupergroupStickerSet"
is_private = false
clz_is_trait = false
clz_description = """ Changes the sticker set of a supergroup; requires appropriate rights in the supergroup. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup. """, tags = [  ] },
  { name = "sticker_set_id", class = "Option<i64>", description = """ New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetSupergroupStickerSet {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetSupergroupStickerSet.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetSupergroupStickerSet.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setSupergroupStickerSet" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetSupergroupStickerSet """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetSupergroupStickerSet.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetSupergroupUsername]
origin_name = "setSupergroupUsername"
clz_name = "SetSupergroupUsername"
is_private = false
clz_is_trait = false
clz_description = """ Changes the username of a supergroup or channel, requires creator privileges in the supergroup or channel. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup or channel. """, tags = [  ] },
  { name = "username", class = "Option<String>", description = """ New value of the username. Use an empty string to remove the username. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetSupergroupUsername {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetSupergroupUsername.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetSupergroupUsername.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setSupergroupUsername" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetSupergroupUsername """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetSupergroupUsername.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetTdlibParameters]
origin_name = "setTdlibParameters"
clz_name = "SetTdlibParameters"
is_private = false
clz_is_trait = false
clz_description = """ Sets the parameters for TDLib initialization. Works only when the current authorization state is  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "parameters", class = "Option<TdlibParameters>", description = """ Parameters. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetTdlibParameters {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetTdlibParameters.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetTdlibParameters.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setTdlibParameters" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetTdlibParameters """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetTdlibParameters.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetUserPrivacySettingRules]
origin_name = "setUserPrivacySettingRules"
clz_name = "SetUserPrivacySettingRules"
is_private = false
clz_is_trait = false
clz_description = """ Changes user privacy settings. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "setting", class = "Option<Box<UserPrivacySetting>>", description = """ The privacy setting. """, tags = [  ] },
  { name = "rules", class = "Option<UserPrivacySettingRules>", description = """ The new privacy rules. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetUserPrivacySettingRules {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for SetUserPrivacySettingRules {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.SetUserPrivacySettingRules.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetUserPrivacySettingRules.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setUserPrivacySettingRules" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetUserPrivacySettingRules """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetUserPrivacySettingRules.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SetUsername]
origin_name = "setUsername"
clz_name = "SetUsername"
is_private = false
clz_is_trait = false
clz_description = """ Changes the username of the current user. If something changes,  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "username", class = "Option<String>", description = """ The new value of the username. Use an empty string to remove the username. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SetUsername {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SetUsername.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SetUsername.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "setUsername" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SetUsername """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SetUsername.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.StopPoll]
origin_name = "stopPoll"
clz_name = "StopPoll"
is_private = false
clz_is_trait = false
clz_description = """ Stops a poll. A poll in a message can be stopped when the message has can_be_edited flag set. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to which the poll belongs. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Identifier of the message containing the poll. """, tags = [  ] },
  { name = "reply_markup", class = "Option<Box<ReplyMarkup>>", description = """ The new message reply markup; for bots only. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl StopPoll {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for StopPoll {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.StopPoll.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.StopPoll.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "stopPoll" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::StopPoll """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.StopPoll.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.SynchronizeLanguagePack]
origin_name = "synchronizeLanguagePack"
clz_name = "SynchronizeLanguagePack"
is_private = false
clz_is_trait = false
clz_description = """ Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "language_pack_id", class = "Option<String>", description = """ Language pack identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl SynchronizeLanguagePack {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.SynchronizeLanguagePack.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.SynchronizeLanguagePack.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "synchronizeLanguagePack" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::SynchronizeLanguagePack """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.SynchronizeLanguagePack.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TerminateAllOtherSessions]
origin_name = "terminateAllOtherSessions"
clz_name = "TerminateAllOtherSessions"
is_private = false
clz_is_trait = false
clz_description = """ Terminates all other sessions of the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TerminateAllOtherSessions {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TerminateAllOtherSessions.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TerminateAllOtherSessions.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "terminateAllOtherSessions" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TerminateAllOtherSessions """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TerminateAllOtherSessions.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TerminateSession]
origin_name = "terminateSession"
clz_name = "TerminateSession"
is_private = false
clz_is_trait = false
clz_description = """ Terminates a session of the current user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "session_id", class = "Option<i64>", description = """ Session identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TerminateSession {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TerminateSession.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TerminateSession.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "terminateSession" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TerminateSession """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TerminateSession.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallBytes]
origin_name = "testCallBytes"
clz_name = "TestCallBytes"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received bytes; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<String>", description = """ Bytes to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallBytes {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallBytes.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallBytes.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallBytes" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallBytes """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallBytes.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallEmpty]
origin_name = "testCallEmpty"
clz_name = "TestCallEmpty"
is_private = false
clz_is_trait = false
clz_description = """ Does nothing; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallEmpty {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallEmpty.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallEmpty.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallEmpty" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallEmpty """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallEmpty.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallString]
origin_name = "testCallString"
clz_name = "TestCallString"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received string; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<String>", description = """ String to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallString.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallVectorInt]
origin_name = "testCallVectorInt"
clz_name = "TestCallVectorInt"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<Vec<i32>>", description = """ Vector of numbers to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallVectorInt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallVectorInt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallVectorInt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallVectorInt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallVectorInt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallVectorInt.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallVectorIntObject]
origin_name = "testCallVectorIntObject"
clz_name = "TestCallVectorIntObject"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<Vec<TestInt>>", description = """ Vector of objects to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallVectorIntObject {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallVectorIntObject.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallVectorIntObject.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallVectorIntObject" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallVectorIntObject """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallVectorIntObject.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallVectorString]
origin_name = "testCallVectorString"
clz_name = "TestCallVectorString"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<Vec<String>>", description = """ Vector of strings to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallVectorString {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallVectorString.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallVectorString.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallVectorString" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallVectorString """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallVectorString.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestCallVectorStringObject]
origin_name = "testCallVectorStringObject"
clz_name = "TestCallVectorStringObject"
is_private = false
clz_is_trait = false
clz_description = """ Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<Vec<TestString>>", description = """ Vector of objects to return. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestCallVectorStringObject {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestCallVectorStringObject.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestCallVectorStringObject.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testCallVectorStringObject" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestCallVectorStringObject """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestCallVectorStringObject.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestGetDifference]
origin_name = "testGetDifference"
clz_name = "TestGetDifference"
is_private = false
clz_is_trait = false
clz_description = """ Forces an updates.getDifference call to the Telegram servers; for testing only. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestGetDifference {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestGetDifference.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestGetDifference.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testGetDifference" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestGetDifference """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestGetDifference.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestNetwork]
origin_name = "testNetwork"
clz_name = "TestNetwork"
is_private = false
clz_is_trait = false
clz_description = """ Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestNetwork {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestNetwork.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestNetwork.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testNetwork" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestNetwork """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestNetwork.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestSquareInt]
origin_name = "testSquareInt"
clz_name = "TestSquareInt"
is_private = false
clz_is_trait = false
clz_description = """ Returns the squared received number; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "x", class = "Option<i32>", description = """ Number to square. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestSquareInt {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestSquareInt.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestSquareInt.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testSquareInt" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestSquareInt """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestSquareInt.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestUseError]
origin_name = "testUseError"
clz_name = "TestUseError"
is_private = false
clz_is_trait = false
clz_description = """ Does nothing and ensures that the Error object is used; for testing only. This is an offline method. Can be called before authorization. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestUseError {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestUseError.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestUseError.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testUseError" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestUseError """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestUseError.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.TestUseUpdate]
origin_name = "testUseUpdate"
clz_name = "TestUseUpdate"
is_private = false
clz_is_trait = false
clz_description = """ Does nothing and ensures that the  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  
]
fields_size = 1
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl TestUseUpdate {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.TestUseUpdate.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.TestUseUpdate.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "testUseUpdate" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::TestUseUpdate """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.TestUseUpdate.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleBasicGroupAdministrators]
origin_name = "toggleBasicGroupAdministrators"
clz_name = "ToggleBasicGroupAdministrators"
is_private = false
clz_is_trait = false
clz_description = """ Toggles the "All members are admins" setting in basic groups; requires creator privileges in the group. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "basic_group_id", class = "Option<i32>", description = """ Identifier of the basic group. """, tags = [  ] },
  { name = "everyone_is_administrator", class = "Option<bool>", description = """ New value of everyone_is_administrator. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleBasicGroupAdministrators {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleBasicGroupAdministrators.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleBasicGroupAdministrators.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleBasicGroupAdministrators" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleBasicGroupAdministrators """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleBasicGroupAdministrators.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleChatDefaultDisableNotification]
origin_name = "toggleChatDefaultDisableNotification"
clz_name = "ToggleChatDefaultDisableNotification"
is_private = false
clz_is_trait = false
clz_description = """ Changes the value of the default disable_notification parameter, used when a message is sent to a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "default_disable_notification", class = "Option<bool>", description = """ New value of default_disable_notification. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleChatDefaultDisableNotification {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleChatDefaultDisableNotification.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleChatDefaultDisableNotification.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleChatDefaultDisableNotification" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleChatDefaultDisableNotification """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleChatDefaultDisableNotification.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleChatIsMarkedAsUnread]
origin_name = "toggleChatIsMarkedAsUnread"
clz_name = "ToggleChatIsMarkedAsUnread"
is_private = false
clz_is_trait = false
clz_description = """ Changes the marked as unread state of a chat. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_marked_as_unread", class = "Option<bool>", description = """ New value of is_marked_as_unread. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleChatIsMarkedAsUnread {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleChatIsMarkedAsUnread.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleChatIsMarkedAsUnread.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleChatIsMarkedAsUnread" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleChatIsMarkedAsUnread """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleChatIsMarkedAsUnread.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleChatIsPinned]
origin_name = "toggleChatIsPinned"
clz_name = "ToggleChatIsPinned"
is_private = false
clz_is_trait = false
clz_description = """ Changes the pinned state of a chat. You can pin up to GetOption("pinned_chat_count_max") non-secret chats and the same number of secret chats. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "is_pinned", class = "Option<bool>", description = """ New value of is_pinned. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleChatIsPinned {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleChatIsPinned.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleChatIsPinned.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleChatIsPinned" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleChatIsPinned """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleChatIsPinned.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleSupergroupInvites]
origin_name = "toggleSupergroupInvites"
clz_name = "ToggleSupergroupInvites"
is_private = false
clz_is_trait = false
clz_description = """ Toggles whether all members of a supergroup can add new members; requires appropriate administrator rights in the supergroup. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the supergroup. """, tags = [  ] },
  { name = "anyone_can_invite", class = "Option<bool>", description = """ New value of anyone_can_invite. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleSupergroupInvites {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleSupergroupInvites.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleSupergroupInvites.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleSupergroupInvites" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleSupergroupInvites """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleSupergroupInvites.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleSupergroupIsAllHistoryAvailable]
origin_name = "toggleSupergroupIsAllHistoryAvailable"
clz_name = "ToggleSupergroupIsAllHistoryAvailable"
is_private = false
clz_is_trait = false
clz_description = """ Toggles whether the message history of a supergroup is available to new members; requires appropriate administrator rights in the supergroup. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ The identifier of the supergroup. """, tags = [  ] },
  { name = "is_all_history_available", class = "Option<bool>", description = """ The new value of is_all_history_available. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleSupergroupIsAllHistoryAvailable {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleSupergroupIsAllHistoryAvailable.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleSupergroupIsAllHistoryAvailable.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleSupergroupIsAllHistoryAvailable" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleSupergroupIsAllHistoryAvailable """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleSupergroupIsAllHistoryAvailable.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ToggleSupergroupSignMessages]
origin_name = "toggleSupergroupSignMessages"
clz_name = "ToggleSupergroupSignMessages"
is_private = false
clz_is_trait = false
clz_description = """ Toggles sender signatures messages sent in a channel; requires appropriate administrator rights in the channel. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "supergroup_id", class = "Option<i32>", description = """ Identifier of the channel. """, tags = [  ] },
  { name = "sign_messages", class = "Option<bool>", description = """ New value of sign_messages. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ToggleSupergroupSignMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ToggleSupergroupSignMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ToggleSupergroupSignMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "toggleSupergroupSignMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ToggleSupergroupSignMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ToggleSupergroupSignMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.UnblockUser]
origin_name = "unblockUser"
clz_name = "UnblockUser"
is_private = false
clz_is_trait = false
clz_description = """ Removes a user from the blacklist. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ User identifier. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UnblockUser {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UnblockUser.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UnblockUser.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "unblockUser" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UnblockUser """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UnblockUser.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.UnpinChatMessage]
origin_name = "unpinChatMessage"
clz_name = "UnpinChatMessage"
is_private = false
clz_is_trait = false
clz_description = """ Removes the pinned message from a chat; requires appropriate administrator rights in the group or channel. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UnpinChatMessage {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UnpinChatMessage.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UnpinChatMessage.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "unpinChatMessage" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UnpinChatMessage """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UnpinChatMessage.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.UpgradeBasicGroupChatToSupergroupChat]
origin_name = "upgradeBasicGroupChatToSupergroupChat"
clz_name = "UpgradeBasicGroupChatToSupergroupChat"
is_private = false
clz_is_trait = false
clz_description = """ Creates a new supergroup from an existing basic group and sends a corresponding  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Identifier of the chat to upgrade. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UpgradeBasicGroupChatToSupergroupChat {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.UpgradeBasicGroupChatToSupergroupChat.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UpgradeBasicGroupChatToSupergroupChat.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "upgradeBasicGroupChatToSupergroupChat" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UpgradeBasicGroupChatToSupergroupChat """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UpgradeBasicGroupChatToSupergroupChat.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.UploadFile]
origin_name = "uploadFile"
clz_name = "UploadFile"
is_private = false
clz_is_trait = false
clz_description = """ Asynchronously uploads a file to the cloud without sending it in a message.  """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "file", class = "Option<Box<InputFile>>", description = """ File to upload. """, tags = [  ] },
  { name = "file_type", class = "Option<Box<FileType>>", description = """ File type. """, tags = [  ] },
  { name = "priority", class = "Option<i32>", description = """ Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which uploadFile was called will be uploaded first. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UploadFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UploadFile {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UploadFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UploadFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "uploadFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UploadFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UploadFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.UploadStickerFile]
origin_name = "uploadStickerFile"
clz_name = "UploadStickerFile"
is_private = false
clz_is_trait = false
clz_description = """ Uploads a PNG image with a sticker; for bots only; returns the uploaded file. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "user_id", class = "Option<i32>", description = """ Sticker file owner. """, tags = [  ] },
  { name = "png_sticker", class = "Option<Box<InputFile>>", description = """ PNG image with the sticker; must be up to 512 kB in size and fit in 512x512 square. """, tags = [  ] },
  
]
fields_size = 3
has_trait_field = true
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl UploadStickerFile {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

"""
impl Clone for UploadStickerFile {
  fn clone(&self) -> Self { rtd_clone!()(self) }
}
""",

]



[[rtd.UploadStickerFile.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.UploadStickerFile.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "uploadStickerFile" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::UploadStickerFile """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.UploadStickerFile.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ValidateOrderInfo]
origin_name = "validateOrderInfo"
clz_name = "ValidateOrderInfo"
is_private = false
clz_is_trait = false
clz_description = """ Validates the order information provided by a user and returns the available shipping options for a flexible invoice. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier of the Invoice message. """, tags = [  ] },
  { name = "message_id", class = "Option<i64>", description = """ Message identifier. """, tags = [  ] },
  { name = "order_info", class = "Option<OrderInfo>", description = """ The order information, provided by the user. """, tags = [  ] },
  { name = "allow_save", class = "Option<bool>", description = """ True, if the order information can be saved. """, tags = [  ] },
  
]
fields_size = 5
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ValidateOrderInfo {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ValidateOrderInfo.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ValidateOrderInfo.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "validateOrderInfo" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ValidateOrderInfo """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ValidateOrderInfo.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ViewMessages]
origin_name = "viewMessages"
clz_name = "ViewMessages"
is_private = false
clz_is_trait = false
clz_description = """ Informs TDLib that messages are being viewed by the user. Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels). """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "chat_id", class = "Option<i64>", description = """ Chat identifier. """, tags = [  ] },
  { name = "message_ids", class = "Option<Vec<i64>>", description = """ The identifiers of the messages being viewed. """, tags = [  ] },
  { name = "force_read", class = "Option<bool>", description = """ True, if messages in closed chats should be marked as read. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ViewMessages {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ViewMessages.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ViewMessages.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "viewMessages" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ViewMessages """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ViewMessages.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.ViewTrendingStickerSets]
origin_name = "viewTrendingStickerSets"
clz_name = "ViewTrendingStickerSets"
is_private = false
clz_is_trait = false
clz_description = """ Informs the server that some trending sticker sets have been viewed by the user. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "sticker_set_ids", class = "Option<Vec<i64>>", description = """ Identifiers of viewed trending sticker sets. """, tags = [  ] },
  
]
fields_size = 2
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl ViewTrendingStickerSets {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.ViewTrendingStickerSets.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.ViewTrendingStickerSets.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "viewTrendingStickerSets" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::ViewTrendingStickerSets """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.ViewTrendingStickerSets.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]







[rtd.WriteGeneratedFilePart]
origin_name = "writeGeneratedFilePart"
clz_name = "WriteGeneratedFilePart"
is_private = false
clz_is_trait = false
clz_description = """ Writes a part of a generated file. This method is intended to be used only if the client has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file. """
has_subclasses = false

fields = [
  { doc_hidden = true, name = "td_name", class = "String", tags = [ """ #[serde(rename(serialize = "@type", deserialize = "@type"))] """ ] },
  { name = "generation_id", class = "Option<i64>", description = """ The identifier of the generation process. """, tags = [  ] },
  { name = "offset", class = "Option<i32>", description = """ The offset from which to write the data to the file. """, tags = [  ] },
  { name = "data", class = "Option<String>", description = """ The data to write. """, tags = [  ] },
  
]
fields_size = 4
has_trait_field = false
set_trait_typetag = false
has_builder_struct = false # deprecated
trait_tags = [  ]
dna = "struct"
derives = [ "Debug", "Clone", "Serialize", "Deserialize" ]
extra_fns = [

"""
impl WriteGeneratedFilePart {
  pub fn from_json<S: AsRef<str>>(json: S) -> Option<Self> { from_json!()(json.as_ref()) }
}
""",

]



[[rtd.WriteGeneratedFilePart.supers]]
name = "Object"
impl_trait_typetag = false

[[rtd.WriteGeneratedFilePart.supers]]
name = "RObject"
impl_trait_typetag = false
fns = [
  { doc_hidden = true, name = "td_name", ret = "&'static str", body = """ "writeGeneratedFilePart" """ },
  { name = "td_type", ret = "RTDType", body = """ RTDType::WriteGeneratedFilePart """},
  { name = "to_json", ret = "String", body = "rtd_to_json!()(self)" },
]



[[rtd.WriteGeneratedFilePart.supers]]
name = "Function"
impl_trait_typetag = false
impl_tags = [  ]






